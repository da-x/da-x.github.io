<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title>Dan Aloni</title>
	<subtitle>Dan Aloni</subtitle>
	<link href="https://blog.aloni.org/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="https://blog.aloni.org"/>
	<generator uri="https://www.getzola.org/">Zola</generator>
	<updated>2023-12-16T00:00:00+00:00</updated>
	<id>https://blog.aloni.org/atom.xml</id>
	<entry xml:lang="en">
		<title>Regret Minimization Test</title>
		<published>2023-12-16T00:00:00+00:00</published>
		<updated>2023-12-16T00:00:00+00:00</updated>
		<link href="https://blog.aloni.org/posts/regret-minimization-test/" type="text/html"/>
		<id>https://blog.aloni.org/posts/regret-minimization-test/</id>
		<content type="html">&lt;p&gt;You would save yourself pain if you have the least amount of regrets.&lt;&#x2F;p&gt;
&lt;p&gt;After accumulating a life of decisions, it is important to know when to look back. I can test a decision I&#x27;ve made in the past for whether I have a real regret or not.&lt;&#x2F;p&gt;
&lt;p&gt;The test goes like this:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;If hypothetically, I would unequivocally want to send myself a note from the future, straight to the decision time, on which only the text &amp;quot;don&#x27;t do it!&amp;quot; is written &lt;em&gt;and nothing else&lt;&#x2F;em&gt;, then it is a real regret.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Anything that does not meet this criteria is a fake regret. Any decision that needs more information than what you had at that time â€” cannot be really regretted.&lt;&#x2F;p&gt;
&lt;p&gt;This approach to defining and testing regret seems logical and practical. It filters out scenarios where the regret is based on information or perspectives you couldn&#x27;t have had at the time. It focuses on decisions where, even with the limited info you had then, a simple warning from the future would have been enough to change your mind. This method acknowledges that hindsight is clearer, but doesn&#x27;t let it unfairly influence your judgment of past decisions.&lt;&#x2F;p&gt;
&lt;p&gt;You can regard this test a complementary tool to the &amp;quot;regret minimization framework&amp;quot; by Jeff Bezos, but which works only after the fact.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Bash #4 - Bash Docstrings</title>
		<published>2023-07-31T00:00:00+00:00</published>
		<updated>2023-07-31T00:00:00+00:00</updated>
		<link href="https://blog.aloni.org/posts/bash-docstrings/" type="text/html"/>
		<id>https://blog.aloni.org/posts/bash-docstrings/</id>
		<content type="html">&lt;p&gt;Previous post: &lt;a href=&quot;..&#x2F;bash-path-wrapping-executables&quot;&gt;#3&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Once of Python&#x27;s nice features are &lt;span class=&#x27;external-link-outer&#x27;&gt;&lt;a class=&quot;external-link&quot;rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;peps.python.org&#x2F;pep-0257&#x2F;&quot;&gt;docstrings&lt;span class=&#x27;external-link-no-underline&#x27;&gt;&lt;&#x2F;span&gt;&lt;svg width=&#x27;13.5&#x27; height=&#x27;13.5&#x27; aria-hidden=&#x27;true&#x27; viewBox=&#x27;0 0 24 24&#x27; class=&#x27;iconExternalLink_wgqa&#x27;&gt;&lt;path fill=&#x27;currentColor&#x27; d=&#x27;M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z&#x27;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;span&gt;, for which a &lt;code&gt;help&lt;&#x2F;code&gt; function on a module generates a nice documentation screen. Can we follow a similar technique in our &lt;code&gt;bash&lt;&#x2F;code&gt;? Yes we can!&lt;&#x2F;p&gt;
&lt;p&gt;We&#x27;ll do this as an extension of the &lt;a href=&quot;..&#x2F;bash-functional-command-relay&quot;&gt;functional command
relay&lt;&#x2F;a&gt; technique.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;Adding docstrings can be done by inserting special inner functions that don&#x27;t
execute on command execution. For example:&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;source shell bash&quot;&gt;&lt;span class=&quot;meta function shell&quot;&gt;&lt;span class=&quot;entity name function shell&quot;&gt;build&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section parens begin shell&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section parens end shell&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;punctuation section braces begin shell&quot;&gt;{&lt;&#x2F;span&gt;
&lt;span class=&quot;meta function shell&quot;&gt;    &lt;span class=&quot;entity name function shell&quot;&gt;__docstring__&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section parens begin shell&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section parens end shell&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;punctuation section braces begin shell&quot;&gt;{&lt;&#x2F;span&gt;
	&lt;span class=&quot;meta function-call shell&quot;&gt;&lt;span class=&quot;support function echo shell&quot;&gt;echo&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call arguments shell&quot;&gt; &lt;span class=&quot;string quoted double shell&quot;&gt;&lt;span class=&quot;punctuation definition string begin shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation definition string end shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;string quoted double shell&quot;&gt;&lt;span class=&quot;punctuation definition string begin shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&amp;lt;params&amp;gt;

        Build and work on stuff

	-j &amp;lt;core&amp;gt; - number of cores
       &lt;span class=&quot;punctuation definition string end shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;string quoted double shell&quot;&gt;&lt;span class=&quot;punctuation definition string begin shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation definition string end shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
    &lt;span class=&quot;punctuation section braces end shell&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;

    &lt;span class=&quot;meta function-call shell&quot;&gt;&lt;span class=&quot;support function colon shell&quot;&gt;:&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;comment line number-sign shell&quot;&gt;&lt;span class=&quot;punctuation definition comment begin shell&quot;&gt;#&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;comment line number-sign shell&quot;&gt; &amp;lt;&amp;lt; your build implementation here &amp;gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;comment line number-sign shell&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section braces end shell&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;

&lt;span class=&quot;meta function shell&quot;&gt;&lt;span class=&quot;entity name function shell&quot;&gt;run&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section parens begin shell&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section parens end shell&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;punctuation section braces begin shell&quot;&gt;{&lt;&#x2F;span&gt;
&lt;span class=&quot;meta function shell&quot;&gt;    &lt;span class=&quot;entity name function shell&quot;&gt;__docstring__&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section parens begin shell&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section parens end shell&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;punctuation section braces begin shell&quot;&gt;{&lt;&#x2F;span&gt;
	&lt;span class=&quot;meta function-call shell&quot;&gt;&lt;span class=&quot;support function echo shell&quot;&gt;echo&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call arguments shell&quot;&gt; &lt;span class=&quot;string quoted double shell&quot;&gt;&lt;span class=&quot;punctuation definition string begin shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation definition string end shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;string quoted double shell&quot;&gt;&lt;span class=&quot;punctuation definition string begin shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&amp;lt;params&amp;gt;

        Run stuff
       &lt;span class=&quot;punctuation definition string end shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;string quoted double shell&quot;&gt;&lt;span class=&quot;punctuation definition string begin shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation definition string end shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
    &lt;span class=&quot;punctuation section braces end shell&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;

    &lt;span class=&quot;meta function-call shell&quot;&gt;&lt;span class=&quot;support function colon shell&quot;&gt;:&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;comment line number-sign shell&quot;&gt;&lt;span class=&quot;punctuation definition comment begin shell&quot;&gt;#&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;comment line number-sign shell&quot;&gt; &amp;lt;&amp;lt; your run implementation here &amp;gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;comment line number-sign shell&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section braces end shell&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;p&gt;We can pick this up in a new &lt;code&gt;help&lt;&#x2F;code&gt; command. Suppose we define &lt;code&gt;help&lt;&#x2F;code&gt; as such:&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;source shell bash&quot;&gt;&lt;span class=&quot;meta function shell&quot;&gt;&lt;span class=&quot;entity name function shell&quot;&gt;help&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section parens begin shell&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section parens end shell&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;punctuation section braces begin shell&quot;&gt;{&lt;&#x2F;span&gt;
&lt;span class=&quot;meta function shell&quot;&gt;    &lt;span class=&quot;entity name function shell&quot;&gt;doc-iter-functions&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section parens begin shell&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section parens end shell&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;punctuation section braces begin shell&quot;&gt;{&lt;&#x2F;span&gt;
&lt;span class=&quot;meta function-call shell&quot;&gt;        &lt;span class=&quot;storage modifier shell&quot;&gt;local&lt;&#x2F;span&gt; &lt;span class=&quot;variable other readwrite assignment shell&quot;&gt;funcname&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
        &lt;span class=&quot;keyword control loop for shell&quot;&gt;for&lt;&#x2F;span&gt;&lt;span class=&quot;meta group for shell&quot;&gt; funcname &lt;span class=&quot;keyword control in shell&quot;&gt;in&lt;&#x2F;span&gt; &lt;span class=&quot;meta group expansion command parens shell&quot;&gt;&lt;span class=&quot;punctuation definition variable shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section parens begin shell&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call shell&quot;&gt;&lt;span class=&quot;storage modifier shell&quot;&gt;declare&lt;&#x2F;span&gt; &lt;span class=&quot;variable parameter option shell&quot;&gt;&lt;span class=&quot;punctuation definition parameter shell&quot;&gt;-&lt;&#x2F;span&gt;F&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call shell&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;keyword operator logical pipe shell&quot;&gt;|&lt;&#x2F;span&gt; &lt;span class=&quot;meta function-call shell&quot;&gt;&lt;span class=&quot;variable function shell&quot;&gt;grep&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call arguments shell&quot;&gt; &lt;span class=&quot;punctuation separator continuation line shell&quot;&gt;\
&lt;&#x2F;span&gt;&lt;span class=&quot;variable parameter option shell&quot;&gt;&lt;span class=&quot;punctuation definition parameter shell&quot;&gt;            -&lt;&#x2F;span&gt;Ev&lt;&#x2F;span&gt; &lt;span class=&quot;string quoted single shell&quot;&gt;&lt;span class=&quot;punctuation definition string begin shell&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;^declare -fx&lt;span class=&quot;punctuation definition string end shell&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;keyword operator logical pipe shell&quot;&gt;|&lt;&#x2F;span&gt; &lt;span class=&quot;meta function-call shell&quot;&gt;&lt;span class=&quot;variable function shell&quot;&gt;sed&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call arguments shell&quot;&gt; &lt;span class=&quot;string quoted single shell&quot;&gt;&lt;span class=&quot;punctuation definition string begin shell&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;s&#x2F;declare -f &#x2F;&#x2F;g&lt;span class=&quot;punctuation definition string end shell&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;keyword operator logical pipe shell&quot;&gt;|&lt;&#x2F;span&gt; &lt;span class=&quot;meta function-call shell&quot;&gt;&lt;span class=&quot;variable function shell&quot;&gt;sort&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section parens end shell&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;keyword operator logical continue shell&quot;&gt;;&lt;&#x2F;span&gt;
        &lt;span class=&quot;keyword control loop do shell&quot;&gt;do&lt;&#x2F;span&gt;
&lt;span class=&quot;meta function shell&quot;&gt;            &lt;span class=&quot;storage type function shell&quot;&gt;function&lt;&#x2F;span&gt; &lt;span class=&quot;entity name function shell&quot;&gt;__docstring__&lt;&#x2F;span&gt; &lt;span class=&quot;punctuation section parens begin shell&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section parens end shell&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;punctuation section braces begin shell&quot;&gt;{&lt;&#x2F;span&gt; &lt;span class=&quot;meta function-call shell&quot;&gt;&lt;span class=&quot;support function colon shell&quot;&gt;:&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;keyword operator logical continue shell&quot;&gt;;&lt;&#x2F;span&gt; &lt;span class=&quot;punctuation section braces end shell&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
            &lt;span class=&quot;meta function-call shell&quot;&gt;&lt;span class=&quot;support function eval shell&quot;&gt;eval&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call arguments shell&quot;&gt; &lt;span class=&quot;string quoted double shell&quot;&gt;&lt;span class=&quot;punctuation definition string begin shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span class=&quot;meta group expansion command parens shell&quot;&gt;&lt;span class=&quot;punctuation definition variable shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section parens begin shell&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call shell&quot;&gt;&lt;span class=&quot;support function type shell&quot;&gt;type&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call arguments shell&quot;&gt; &lt;span class=&quot;meta group expansion parameter shell&quot;&gt;&lt;span class=&quot;punctuation definition variable shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section expansion parameter begin shell&quot;&gt;{&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta group expansion parameter shell&quot;&gt;&lt;span class=&quot;variable other readwrite shell&quot;&gt;funcname&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta group expansion parameter shell&quot;&gt;&lt;span class=&quot;punctuation section expansion parameter end shell&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;keyword operator logical pipe shell&quot;&gt;|&lt;&#x2F;span&gt; &lt;span class=&quot;meta function-call shell&quot;&gt;&lt;span class=&quot;variable function shell&quot;&gt;awk&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call arguments shell&quot;&gt; &lt;span class=&quot;string quoted single shell&quot;&gt;&lt;span class=&quot;punctuation definition string begin shell&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&#x2F;function __docstring__ \(\)&#x2F;,&#x2F;};&#x2F;&lt;span class=&quot;punctuation definition string end shell&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section parens end shell&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation definition string end shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
            &lt;span class=&quot;keyword control conditional if shell&quot;&gt;if&lt;&#x2F;span&gt; &lt;span class=&quot;meta function-call arguments shell&quot;&gt;&lt;span class=&quot;support function double-brace begin shell&quot;&gt;[[&lt;&#x2F;span&gt; &lt;span class=&quot;string quoted double shell&quot;&gt;&lt;span class=&quot;punctuation definition string begin shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span class=&quot;meta group expansion command parens shell&quot;&gt;&lt;span class=&quot;punctuation definition variable shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section parens begin shell&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call shell&quot;&gt;&lt;span class=&quot;variable function shell&quot;&gt;__docstring__&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section parens end shell&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation definition string end shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;keyword operator logical shell&quot;&gt;!=&lt;&#x2F;span&gt; &lt;span class=&quot;string quoted double shell&quot;&gt;&lt;span class=&quot;punctuation definition string begin shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation definition string end shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;support function double-brace end shell&quot;&gt;]]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;keyword operator logical continue shell&quot;&gt;;&lt;&#x2F;span&gt; &lt;span class=&quot;keyword control conditional then shell&quot;&gt;then&lt;&#x2F;span&gt;
                &lt;span class=&quot;meta function-call shell&quot;&gt;&lt;span class=&quot;support function echo shell&quot;&gt;echo&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call arguments shell&quot;&gt; &lt;span class=&quot;variable parameter option shell&quot;&gt;&lt;span class=&quot;punctuation definition parameter shell&quot;&gt;-&lt;&#x2F;span&gt;n&lt;&#x2F;span&gt; &lt;span class=&quot;string quoted double shell&quot;&gt;&lt;span class=&quot;punctuation definition string begin shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;    script &lt;span class=&quot;meta group expansion parameter shell&quot;&gt;&lt;span class=&quot;punctuation definition variable shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section expansion parameter begin shell&quot;&gt;{&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta group expansion parameter shell&quot;&gt;&lt;span class=&quot;variable other readwrite shell&quot;&gt;funcname&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta group expansion parameter shell&quot;&gt;&lt;span class=&quot;punctuation section expansion parameter end shell&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation definition string end shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
                &lt;span class=&quot;meta function-call shell&quot;&gt;&lt;span class=&quot;variable function shell&quot;&gt;__docstring__&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
                &lt;span class=&quot;meta function-call shell&quot;&gt;&lt;span class=&quot;support function echo shell&quot;&gt;echo&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
            &lt;span class=&quot;keyword control conditional end shell&quot;&gt;fi&lt;&#x2F;span&gt;
        &lt;span class=&quot;keyword control loop end shell&quot;&gt;done&lt;&#x2F;span&gt;
    &lt;span class=&quot;punctuation section braces end shell&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;

    &lt;span class=&quot;meta function-call shell&quot;&gt;&lt;span class=&quot;variable function shell&quot;&gt;cat&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call arguments shell&quot;&gt; &lt;span class=&quot;string unquoted heredoc shell&quot;&gt;&lt;span class=&quot;keyword operator assignment redirection shell&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt; &lt;span class=&quot;keyword control heredoc-token shell&quot;&gt;EOF&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;string unquoted heredoc shell&quot;&gt;
Help screen

&lt;span class=&quot;meta group expansion command parens shell&quot;&gt;&lt;span class=&quot;punctuation definition variable shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section parens begin shell&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call shell&quot;&gt;&lt;span class=&quot;variable function shell&quot;&gt;doc-iter-functions&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section parens end shell&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;keyword control heredoc-token shell&quot;&gt;EOF&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;punctuation section braces end shell&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;p&gt;Our script now has a help screen! We can view it by executing the &lt;code&gt;help&lt;&#x2F;code&gt; command:&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;text plain&quot;&gt;$ .&#x2F;script help
Help screen

    script build &amp;lt;params&amp;gt;

        Build and work on stuff

        -j &amp;lt;core&amp;gt; - number of cores

    script run &amp;lt;params&amp;gt;

        Run stuff

&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;p&gt;If you are not sure how these bash function translate to commands to the script, read the previous post regarding &lt;a href=&quot;..&#x2F;bash-functional-command-relay&quot;&gt;functional command relay&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Putting Tests in a Separate Git Repo</title>
		<published>2022-06-02T00:00:00+00:00</published>
		<updated>2022-06-02T00:00:00+00:00</updated>
		<link href="https://blog.aloni.org/posts/putting-tests-in-a-separate-git-repo/" type="text/html"/>
		<id>https://blog.aloni.org/posts/putting-tests-in-a-separate-git-repo/</id>
		<content type="html">&lt;p&gt;In the debate on whether to put everything in the so-called mono-repo, system
tests are usually not considered a separate codebase.  My take on the mono-repo
vs multiple-repo debate is &amp;quot;split histories on a stable API boundary&amp;quot;, and I
think that for system tests this split becomes valid too.&lt;&#x2F;p&gt;
&lt;p&gt;With the emerging CI&#x2F;CD standard stacks that encourage us to put the tests with
the code being tested, it seems to me that the tendency to split the tests from
the main code gets even weaker, where it promotes a defaulted mono-repo design
that unites main code and test code together to the same repository.&lt;&#x2F;p&gt;
&lt;p&gt;In this post I present arguments mostly against putting system tests in the
same Git repository.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;api-compatibility&quot;&gt;API compatibility&lt;&#x2F;h2&gt;
&lt;p&gt;If a system presents APIs to external entities (i.e. your customers), it means
that your system tests should be able to do feature testing using these APIs in
a way that would allow new tests to work on old code. Tests relying on features
not supported by the old code can be auto-disabled.&lt;&#x2F;p&gt;
&lt;p&gt;The system tests are just another customer that insists on not upgrading across
this stable API boundary. The high-level tests are aware of this API layer, and
therefore can be versioned separately.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;git-bisect&quot;&gt;Git Bisect&lt;&#x2F;h2&gt;
&lt;p&gt;If you are using Git bisect to pinpoint the change that introduced a bug, then
the test code that reproduces it may be quite new, and the Git history in the
older versions where the bug was introduces does not include that test code at
all. Therefore, it is only natural that the test lives in a separate repo,
otherwise you would need to do weird &lt;code&gt;git checkout&lt;&#x2F;code&gt; maneuvers to get the testee
and tester working on the same run.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;exception-tightly-integrated-unit-tests&quot;&gt;Exception: tightly integrated unit tests&lt;&#x2F;h2&gt;
&lt;p&gt;One may go too far saying let&#x27;s put all tests in a separate repo. However, I
think that line should be drawn carefully and checked for whether it works in
practice.  For the tests that are tightly bound to the code being tested, for
instance unit tests that depend on internal interfaces or symbols, it may be
harder to apply this principle.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Proper use of Git tags</title>
		<published>2022-05-23T00:00:00+00:00</published>
		<updated>2022-05-23T00:00:00+00:00</updated>
		<link href="https://blog.aloni.org/posts/proper-use-of-git-tags/" type="text/html"/>
		<id>https://blog.aloni.org/posts/proper-use-of-git-tags/</id>
		<content type="html">&lt;p&gt;In the Linux kernel project, the first Git-managed project in existence, due to
its &lt;i&gt;proper&lt;&#x2F;i&gt; use of &lt;a href=&quot;https:&#x2F;&#x2F;blog.aloni.org&#x2F;posts&#x2F;proper-use-of-git-tags&#x2F;28cf22d0ba28&quot;&gt;Git tags&lt;&#x2F;a&gt;, the revision &lt;code&gt;v4.11-rc7-87-g28cf22d0ba28&lt;&#x2F;code&gt; is
equivalent to &lt;code&gt;28cf22d0ba28&lt;&#x2F;code&gt;. This is due to existence of the annotated
&lt;code&gt;v4.11-rc7&lt;&#x2F;code&gt; tag for an ancestor commit.&lt;&#x2F;p&gt;
&lt;p&gt;The nicer string above is the output of &lt;code&gt;git describe 28cf22d0ba28&lt;&#x2F;code&gt;. The &lt;code&gt;git describe&lt;&#x2F;code&gt; command can relate any commit to tags in the history. Any command
that accepts the Git hash behaves the same when the output of &lt;code&gt;git describe&lt;&#x2F;code&gt; is
passed instead.  It works in the following way: when Git is presented with
&lt;code&gt;[anystring]-g[hash]&lt;&#x2F;code&gt;, it throws away the &lt;code&gt;[anystring]-g&lt;&#x2F;code&gt; prefix and treats the
&lt;code&gt;[hash]&lt;&#x2F;code&gt; part as the desired commit to resolve.&lt;&#x2F;p&gt;
&lt;p&gt;Git tags let us prettify any Git hash with the software version from which it
is derived. However in many projects Git tags are often not used to their full
potential in the best case, and in the worst case they are being misused.&lt;&#x2F;p&gt;
&lt;p&gt;In this post I provide bunch of recommendations to assist in achieving the
nicety that is obtainable from Git tags in any project.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;tag-push-permissions&quot;&gt;Tag push permissions&lt;&#x2F;h2&gt;
&lt;p&gt;A common pitfall is to let any developer push Git tags. The following scenario
happened to me &lt;strong&gt;in more than one company&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Someone pushed a &lt;code&gt;test&lt;&#x2F;code&gt; tag.&lt;&#x2F;li&gt;
&lt;li&gt;Someone else created &lt;code&gt;test&lt;&#x2F;code&gt; subdir in the project&#x27;s root.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Now, &lt;code&gt;git log test&lt;&#x2F;code&gt; is an ambiguous command that does not know what to do.
Should it show the commits starting from the commit pointed by &lt;code&gt;test&lt;&#x2F;code&gt;, or the
commits from &lt;code&gt;HEAD&lt;&#x2F;code&gt; that modified that &lt;code&gt;test&lt;&#x2F;code&gt; directory? Or maybe the developer
has a local &lt;code&gt;test&lt;&#x2F;code&gt; branch? Headache.&lt;&#x2F;p&gt;
&lt;p&gt;If possible, configure the Git server to accept tag pushes only from release
managers.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;tag-naming&quot;&gt;Tag naming&lt;&#x2F;h2&gt;
&lt;p&gt;Tags are unique and live forever in the repo.&lt;&#x2F;p&gt;
&lt;p&gt;Pick good tag names that do not cause ambiguity with your branch name
convention.&lt;&#x2F;p&gt;
&lt;p&gt;A nice convention is the following: to mark versions, start with &lt;code&gt;v&lt;&#x2F;code&gt;. That way,
shell completion works nicely upon trying to complete &lt;code&gt;v&lt;&#x2F;code&gt;. If you drop the &lt;code&gt;v&lt;&#x2F;code&gt;
and instead go with the version number immediately .e.g &lt;code&gt;1.&lt;&#x2F;code&gt;, shell completion
will struggle to show completions between tags starting with &lt;code&gt;1&lt;&#x2F;code&gt; and all
commits whose git hashes start with &lt;code&gt;1&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;only-used-annotated-tags-not-lightweight-tags&quot;&gt;Only used annotated tags, not lightweight tags&lt;&#x2F;h2&gt;
&lt;p&gt;By default &lt;code&gt;git tag&lt;&#x2F;code&gt; creates lightweight tags (non-annotated tags). &lt;strong&gt;Do&lt;&#x2F;strong&gt; pass
the &lt;code&gt;-a&lt;&#x2F;code&gt; switch to create annotated tags. This way, meta-data from the creation
of the tag is registered just like with commits. Also, &lt;code&gt;git describe&lt;&#x2F;code&gt; would
work out of the box and won&#x27;t need the &lt;code&gt;--tags&lt;&#x2F;code&gt; flag that is needed to force it
to consider lightweight tags too.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;don-t-rely-on-tags-alone-for-versioning&quot;&gt;Don&#x27;t rely on tags alone for versioning&lt;&#x2F;h2&gt;
&lt;p&gt;Git tags are just complementary information to Git, they are not the source
itself.  Use both Git tags and a source tree file to tell the version of the
code. This is usually the version string in the package manager manifest of
your ecosystem of choice. But how to do that properly? i.e. which commits
should be tagged? This takes us to the next recommendation â€”&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-commit-that-changed-the-version-in-source-is-the-one-to-be-tagged&quot;&gt;The commit that changed the version in source is the one to be tagged&lt;&#x2F;h2&gt;
&lt;p&gt;By convention, the commit that changed the version in the source &lt;strong&gt;is&lt;&#x2F;strong&gt; the one
that should be tagged, not the commit that merged it into the main branch. This
way, &lt;code&gt;git describe&lt;&#x2F;code&gt; shows the expected result.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;further-resources&quot;&gt;Further resources&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#x27;external-link-outer&#x27;&gt;&lt;a class=&quot;external-link&quot;rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;git-scm.com&#x2F;book&#x2F;en&#x2F;v2&#x2F;Git-Basics-Tagging&quot;&gt;Git Basics - tagging&lt;span class=&#x27;external-link-no-underline&#x27;&gt;&lt;&#x2F;span&gt;&lt;svg width=&#x27;13.5&#x27; height=&#x27;13.5&#x27; aria-hidden=&#x27;true&#x27; viewBox=&#x27;0 0 24 24&#x27; class=&#x27;iconExternalLink_wgqa&#x27;&gt;&lt;path fill=&#x27;currentColor&#x27; d=&#x27;M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z&#x27;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;span&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;span class=&#x27;external-link-outer&#x27;&gt;&lt;a class=&quot;external-link&quot;rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;@keshshen&#x2F;lets-start-tagging-88c299b6b331&quot;&gt;Let&#x27;s start tagging!&lt;span class=&#x27;external-link-no-underline&#x27;&gt;&lt;&#x2F;span&gt;&lt;svg width=&#x27;13.5&#x27; height=&#x27;13.5&#x27; aria-hidden=&#x27;true&#x27; viewBox=&#x27;0 0 24 24&#x27; class=&#x27;iconExternalLink_wgqa&#x27;&gt;&lt;path fill=&#x27;currentColor&#x27; d=&#x27;M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z&#x27;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;span&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>The SQLite SET-AND Gotcha</title>
		<published>2022-02-21T00:00:00+00:00</published>
		<updated>2022-02-21T00:00:00+00:00</updated>
		<link href="https://blog.aloni.org/posts/the-sqlite-set-and-gotcha/" type="text/html"/>
		<id>https://blog.aloni.org/posts/the-sqlite-set-and-gotcha/</id>
		<content type="html">&lt;p&gt;In SQLite, suppose that we have the following table:&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;source sql&quot;&gt;&lt;span class=&quot;meta create sql&quot;&gt;&lt;span class=&quot;keyword other create sql&quot;&gt;CREATE&lt;&#x2F;span&gt; &lt;span class=&quot;keyword other sql&quot;&gt;TABLE&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;meta toc-list full-identifier sql&quot;&gt;IF NOT EXISTS &lt;&#x2F;span&gt;&lt;span class=&quot;meta toc-list full-identifier sql&quot;&gt;&lt;span class=&quot;entity name function sql&quot;&gt;external_data&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; (
    name     &lt;span class=&quot;storage type sql&quot;&gt;TEXT&lt;&#x2F;span&gt; &lt;span class=&quot;storage modifier sql&quot;&gt;PRIMARY KEY&lt;&#x2F;span&gt; &lt;span class=&quot;keyword operator logical sql&quot;&gt;NOT&lt;&#x2F;span&gt; &lt;span class=&quot;constant language sql&quot;&gt;NULL&lt;&#x2F;span&gt;,
    atime    &lt;span class=&quot;storage type sql&quot;&gt;TEXT&lt;&#x2F;span&gt; &lt;span class=&quot;keyword operator logical sql&quot;&gt;NOT&lt;&#x2F;span&gt; &lt;span class=&quot;constant language sql&quot;&gt;NULL&lt;&#x2F;span&gt;,
    content  &lt;span class=&quot;storage type sql&quot;&gt;TEXT&lt;&#x2F;span&gt; &lt;span class=&quot;keyword operator logical sql&quot;&gt;NOT&lt;&#x2F;span&gt; &lt;span class=&quot;constant language sql&quot;&gt;NULL&lt;&#x2F;span&gt;
);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;p&gt;And we have inserted a row:&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;source sql&quot;&gt;  &lt;span class=&quot;keyword other DML sql&quot;&gt;INSERT INTO&lt;&#x2F;span&gt; external_data
       &lt;span class=&quot;keyword other DML II sql&quot;&gt;VALUES&lt;&#x2F;span&gt; (&lt;span class=&quot;string quoted double sql&quot;&gt;&lt;span class=&quot;punctuation definition string begin sql&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;name&lt;span class=&quot;punctuation definition string end sql&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;, &lt;span class=&quot;string quoted double sql&quot;&gt;&lt;span class=&quot;punctuation definition string begin sql&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;october&lt;span class=&quot;punctuation definition string end sql&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;, &lt;span class=&quot;string quoted double sql&quot;&gt;&lt;span class=&quot;punctuation definition string begin sql&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;a&lt;span class=&quot;punctuation definition string end sql&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;p&gt;Plus, we have executed an &#x27;upsert&#x27; statement:&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;source sql&quot;&gt;  &lt;span class=&quot;keyword other DML sql&quot;&gt;INSERT INTO&lt;&#x2F;span&gt; external_data
       &lt;span class=&quot;keyword other DML II sql&quot;&gt;VALUES&lt;&#x2F;span&gt; (&lt;span class=&quot;string quoted double sql&quot;&gt;&lt;span class=&quot;punctuation definition string begin sql&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;name&lt;span class=&quot;punctuation definition string end sql&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;, &lt;span class=&quot;string quoted double sql&quot;&gt;&lt;span class=&quot;punctuation definition string begin sql&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;december&lt;span class=&quot;punctuation definition string end sql&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;, &lt;span class=&quot;string quoted double sql&quot;&gt;&lt;span class=&quot;punctuation definition string begin sql&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;b&lt;span class=&quot;punctuation definition string end sql&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;)
  ON CONFLICT (name)
DO &lt;span class=&quot;keyword other DML sql&quot;&gt;UPDATE&lt;&#x2F;span&gt; &lt;span class=&quot;keyword other DML sql&quot;&gt;SET&lt;&#x2F;span&gt; content &lt;span class=&quot;keyword operator comparison sql&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;string quoted double sql&quot;&gt;&lt;span class=&quot;punctuation definition string begin sql&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;b&lt;span class=&quot;punctuation definition string end sql&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
          &lt;span class=&quot;keyword operator logical sql&quot;&gt;AND&lt;&#x2F;span&gt; atime &lt;span class=&quot;keyword operator comparison sql&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;string quoted double sql&quot;&gt;&lt;span class=&quot;punctuation definition string begin sql&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;december&lt;span class=&quot;punctuation definition string end sql&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;p&gt;Without conflicts, it does what you expect.
But we do have a conflict, and we end up with the following in the table:&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;source sql&quot;&gt;sqlite&lt;span class=&quot;keyword operator comparison sql&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;keyword other DML sql&quot;&gt;SELECT&lt;&#x2F;span&gt; &lt;span class=&quot;variable language star sql&quot;&gt;*&lt;&#x2F;span&gt; &lt;span class=&quot;keyword other DML sql&quot;&gt;FROM&lt;&#x2F;span&gt; external_data ;
name|october|&lt;span class=&quot;constant numeric sql&quot;&gt;0&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;p&gt;Instead of what we wanted to accomplish with the query, &lt;code&gt;content&lt;&#x2F;code&gt; received the
value of &lt;code&gt;&amp;quot;0&amp;quot;&lt;&#x2F;code&gt; while the &lt;code&gt;atime&lt;&#x2F;code&gt; field remained with the old value &lt;code&gt;&amp;quot;october&amp;quot;&lt;&#x2F;code&gt;
instead of being set with &lt;code&gt;&amp;quot;december&amp;quot;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;what-the-hell-is-going-on&quot;&gt;What the hell is going on&lt;&#x2F;h3&gt;
&lt;p&gt;Well, we misplaced the &lt;code&gt;SET&lt;&#x2F;code&gt; separator &lt;code&gt;,&lt;&#x2F;code&gt; with &lt;code&gt;AND&lt;&#x2F;code&gt; because having &lt;code&gt;AND&lt;&#x2F;code&gt;
in &lt;code&gt;WHERE&lt;&#x2F;code&gt; makes sense and we casually did cut&amp;amp;paste from a &lt;code&gt;WHERE&lt;&#x2F;code&gt;
statement to a &lt;code&gt;SET&lt;&#x2F;code&gt; statement... well, this &lt;code&gt;SET&lt;&#x2F;code&gt; statement is in fact
equivalent to the following:&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;source sql&quot;&gt;&lt;span class=&quot;keyword other DML sql&quot;&gt;SET&lt;&#x2F;span&gt; content &lt;span class=&quot;keyword operator comparison sql&quot;&gt;=&lt;&#x2F;span&gt; (&lt;span class=&quot;string quoted double sql&quot;&gt;&lt;span class=&quot;punctuation definition string begin sql&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;b&lt;span class=&quot;punctuation definition string end sql&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;keyword operator logical sql&quot;&gt;AND&lt;&#x2F;span&gt; atime &lt;span class=&quot;keyword operator comparison sql&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;string quoted double sql&quot;&gt;&lt;span class=&quot;punctuation definition string begin sql&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;december&lt;span class=&quot;punctuation definition string end sql&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;p&gt;Where &lt;code&gt;(&amp;quot;b&amp;quot; AND atime = &amp;quot;december&amp;quot;)&lt;&#x2F;code&gt; evaluates to 0 because the second &lt;code&gt;AND&lt;&#x2F;code&gt;
operand is not true.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;wait-but-sqlite-has-strictmode&quot;&gt;Wait, but SQLite has &#x27;StrictMode&#x27;&lt;&#x2F;h3&gt;
&lt;p&gt;Yes, there&#x27;s &lt;span class=&#x27;external-link-outer&#x27;&gt;&lt;a class=&quot;external-link&quot;rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;sqlite.org&#x2F;src&#x2F;wiki?name=StrictMode&quot;&gt;StrictMode&lt;span class=&#x27;external-link-no-underline&#x27;&gt;&lt;&#x2F;span&gt;&lt;svg width=&#x27;13.5&#x27; height=&#x27;13.5&#x27; aria-hidden=&#x27;true&#x27; viewBox=&#x27;0 0 24 24&#x27; class=&#x27;iconExternalLink_wgqa&#x27;&gt;&lt;path fill=&#x27;currentColor&#x27; d=&#x27;M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z&#x27;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;span&gt;, but it
doesn&#x27;t help here as of SQLite 3.37.2. A String is a valid operand to &lt;code&gt;AND&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;wait-again-but-there-s-strict-for-create-table&quot;&gt;Wait again, but there&#x27;s &lt;code&gt;STRICT&lt;&#x2F;code&gt; for &lt;code&gt;CREATE TABLE&lt;&#x2F;code&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Nope, doesn&#x27;t help either. Sorry.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;span class=&#x27;external-link-outer&#x27;&gt;&lt;a class=&quot;external-link&quot;rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;sqlime.org&#x2F;#deta:xd5y9mf00fsu&quot;&gt;sqlime playground&lt;span class=&#x27;external-link-no-underline&#x27;&gt;&lt;&#x2F;span&gt;&lt;svg width=&#x27;13.5&#x27; height=&#x27;13.5&#x27; aria-hidden=&#x27;true&#x27; viewBox=&#x27;0 0 24 24&#x27; class=&#x27;iconExternalLink_wgqa&#x27;&gt;&lt;path fill=&#x27;currentColor&#x27; d=&#x27;M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z&#x27;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;span&gt;.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Bash #3 - PATH-wrapping executables</title>
		<published>2022-02-18T00:00:00+00:00</published>
		<updated>2022-02-18T00:00:00+00:00</updated>
		<link href="https://blog.aloni.org/posts/bash-path-wrapping-executables/" type="text/html"/>
		<id>https://blog.aloni.org/posts/bash-path-wrapping-executables/</id>
		<content type="html">&lt;p&gt;When fixing up complex systems to our advantage we sometimes need to hook on
the intermediate execution of a program. The UNIX &lt;code&gt;PATH&lt;&#x2F;code&gt; environment is the
venerable search path for programs available in the environment. In this post
I&#x27;ll discuss how to use to wrap around the execution of a program.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;Previous post: &lt;a href=&quot;..&#x2F;bash-functional-command-relay&quot;&gt;#2&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;PATH&lt;&#x2F;code&gt; environment variable is a &lt;code&gt;:&lt;&#x2F;code&gt;-delimited strings of paths that are
searched in order for executables. For example, a build system may search
for the &lt;code&gt;gcc&lt;&#x2F;code&gt; compiler in &lt;code&gt;PATH&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s wrap around &lt;code&gt;gcc&lt;&#x2F;code&gt;. To create our &lt;code&gt;gcc&lt;&#x2F;code&gt; wrapper, we need to decided
on a directory on which to place it. The name of the wrapping executable will
also be &lt;code&gt;gcc&lt;&#x2F;code&gt; so that it gets picked by &lt;code&gt;PATH&lt;&#x2F;code&gt; lookup. The absolute path
of that directory needs to be prepended to &lt;code&gt;PATH&lt;&#x2F;code&gt; for the wrapper to be found.
There are various ways to do this. The most common are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Prepend in shell command execution &lt;code&gt;PATH=&amp;quot;&#x2F;directory&#x2F;to-wrapper:$PATH&amp;quot; &amp;lt;command&amp;gt;&lt;&#x2F;code&gt;, only affecting that command.&lt;&#x2F;li&gt;
&lt;li&gt;Modify for the current shell script or interactive shell using &lt;code&gt;export PATH=&amp;quot;&#x2F;diretory&#x2F;to-wrapper:$PATH&amp;quot;&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Our wrapper can be written as such:&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;source shell bash&quot;&gt;&lt;span class=&quot;comment line number-sign shell&quot;&gt;&lt;span class=&quot;punctuation definition comment begin shell&quot;&gt;#&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;comment line number-sign shell&quot;&gt;!&#x2F;bin&#x2F;bash&lt;&#x2F;span&gt;&lt;span class=&quot;comment line number-sign shell&quot;&gt;
&lt;&#x2F;span&gt;
&lt;span class=&quot;comment line number-sign shell&quot;&gt;&lt;span class=&quot;punctuation definition comment begin shell&quot;&gt;#&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;comment line number-sign shell&quot;&gt; Remove ourselves from $PATH, to prevent infinite&lt;&#x2F;span&gt;&lt;span class=&quot;comment line number-sign shell&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;comment line number-sign shell&quot;&gt;&lt;span class=&quot;punctuation definition comment begin shell&quot;&gt;#&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;comment line number-sign shell&quot;&gt; recursion when the wrapped executable is executed&lt;&#x2F;span&gt;&lt;span class=&quot;comment line number-sign shell&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;comment line number-sign shell&quot;&gt;&lt;span class=&quot;punctuation definition comment begin shell&quot;&gt;#&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;comment line number-sign shell&quot;&gt; by us.&lt;&#x2F;span&gt;&lt;span class=&quot;comment line number-sign shell&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;variable other readwrite assignment shell&quot;&gt;curdir&lt;&#x2F;span&gt;&lt;span class=&quot;keyword operator assignment shell&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;string unquoted shell&quot;&gt;&lt;span class=&quot;meta group expansion command parens shell&quot;&gt;&lt;span class=&quot;punctuation definition variable shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section parens begin shell&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call shell&quot;&gt;&lt;span class=&quot;variable function shell&quot;&gt;realpath&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call arguments shell&quot;&gt; &lt;span class=&quot;meta group expansion command parens shell&quot;&gt;&lt;span class=&quot;punctuation definition variable shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section parens begin shell&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call shell&quot;&gt;&lt;span class=&quot;variable function shell&quot;&gt;dirname&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call arguments shell&quot;&gt; &lt;span class=&quot;meta group expansion parameter shell&quot;&gt;&lt;span class=&quot;punctuation definition variable shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section expansion parameter begin shell&quot;&gt;{&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta group expansion parameter shell&quot;&gt;&lt;span class=&quot;variable other readwrite shell&quot;&gt;BASH_SOURCE&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta group expansion parameter shell&quot;&gt;&lt;span class=&quot;punctuation section expansion parameter end shell&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section parens end shell&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section parens end shell&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;variable other readwrite assignment shell&quot;&gt;path_tmp&lt;&#x2F;span&gt;&lt;span class=&quot;keyword operator assignment shell&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;string unquoted shell&quot;&gt;&lt;span class=&quot;meta group expansion command parens shell&quot;&gt;&lt;span class=&quot;punctuation definition variable shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section parens begin shell&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call shell&quot;&gt;&lt;span class=&quot;support function echo shell&quot;&gt;echo&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call arguments shell&quot;&gt; &lt;span class=&quot;meta group expansion parameter shell&quot;&gt;&lt;span class=&quot;punctuation definition variable shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;span class=&quot;variable other readwrite shell&quot;&gt;PATH&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;keyword operator logical pipe shell&quot;&gt;|&lt;&#x2F;span&gt; &lt;span class=&quot;meta function-call shell&quot;&gt;&lt;span class=&quot;variable function shell&quot;&gt;tr&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call arguments shell&quot;&gt; &lt;span class=&quot;string quoted single shell&quot;&gt;&lt;span class=&quot;punctuation definition string begin shell&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;:&lt;span class=&quot;punctuation definition string end shell&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;string quoted single shell&quot;&gt;&lt;span class=&quot;punctuation definition string begin shell&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;\n&lt;span class=&quot;punctuation definition string end shell&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;keyword operator logical pipe shell&quot;&gt;|&lt;&#x2F;span&gt; &lt;span class=&quot;punctuation separator continuation line shell&quot;&gt;\
&lt;&#x2F;span&gt;    &lt;span class=&quot;meta function-call shell&quot;&gt;&lt;span class=&quot;variable function shell&quot;&gt;awk&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call arguments shell&quot;&gt;&lt;span class=&quot;variable parameter option shell&quot;&gt;&lt;span class=&quot;punctuation definition parameter shell&quot;&gt; -&lt;&#x2F;span&gt;v&lt;&#x2F;span&gt; &lt;span class=&quot;string quoted double shell&quot;&gt;&lt;span class=&quot;punctuation definition string begin shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;cwd=&lt;span class=&quot;meta group expansion parameter shell&quot;&gt;&lt;span class=&quot;punctuation definition variable shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section expansion parameter begin shell&quot;&gt;{&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta group expansion parameter shell&quot;&gt;&lt;span class=&quot;variable other readwrite shell&quot;&gt;curdir&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta group expansion parameter shell&quot;&gt;&lt;span class=&quot;punctuation section expansion parameter end shell&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation definition string end shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;string quoted single shell&quot;&gt;&lt;span class=&quot;punctuation definition string begin shell&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;$0!=cwd&lt;span class=&quot;punctuation definition string end shell&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;keyword operator logical pipe shell&quot;&gt;|&lt;&#x2F;span&gt; &lt;span class=&quot;punctuation separator continuation line shell&quot;&gt;\
&lt;&#x2F;span&gt;    &lt;span class=&quot;meta function-call shell&quot;&gt;&lt;span class=&quot;variable function shell&quot;&gt;tr&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call arguments shell&quot;&gt; &lt;span class=&quot;string quoted single shell&quot;&gt;&lt;span class=&quot;punctuation definition string begin shell&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;\n&lt;span class=&quot;punctuation definition string end shell&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;string quoted single shell&quot;&gt;&lt;span class=&quot;punctuation definition string begin shell&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;:&lt;span class=&quot;punctuation definition string end shell&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section parens end shell&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;meta function-call shell&quot;&gt;&lt;span class=&quot;storage modifier shell&quot;&gt;export&lt;&#x2F;span&gt; &lt;span class=&quot;variable other readwrite assignment shell&quot;&gt;PATH&lt;&#x2F;span&gt;&lt;span class=&quot;keyword operator assignment shell&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;string unquoted shell&quot;&gt;&lt;span class=&quot;meta group expansion parameter shell&quot;&gt;&lt;span class=&quot;punctuation definition variable shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section expansion parameter begin shell&quot;&gt;{&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta group expansion parameter shell&quot;&gt;&lt;span class=&quot;variable other readwrite shell&quot;&gt;path_tmp&lt;span class=&quot;keyword operator expansion shell&quot;&gt;%&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta group expansion parameter shell&quot;&gt;:&lt;&#x2F;span&gt;&lt;span class=&quot;meta group expansion parameter shell&quot;&gt;&lt;span class=&quot;punctuation section expansion parameter end shell&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;

&lt;span class=&quot;comment line number-sign shell&quot;&gt;&lt;span class=&quot;punctuation definition comment begin shell&quot;&gt;#&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;comment line number-sign shell&quot;&gt; Don&amp;#39;t let Ctrl-C kill the script&lt;&#x2F;span&gt;&lt;span class=&quot;comment line number-sign shell&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;meta function shell&quot;&gt;&lt;span class=&quot;storage type function shell&quot;&gt;function&lt;&#x2F;span&gt; &lt;span class=&quot;entity name function shell&quot;&gt;ctrl_c&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section parens begin shell&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section parens end shell&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;punctuation section braces begin shell&quot;&gt;{&lt;&#x2F;span&gt; &lt;span class=&quot;meta function-call shell&quot;&gt;&lt;span class=&quot;support function colon shell&quot;&gt;:&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;keyword operator logical continue shell&quot;&gt;;&lt;&#x2F;span&gt; &lt;span class=&quot;punctuation section braces end shell&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;meta function-call shell&quot;&gt;&lt;span class=&quot;support function trap shell&quot;&gt;trap&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call arguments shell&quot;&gt; ctrl_c INT&lt;&#x2F;span&gt;

&lt;span class=&quot;meta function-call shell&quot;&gt;&lt;span class=&quot;support function echo shell&quot;&gt;echo&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call arguments shell&quot;&gt; &lt;span class=&quot;string quoted double shell&quot;&gt;&lt;span class=&quot;punctuation definition string begin shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Before execution&lt;span class=&quot;punctuation definition string end shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;

&lt;span class=&quot;comment line number-sign shell&quot;&gt;&lt;span class=&quot;punctuation definition comment begin shell&quot;&gt;#&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;comment line number-sign shell&quot;&gt; Execute the original program&lt;&#x2F;span&gt;&lt;span class=&quot;comment line number-sign shell&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call shell&quot;&gt;&lt;span class=&quot;variable function shell&quot;&gt;&lt;span class=&quot;meta group expansion command parens shell&quot;&gt;&lt;span class=&quot;punctuation definition variable shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section parens begin shell&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call shell&quot;&gt;&lt;span class=&quot;variable function shell&quot;&gt;basename&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call arguments shell&quot;&gt; &lt;span class=&quot;meta group expansion parameter shell&quot;&gt;&lt;span class=&quot;punctuation definition variable shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;span class=&quot;variable other readwrite shell&quot;&gt;0&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section parens end shell&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call arguments shell&quot;&gt; &lt;span class=&quot;string quoted double shell&quot;&gt;&lt;span class=&quot;punctuation definition string begin shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span class=&quot;meta group expansion parameter shell&quot;&gt;&lt;span class=&quot;punctuation definition variable shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;span class=&quot;variable language shell&quot;&gt;@&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation definition string end shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;variable other readwrite assignment shell&quot;&gt;e&lt;&#x2F;span&gt;&lt;span class=&quot;keyword operator assignment shell&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;string unquoted shell&quot;&gt;&lt;span class=&quot;meta group expansion parameter shell&quot;&gt;&lt;span class=&quot;punctuation definition variable shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;span class=&quot;variable language shell&quot;&gt;?&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;comment line number-sign shell&quot;&gt;&lt;span class=&quot;punctuation definition comment begin shell&quot;&gt;#&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;comment line number-sign shell&quot;&gt; Save exit status&lt;&#x2F;span&gt;&lt;span class=&quot;comment line number-sign shell&quot;&gt;
&lt;&#x2F;span&gt;
&lt;span class=&quot;comment line number-sign shell&quot;&gt;&lt;span class=&quot;punctuation definition comment begin shell&quot;&gt;#&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;comment line number-sign shell&quot;&gt; Clear out handler&lt;&#x2F;span&gt;&lt;span class=&quot;comment line number-sign shell&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call shell&quot;&gt;&lt;span class=&quot;support function trap shell&quot;&gt;trap&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call arguments shell&quot;&gt; - INT&lt;&#x2F;span&gt;

&lt;span class=&quot;meta function-call shell&quot;&gt;&lt;span class=&quot;support function echo shell&quot;&gt;echo&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call arguments shell&quot;&gt; &lt;span class=&quot;string quoted double shell&quot;&gt;&lt;span class=&quot;punctuation definition string begin shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;After execution&lt;span class=&quot;punctuation definition string end shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;

&lt;span class=&quot;meta function-call shell&quot;&gt;&lt;span class=&quot;support function exit shell&quot;&gt;exit&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call arguments shell&quot;&gt; &lt;span class=&quot;meta group expansion parameter shell&quot;&gt;&lt;span class=&quot;punctuation definition variable shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;span class=&quot;variable other readwrite shell&quot;&gt;e&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;p&gt;Notes on what is being done above:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Important to clear out the directory in which the wrapper resides from &lt;code&gt;PATH&lt;&#x2F;code&gt;, otherwise we can cause an infinite recursion.&lt;&#x2F;li&gt;
&lt;li&gt;Forward the exit status of the original program.&lt;&#x2F;li&gt;
&lt;li&gt;Allow logic to be implemented before and following execution.&lt;&#x2F;li&gt;
&lt;li&gt;We can control how the original program is executed.&lt;&#x2F;li&gt;
&lt;li&gt;We can wrap more than one executable with a single wrapper source.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;demo&quot;&gt;Demo&lt;&#x2F;h3&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;text plain&quot;&gt;$ ls -l bin
total 4
lrwxrwxrwx 1 dan dan   7 Feb 19 09:18 gcc -&amp;gt; wrapper
lrwxrwxrwx 1 dan dan   7 Feb 19 09:18 ls -&amp;gt; wrapper
-rwxrwxr-x 1 dan dan 389 Feb 19 09:15 wrapper

$ export PATH=$(pwd)&#x2F;bin:$PATH

$ ls bin
Before execution
gcc ls wrapper
After execution

$ gcc non-existant.c
Before execution
gcc: error: non-existant.c: No such file or directory
gcc: fatal error: no input files
compilation terminated.
After execution
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;&lt;h2 id=&quot;final-note&quot;&gt;Final note&lt;&#x2F;h2&gt;
&lt;p&gt;We should be careful about emitting to stdout and stderr by the wrapping code,
and may want to even avoid it completely, lest we break assumptions being made
by the upper-level scripts that execute the program we are wrapping.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Rust Turbofish: Closure Return Type</title>
		<published>2022-02-05T00:00:00+00:00</published>
		<updated>2022-02-05T00:00:00+00:00</updated>
		<link href="https://blog.aloni.org/posts/rust-turbofish-closure-return-type/" type="text/html"/>
		<id>https://blog.aloni.org/posts/rust-turbofish-closure-return-type/</id>
		<content type="html">&lt;p&gt;There is a compiler type error in Rust that can happens when you try to pass a closure
that returns a &lt;code&gt;Result&lt;&#x2F;code&gt; type.&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;text plain&quot;&gt;error[E0282]: type annotations needed
  --&amp;gt; src&#x2F;main.rs:27:9
   |
27 |         Ok(())
   |         ^^ cannot infer type for type parameter `E` declared on the enum `Result`
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;p&gt;The clue to how to solve this is already in the error message - we need to add type
annotations. But why does this happen?&lt;&#x2F;p&gt;
&lt;p&gt;Suppose you have a wrapper that accepts a closure to be wrapped in execution:&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;source rust&quot;&gt;&lt;span class=&quot;meta function rust&quot;&gt;&lt;span class=&quot;meta function rust&quot;&gt;&lt;span class=&quot;storage type function rust&quot;&gt;fn&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;entity name function rust&quot;&gt;your_wrapper&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta generic rust&quot;&gt;&lt;span class=&quot;punctuation definition generic begin rust&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;F, R&lt;span class=&quot;punctuation definition generic end rust&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function rust&quot;&gt;&lt;span class=&quot;meta function parameters rust&quot;&gt;&lt;span class=&quot;punctuation section parameters begin rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;variable parameter rust&quot;&gt;f&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator rust&quot;&gt;:&lt;&#x2F;span&gt; F&lt;&#x2F;span&gt;&lt;span class=&quot;meta function rust&quot;&gt;&lt;span class=&quot;meta function parameters rust&quot;&gt;&lt;span class=&quot;punctuation section parameters end rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function rust&quot;&gt; &lt;span class=&quot;meta function return-type rust&quot;&gt;&lt;span class=&quot;punctuation separator rust&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; R
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function rust&quot;&gt;&lt;span class=&quot;keyword other rust&quot;&gt;where&lt;&#x2F;span&gt;
    F&lt;span class=&quot;punctuation separator rust&quot;&gt;:&lt;&#x2F;span&gt; FnOnce&lt;span class=&quot;punctuation section group begin rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section group end rust&quot;&gt;)&lt;&#x2F;span&gt; -&amp;gt; R,
&lt;&#x2F;span&gt;&lt;span class=&quot;meta function rust&quot;&gt;&lt;span class=&quot;meta block rust&quot;&gt;&lt;span class=&quot;punctuation section block begin rust&quot;&gt;{&lt;&#x2F;span&gt;
    &lt;span class=&quot;support macro rust&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group begin rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;string quoted double rust&quot;&gt;&lt;span class=&quot;punctuation definition string begin rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Before&lt;span class=&quot;punctuation definition string end rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group end rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation terminator rust&quot;&gt;;&lt;&#x2F;span&gt;
    &lt;span class=&quot;storage type rust&quot;&gt;let&lt;&#x2F;span&gt; v &lt;span class=&quot;keyword operator assignment rust&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;support function rust&quot;&gt;f&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group begin rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group end rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation terminator rust&quot;&gt;;&lt;&#x2F;span&gt;
    &lt;span class=&quot;support macro rust&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group begin rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;string quoted double rust&quot;&gt;&lt;span class=&quot;punctuation definition string begin rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;After&lt;span class=&quot;punctuation definition string end rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group end rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation terminator rust&quot;&gt;;&lt;&#x2F;span&gt;
    v
&lt;&#x2F;span&gt;&lt;span class=&quot;meta block rust&quot;&gt;&lt;span class=&quot;punctuation section block end rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;p&gt;When using this wrapper, we can have two error types and use the wonderful
&lt;span class=&#x27;external-link-outer&#x27;&gt;&lt;a class=&quot;external-link&quot;rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;thiserror&quot;&gt;&lt;code&gt;thiserror&lt;&#x2F;code&gt;&lt;span class=&#x27;external-link-no-underline&#x27;&gt;&lt;&#x2F;span&gt;&lt;svg width=&#x27;13.5&#x27; height=&#x27;13.5&#x27; aria-hidden=&#x27;true&#x27; viewBox=&#x27;0 0 24 24&#x27; class=&#x27;iconExternalLink_wgqa&#x27;&gt;&lt;path fill=&#x27;currentColor&#x27; d=&#x27;M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z&#x27;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;span&gt; crate to implement a
&lt;span class=&#x27;external-link-outer&#x27;&gt;&lt;a class=&quot;external-link&quot;rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;convert&#x2F;trait.From.html&quot;&gt;&lt;code&gt;From&lt;&#x2F;code&gt;&lt;span class=&#x27;external-link-no-underline&#x27;&gt;&lt;&#x2F;span&gt;&lt;svg width=&#x27;13.5&#x27; height=&#x27;13.5&#x27; aria-hidden=&#x27;true&#x27; viewBox=&#x27;0 0 24 24&#x27; class=&#x27;iconExternalLink_wgqa&#x27;&gt;&lt;path fill=&#x27;currentColor&#x27; d=&#x27;M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z&#x27;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;span&gt; trait between
them.&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;source rust&quot;&gt;&lt;span class=&quot;keyword other rust&quot;&gt;use&lt;&#x2F;span&gt; &lt;span class=&quot;meta path rust&quot;&gt;thiserror&lt;span class=&quot;punctuation accessor rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;Error&lt;span class=&quot;punctuation terminator rust&quot;&gt;;&lt;&#x2F;span&gt;

&lt;span class=&quot;meta annotation rust&quot;&gt;&lt;span class=&quot;punctuation definition annotation rust&quot;&gt;#&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section group begin rust&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;variable annotation rust&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span class=&quot;meta annotation parameters rust&quot;&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group begin rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta annotation parameters rust&quot;&gt;&lt;span class=&quot;meta group rust&quot;&gt;Error&lt;span class=&quot;punctuation separator rust&quot;&gt;,&lt;&#x2F;span&gt; Debug&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta annotation parameters rust&quot;&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group end rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section group end rust&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;meta enum rust&quot;&gt;&lt;span class=&quot;storage type enum rust&quot;&gt;enum&lt;&#x2F;span&gt; &lt;span class=&quot;entity name enum rust&quot;&gt;Error&lt;&#x2F;span&gt; &lt;span class=&quot;meta block rust&quot;&gt;&lt;span class=&quot;punctuation section block begin rust&quot;&gt;{&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta block rust&quot;&gt;&lt;span class=&quot;punctuation section block end rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;

&lt;span class=&quot;meta annotation rust&quot;&gt;&lt;span class=&quot;punctuation definition annotation rust&quot;&gt;#&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section group begin rust&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;variable annotation rust&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span class=&quot;meta annotation parameters rust&quot;&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group begin rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta annotation parameters rust&quot;&gt;&lt;span class=&quot;meta group rust&quot;&gt;Error&lt;span class=&quot;punctuation separator rust&quot;&gt;,&lt;&#x2F;span&gt; Debug&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta annotation parameters rust&quot;&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group end rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section group end rust&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;meta enum rust&quot;&gt;&lt;span class=&quot;storage type enum rust&quot;&gt;enum&lt;&#x2F;span&gt; &lt;span class=&quot;entity name enum rust&quot;&gt;MainError&lt;&#x2F;span&gt; &lt;span class=&quot;meta block rust&quot;&gt;&lt;span class=&quot;punctuation section block begin rust&quot;&gt;{&lt;&#x2F;span&gt;
    &lt;span class=&quot;meta annotation rust&quot;&gt;&lt;span class=&quot;punctuation definition annotation rust&quot;&gt;#&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section group begin rust&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;variable annotation rust&quot;&gt;error&lt;&#x2F;span&gt;&lt;span class=&quot;meta annotation parameters rust&quot;&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group begin rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta annotation parameters rust&quot;&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;string quoted double rust&quot;&gt;&lt;span class=&quot;punctuation definition string begin rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Sub error: {0}&lt;span class=&quot;punctuation definition string end rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta annotation parameters rust&quot;&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group end rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section group end rust&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
    Sub&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group begin rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;meta annotation rust&quot;&gt;&lt;span class=&quot;punctuation definition annotation rust&quot;&gt;#&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section group begin rust&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;variable annotation rust&quot;&gt;from&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section group end rust&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; Error&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group end rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator rust&quot;&gt;,&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;meta block rust&quot;&gt;&lt;span class=&quot;punctuation section block end rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;

&lt;span class=&quot;meta function rust&quot;&gt;&lt;span class=&quot;meta function rust&quot;&gt;&lt;span class=&quot;storage type function rust&quot;&gt;fn&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;entity name function rust&quot;&gt;main&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function rust&quot;&gt;&lt;span class=&quot;meta function parameters rust&quot;&gt;&lt;span class=&quot;punctuation section parameters begin rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function rust&quot;&gt;&lt;span class=&quot;meta function parameters rust&quot;&gt;&lt;span class=&quot;punctuation section parameters end rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function rust&quot;&gt; &lt;span class=&quot;meta function return-type rust&quot;&gt;&lt;span class=&quot;punctuation separator rust&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;meta generic rust&quot;&gt;&lt;span class=&quot;support type rust&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation definition generic begin rust&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section group begin rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section group end rust&quot;&gt;)&lt;&#x2F;span&gt;, MainError&lt;span class=&quot;punctuation definition generic end rust&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;meta function rust&quot;&gt;&lt;span class=&quot;meta block rust&quot;&gt;&lt;span class=&quot;punctuation section block begin rust&quot;&gt;{&lt;&#x2F;span&gt;
    &lt;span class=&quot;storage type rust&quot;&gt;let&lt;&#x2F;span&gt; r &lt;span class=&quot;keyword operator assignment rust&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;support function rust&quot;&gt;your_wrapper&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group begin rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;meta function closure rust&quot;&gt;&lt;span class=&quot;meta function parameters rust&quot;&gt;&lt;span class=&quot;punctuation section parameters begin rust&quot;&gt;|&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function closure rust&quot;&gt;&lt;span class=&quot;meta function parameters rust&quot;&gt;&lt;span class=&quot;punctuation section parameters end rust&quot;&gt;|&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;meta function closure rust&quot;&gt;&lt;span class=&quot;meta block rust&quot;&gt;&lt;span class=&quot;punctuation section block begin rust&quot;&gt;{&lt;&#x2F;span&gt;
        &lt;span class=&quot;support macro rust&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group begin rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;string quoted double rust&quot;&gt;&lt;span class=&quot;punctuation definition string begin rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Inside wrapper&lt;span class=&quot;punctuation definition string end rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group end rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation terminator rust&quot;&gt;;&lt;&#x2F;span&gt;
        &lt;span class=&quot;support type rust&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group begin rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group begin rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group end rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group end rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
    &lt;&#x2F;span&gt;&lt;span class=&quot;meta block rust&quot;&gt;&lt;span class=&quot;punctuation section block end rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group end rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;keyword operator rust&quot;&gt;?&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation terminator rust&quot;&gt;;&lt;&#x2F;span&gt;

    &lt;span class=&quot;support macro rust&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group begin rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;string quoted double rust&quot;&gt;&lt;span class=&quot;punctuation definition string begin rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Following call&lt;span class=&quot;punctuation definition string end rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group end rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation terminator rust&quot;&gt;;&lt;&#x2F;span&gt;
    &lt;span class=&quot;support type rust&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group begin rust&quot;&gt;(&lt;&#x2F;span&gt;r&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group end rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;meta block rust&quot;&gt;&lt;span class=&quot;punctuation section block end rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;p&gt;The limitation stems from how the &lt;code&gt;main&lt;&#x2F;code&gt; function is written. The &lt;code&gt;Result&lt;&#x2F;code&gt; is
deconstructed and reconstructed back. However, there is no way for the compiler
to come up a concrete type for the &lt;code&gt;Ok(())&lt;&#x2F;code&gt; value, and this is because no error
value or type signature was involved in the definition of the closure.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;turbofish-syntax-to-the-rescue&quot;&gt;Turbofish syntax to the rescue&lt;&#x2F;h2&gt;
&lt;p&gt;This is where the turbofish syntax comes handy. The fix is to define the
closure as such:&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;source rust&quot;&gt;&lt;span class=&quot;storage type rust&quot;&gt;let&lt;&#x2F;span&gt; r &lt;span class=&quot;keyword operator assignment rust&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;support function rust&quot;&gt;your_wrapper&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group begin rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;meta function closure rust&quot;&gt;&lt;span class=&quot;meta function parameters rust&quot;&gt;&lt;span class=&quot;punctuation section parameters begin rust&quot;&gt;|&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function closure rust&quot;&gt;&lt;span class=&quot;meta function parameters rust&quot;&gt;&lt;span class=&quot;punctuation section parameters end rust&quot;&gt;|&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;meta function closure rust&quot;&gt;&lt;span class=&quot;meta block rust&quot;&gt;&lt;span class=&quot;punctuation section block begin rust&quot;&gt;{&lt;&#x2F;span&gt;
    &lt;span class=&quot;support macro rust&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group begin rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;string quoted double rust&quot;&gt;&lt;span class=&quot;punctuation definition string begin rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Inside wrapper&lt;span class=&quot;punctuation definition string end rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group end rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation terminator rust&quot;&gt;;&lt;&#x2F;span&gt;
    &lt;span class=&quot;support type rust&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator rust&quot;&gt;:&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator rust&quot;&gt;:&lt;&#x2F;span&gt;&lt;span class=&quot;meta generic rust&quot;&gt;&lt;span class=&quot;punctuation definition generic begin rust&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;keyword operator rust&quot;&gt;_&lt;&#x2F;span&gt;, Error&lt;span class=&quot;punctuation definition generic end rust&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group begin rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group begin rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group end rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group end rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;meta block rust&quot;&gt;&lt;span class=&quot;punctuation section block end rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group end rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;keyword operator rust&quot;&gt;?&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation terminator rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;p&gt;We can use this to specify the type of the error without repeating the type of
the value or the identifier &lt;code&gt;Result&lt;&#x2F;code&gt;.  This pattern is often repeated, so I have
casually defined an &lt;code&gt;Ok::&amp;lt;_, Error&amp;gt;(())&lt;&#x2F;code&gt; snippet in my editor for quick typing.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Two Endgames For Blockchain and Cryptocurrencies</title>
		<published>2021-12-07T00:00:00+00:00</published>
		<updated>2021-12-07T00:00:00+00:00</updated>
		<link href="https://blog.aloni.org/posts/two-endgames-for-blockchain-and-cryptocurrencies/" type="text/html"/>
		<id>https://blog.aloni.org/posts/two-endgames-for-blockchain-and-cryptocurrencies/</id>
		<content type="html">&lt;p&gt;&lt;b&gt;tl;dr: HackerNews is boiling daily with debates over the merit (or
lack-thereof) of cryptocurrencies, bitcoin, and NFTs. I think there are two
opposite endgames - all or nothing.&lt;&#x2F;b&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The determining factor for widespread maturity of a technology is whether it is
necessary for modern quality of life.&lt;&#x2F;p&gt;
&lt;p&gt;Electricity, running water, internet in general, internet-based delivery of
transportation (Uber), internet-based delivery of goods (Amazon), cars. These
are technologies that work very well for people.  A medium to exchange good for
the represented value of these products and technologies: state-issued
currency, credit card, bank account. These also work very well.&lt;&#x2F;p&gt;
&lt;p&gt;So as for blockchain (the tech) and cryptocurrencies (the value exchange), I
see two possible futures:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Cryptocurrency and&#x2F;or blockchain-based technologies (stake&#x2F;work) wind up
as a part of the daily life of almost every person in the first world&#x27;s
day-to-day life, just like the technologies I listed earlier. Whether I like
it or not, I &lt;em&gt;have&lt;&#x2F;em&gt; to use it.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Realizing that Scenario [1] would never come, the jig is up. At some point
enthusiasts realize this and their online community shrink back to year 2015 or
earlier levels ; cryptocurrencies value in state-issued fiat currencies also set
back to the same levels.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Is Scenario [1] getting closer any moment? Depends on whom you ask. Except for
enthusiasm among my peers, I don&#x27;t see any actual evidence for this yet, and
despite the consistent 10-year increase of value of cryptocurrencies, we may be
heading into Scenario [2] still.&lt;&#x2F;p&gt;
&lt;p&gt;I don&#x27;t invest in cryptocurrencies and have no use for them.  I don&#x27;t use any
blockchain-based technology. It would remain that way indefinitely for me, if
and only if scenario [2] is realized.&lt;&#x2F;p&gt;
&lt;p&gt;We can also measure the value of a technology using the &lt;i&gt;shutdown test&lt;&#x2F;i&gt;.
If in 2021 we shut down electricity for everyone - the result is terrible. If
we shut down all banks, we get societal turmoil. But if hypothetically we shut
down Bitcoin and Ethereum, by average it would only be equivalent to a small
stock market downturn to some people, and a loss of investment to various
speculators.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;One quality about the opinion I bring here is that it is regardless of whether
I could have invested in cryptocurrencies and made millions. I think
there is no prejudice, and it would not have affected it.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Bash #2 - Functional Command Relay</title>
		<published>2021-04-26T00:00:00+00:00</published>
		<updated>2021-04-26T00:00:00+00:00</updated>
		<link href="https://blog.aloni.org/posts/bash-functional-command-relay/" type="text/html"/>
		<id>https://blog.aloni.org/posts/bash-functional-command-relay/</id>
		<content type="html">&lt;p&gt;In this post I introduce a nice use for functions in &lt;code&gt;bash&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;Previous post: &lt;a href=&quot;..&#x2F;bash-execution-relay&quot;&gt;#1&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;In software projects, would often appear a &#x27;scripts&#x27; directory with various
scripting utilities. The inexperienced &lt;code&gt;bash&lt;&#x2F;code&gt; scriptwriter would usually not
use functions at all and instead litter up the directory with many execution
entry points such as:&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;text plain&quot;&gt;build.sh
run.sh
deploy.sh
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;p&gt;If we would like to clean this up and combines these functions to a single
file, say &lt;code&gt;command.sh&lt;&#x2F;code&gt;, how one would do so?&lt;&#x2F;p&gt;
&lt;p&gt;A nice way to accomplish is using the following:&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;source shell bash&quot;&gt;&lt;span class=&quot;comment line number-sign shell&quot;&gt;&lt;span class=&quot;punctuation definition comment begin shell&quot;&gt;#&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;comment line number-sign shell&quot;&gt;!&#x2F;bin&#x2F;bash&lt;&#x2F;span&gt;&lt;span class=&quot;comment line number-sign shell&quot;&gt;
&lt;&#x2F;span&gt;
&lt;span class=&quot;comment line number-sign shell&quot;&gt;&lt;span class=&quot;punctuation definition comment begin shell&quot;&gt;#&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;comment line number-sign shell&quot;&gt; ... common code here ...&lt;&#x2F;span&gt;&lt;span class=&quot;comment line number-sign shell&quot;&gt;
&lt;&#x2F;span&gt;
&lt;span class=&quot;meta function shell&quot;&gt;&lt;span class=&quot;entity name function shell&quot;&gt;build&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section parens begin shell&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section parens end shell&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;punctuation section braces begin shell&quot;&gt;{&lt;&#x2F;span&gt;
    &lt;span class=&quot;comment line number-sign shell&quot;&gt;&lt;span class=&quot;punctuation definition comment begin shell&quot;&gt;#&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;comment line number-sign shell&quot;&gt; Original content and logic of bash.sh&lt;&#x2F;span&gt;&lt;span class=&quot;comment line number-sign shell&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section braces end shell&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;

&lt;span class=&quot;meta function shell&quot;&gt;&lt;span class=&quot;entity name function shell&quot;&gt;run&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section parens begin shell&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section parens end shell&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;punctuation section braces begin shell&quot;&gt;{&lt;&#x2F;span&gt;
    &lt;span class=&quot;comment line number-sign shell&quot;&gt;&lt;span class=&quot;punctuation definition comment begin shell&quot;&gt;#&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;comment line number-sign shell&quot;&gt; Original content and logic of run.sh&lt;&#x2F;span&gt;&lt;span class=&quot;comment line number-sign shell&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section braces end shell&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;

&lt;span class=&quot;meta function shell&quot;&gt;&lt;span class=&quot;entity name function shell&quot;&gt;deploy&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section parens begin shell&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section parens end shell&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;punctuation section braces begin shell&quot;&gt;{&lt;&#x2F;span&gt;
    &lt;span class=&quot;comment line number-sign shell&quot;&gt;&lt;span class=&quot;punctuation definition comment begin shell&quot;&gt;#&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;comment line number-sign shell&quot;&gt; Original content and logic of deploy.sh&lt;&#x2F;span&gt;&lt;span class=&quot;comment line number-sign shell&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section braces end shell&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;

&lt;span class=&quot;meta function-call shell&quot;&gt;&lt;span class=&quot;variable function shell&quot;&gt;&lt;span class=&quot;string quoted double shell&quot;&gt;&lt;span class=&quot;punctuation definition string begin shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span class=&quot;meta group expansion parameter shell&quot;&gt;&lt;span class=&quot;punctuation definition variable shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;span class=&quot;variable language shell&quot;&gt;@&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation definition string end shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;p&gt;(for clarification regarding &lt;code&gt;&amp;quot;$@&amp;quot;&lt;&#x2F;code&gt;, see the previous post regarding &lt;a href=&quot;&#x2F;posts&#x2F;bash-execution-relay&#x2F;&quot;&gt;execution relay&lt;&#x2F;a&gt;)&lt;&#x2F;p&gt;
&lt;p&gt;Here is our example execution:&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;text plain&quot;&gt;$ .&#x2F;command.sh build &amp;lt;params&amp;gt;
&amp;lt;output of the original build logic&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;p&gt;Functions in &lt;code&gt;bash&lt;&#x2F;code&gt; behave like mini-scripts in the same manner that original
scripts would behave, and similar to &#x27;real&#x27; executable programs that are
already reachable from &lt;code&gt;$PATH&lt;&#x2F;code&gt;. It is very convenient that &lt;code&gt;bash&lt;&#x2F;code&gt; functions are
inter-changeable with regular programs. For instance, they can be used in shell
pipe components and in sub-shells and under &lt;code&gt;$(..)&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I call the method above the Functional Command Relay pattern, as it allows
execution of each function with the parameters to these functions relayed
as-is. It can even be used recursively to represent a command tree in script
command line parsing.&lt;&#x2F;p&gt;
&lt;p&gt;A natural extension to this method is choosing how strict we are with the
command itself, which is the first parameter to the main script. For example,
we can replace the last &lt;code&gt;&amp;quot;$@&amp;quot;&lt;&#x2F;code&gt; line with the following:&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;source shell bash&quot;&gt;&lt;span class=&quot;meta conditional case shell&quot;&gt;&lt;span class=&quot;keyword control conditional case shell&quot;&gt;case&lt;&#x2F;span&gt; &lt;span class=&quot;meta group expansion parameter shell&quot;&gt;&lt;span class=&quot;punctuation definition variable shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;span class=&quot;variable other readwrite shell&quot;&gt;1&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;keyword control in shell&quot;&gt;in&lt;&#x2F;span&gt;
    &lt;span class=&quot;meta conditional case clause patterns shell&quot;&gt;build&lt;span class=&quot;keyword operator logical shell&quot;&gt;|&lt;&#x2F;span&gt;run&lt;span class=&quot;keyword operator logical shell&quot;&gt;|&lt;&#x2F;span&gt;deploy&lt;span class=&quot;keyword control conditional patterns end shell&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta conditional case clause commands shell&quot;&gt; &lt;span class=&quot;meta function-call shell&quot;&gt;&lt;span class=&quot;variable function shell&quot;&gt;&lt;span class=&quot;string quoted double shell&quot;&gt;&lt;span class=&quot;punctuation definition string begin shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span class=&quot;meta group expansion parameter shell&quot;&gt;&lt;span class=&quot;punctuation definition variable shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;span class=&quot;variable language shell&quot;&gt;@&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation definition string end shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;meta conditional case clause commands shell&quot;&gt;&lt;span class=&quot;punctuation terminator case clause shell&quot;&gt;;;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
    &lt;span class=&quot;meta conditional case clause patterns shell&quot;&gt;&lt;span class=&quot;string quoted single shell&quot;&gt;&lt;span class=&quot;punctuation definition string begin shell&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation definition string end shell&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;keyword control conditional patterns end shell&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta conditional case clause commands shell&quot;&gt; &lt;span class=&quot;meta function-call shell&quot;&gt;&lt;span class=&quot;variable function shell&quot;&gt;print_help&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;keyword operator logical continue shell&quot;&gt;;&lt;&#x2F;span&gt; &lt;span class=&quot;meta function-call shell&quot;&gt;&lt;span class=&quot;support function exit shell&quot;&gt;exit&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call arguments shell&quot;&gt; -1&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;meta conditional case clause commands shell&quot;&gt;&lt;span class=&quot;punctuation terminator case clause shell&quot;&gt;;;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
    &lt;span class=&quot;meta conditional case clause patterns shell&quot;&gt;&lt;span class=&quot;keyword operator regexp quantifier shell&quot;&gt;*&lt;&#x2F;span&gt;&lt;span class=&quot;keyword control conditional patterns end shell&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta conditional case clause commands shell&quot;&gt; &lt;span class=&quot;meta function-call shell&quot;&gt;&lt;span class=&quot;support function echo shell&quot;&gt;echo&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call arguments shell&quot;&gt; &lt;span class=&quot;string quoted double shell&quot;&gt;&lt;span class=&quot;punctuation definition string begin shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Invalid command &amp;#39;&lt;span class=&quot;meta group expansion parameter shell&quot;&gt;&lt;span class=&quot;punctuation definition variable shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;span class=&quot;variable other readwrite shell&quot;&gt;1&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&amp;#39;&lt;span class=&quot;punctuation definition string end shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;keyword operator logical continue shell&quot;&gt;;&lt;&#x2F;span&gt; &lt;span class=&quot;meta function-call shell&quot;&gt;&lt;span class=&quot;support function exit shell&quot;&gt;exit&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call arguments shell&quot;&gt; -1&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;meta conditional case clause commands shell&quot;&gt;&lt;span class=&quot;punctuation terminator case clause shell&quot;&gt;;;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;keyword control conditional end shell&quot;&gt;esac&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;</content>
	</entry>
	<entry xml:lang="en">
		<title>Bash #1 - Execution Relay</title>
		<published>2021-04-25T00:00:00+00:00</published>
		<updated>2021-04-25T00:00:00+00:00</updated>
		<link href="https://blog.aloni.org/posts/bash-execution-relay/" type="text/html"/>
		<id>https://blog.aloni.org/posts/bash-execution-relay/</id>
		<content type="html">&lt;p&gt;The &lt;code&gt;bash&lt;&#x2F;code&gt; shell is somewhat like the lingua-franca of the UNIX-based shell
scripting world, as nothing else manages to displace it. The usefulness of a
language is significant if it is omnipresent.&lt;&#x2F;p&gt;
&lt;p&gt;In this post I begin a series about programming in &lt;code&gt;bash&lt;&#x2F;code&gt;. Its earlier
incarnation &lt;code&gt;sh&lt;&#x2F;code&gt; is less of a concern to me because &lt;code&gt;bash&lt;&#x2F;code&gt;  can be found in
almost in every place where &lt;code&gt;sh&lt;&#x2F;code&gt; is present.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;The pitfalls in &lt;code&gt;bash&lt;&#x2F;code&gt;-programming for the initiate or non-frequent shell
script programmer are numerous. However, they are easy to avoid by just
sticking in to some rules.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;relaying-execution&quot;&gt;Relaying execution&lt;&#x2F;h2&gt;
&lt;p&gt;Occasionally you want to relay an execution of one program to another. Possible reasons: providing arguments, environment variable hacks, path, and so
forth.&lt;&#x2F;p&gt;
&lt;p&gt;For example, let&#x27;s create a mutex around another program using &lt;span class=&#x27;external-link-outer&#x27;&gt;&lt;a class=&quot;external-link&quot;rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;linux.die.net&#x2F;man&#x2F;1&#x2F;flock&quot;&gt;&lt;code&gt;flock&lt;&#x2F;code&gt;&lt;span class=&#x27;external-link-no-underline&#x27;&gt;&lt;&#x2F;span&gt;&lt;svg width=&#x27;13.5&#x27; height=&#x27;13.5&#x27; aria-hidden=&#x27;true&#x27; viewBox=&#x27;0 0 24 24&#x27; class=&#x27;iconExternalLink_wgqa&#x27;&gt;&lt;path fill=&#x27;currentColor&#x27; d=&#x27;M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z&#x27;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;span&gt;,
a program to manage locks from shell scripts.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;flock&lt;&#x2F;code&gt; has the following syntax:&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;text plain&quot;&gt;flock [options] file|directory command [arguments]
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;p&gt;From this, it is apparent that we would need to relay arguments to the executed program.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;relaying-arguments-always-use&quot;&gt;Relaying arguments (always use &lt;code&gt;&amp;quot;$@&amp;quot;&lt;&#x2F;code&gt;!)&lt;&#x2F;h2&gt;
&lt;p&gt;It is important to understand the difference between the following expressions:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$*&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;$@&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;$*&amp;quot;&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;$@&amp;quot;&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Let&#x27;s test this with a simple &lt;code&gt;bash&lt;&#x2F;code&gt; script. The script executes Python to see
what list of strings was actually relayed as an argument list.&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;source shell bash&quot;&gt;&lt;span class=&quot;meta function-call shell&quot;&gt;&lt;span class=&quot;support function echo shell&quot;&gt;echo&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;meta function-call shell&quot;&gt;&lt;span class=&quot;variable function shell&quot;&gt;python&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call arguments shell&quot;&gt;&lt;span class=&quot;variable parameter option shell&quot;&gt;&lt;span class=&quot;punctuation definition parameter shell&quot;&gt; -&lt;&#x2F;span&gt;c&lt;&#x2F;span&gt; &lt;span class=&quot;string quoted double shell&quot;&gt;&lt;span class=&quot;punctuation definition string begin shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;import sys; print(sys.argv[1:])&lt;span class=&quot;punctuation definition string end shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;meta group expansion parameter shell&quot;&gt;&lt;span class=&quot;punctuation definition variable shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;span class=&quot;variable language shell&quot;&gt;*&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;meta function-call shell&quot;&gt;&lt;span class=&quot;variable function shell&quot;&gt;python&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call arguments shell&quot;&gt;&lt;span class=&quot;variable parameter option shell&quot;&gt;&lt;span class=&quot;punctuation definition parameter shell&quot;&gt; -&lt;&#x2F;span&gt;c&lt;&#x2F;span&gt; &lt;span class=&quot;string quoted double shell&quot;&gt;&lt;span class=&quot;punctuation definition string begin shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;import sys; print(sys.argv[1:])&lt;span class=&quot;punctuation definition string end shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;meta group expansion parameter shell&quot;&gt;&lt;span class=&quot;punctuation definition variable shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;span class=&quot;variable language shell&quot;&gt;@&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;meta function-call shell&quot;&gt;&lt;span class=&quot;variable function shell&quot;&gt;python&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call arguments shell&quot;&gt;&lt;span class=&quot;variable parameter option shell&quot;&gt;&lt;span class=&quot;punctuation definition parameter shell&quot;&gt; -&lt;&#x2F;span&gt;c&lt;&#x2F;span&gt; &lt;span class=&quot;string quoted double shell&quot;&gt;&lt;span class=&quot;punctuation definition string begin shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;import sys; print(sys.argv[1:])&lt;span class=&quot;punctuation definition string end shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;string quoted double shell&quot;&gt;&lt;span class=&quot;punctuation definition string begin shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span class=&quot;meta group expansion parameter shell&quot;&gt;&lt;span class=&quot;punctuation definition variable shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;span class=&quot;variable language shell&quot;&gt;*&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation definition string end shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;meta function-call shell&quot;&gt;&lt;span class=&quot;variable function shell&quot;&gt;python&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call arguments shell&quot;&gt;&lt;span class=&quot;variable parameter option shell&quot;&gt;&lt;span class=&quot;punctuation definition parameter shell&quot;&gt; -&lt;&#x2F;span&gt;c&lt;&#x2F;span&gt; &lt;span class=&quot;string quoted double shell&quot;&gt;&lt;span class=&quot;punctuation definition string begin shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;import sys; print(sys.argv[1:])&lt;span class=&quot;punctuation definition string end shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;string quoted double shell&quot;&gt;&lt;span class=&quot;punctuation definition string begin shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span class=&quot;meta group expansion parameter shell&quot;&gt;&lt;span class=&quot;punctuation definition variable shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;span class=&quot;variable language shell&quot;&gt;@&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation definition string end shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;p&gt;Execution result:&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;text plain&quot;&gt;$ bash test.sh foo bar &amp;#39;hello world&amp;#39; \?

[&amp;#39;foo&amp;#39;, &amp;#39;bar&amp;#39;, &amp;#39;hello&amp;#39;, &amp;#39;world&amp;#39;, &amp;#39;1&amp;#39;, &amp;#39;2&amp;#39;, &amp;#39;m&amp;#39;]
[&amp;#39;foo&amp;#39;, &amp;#39;bar&amp;#39;, &amp;#39;hello&amp;#39;, &amp;#39;world&amp;#39;, &amp;#39;1&amp;#39;, &amp;#39;2&amp;#39;, &amp;#39;m&amp;#39;]
[&amp;#39;foo bar hello world ?&amp;#39;]
[&amp;#39;foo&amp;#39;, &amp;#39;bar&amp;#39;, &amp;#39;hello world&amp;#39;, &amp;#39;?&amp;#39;]
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;p&gt;From this we can see there&#x27;s only one good option. Let&#x27;s break it down to what happens:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$*&lt;&#x2F;code&gt; - don&#x27;t quote arguments, perform wildcard expansion and then relay&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;$@&lt;&#x2F;code&gt; - same&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;$*&amp;quot;&lt;&#x2F;code&gt; - relay all arguments as one argument with &lt;code&gt;IFS&lt;&#x2F;code&gt; separator concatenation (space if undefined), don&#x27;t perform wildcard expansion&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;$@&amp;quot;&lt;&#x2F;code&gt; - relay arguments and quote them, don&#x27;t expand, equivalent to &lt;code&gt;&amp;quot;$1&amp;quot; &amp;quot;$2&amp;quot; &amp;quot;$3&amp;quot; ...&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;There is more information about this in &lt;span class=&#x27;external-link-outer&#x27;&gt;&lt;a class=&quot;external-link&quot;rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.gnu.org&#x2F;savannah-checkouts&#x2F;gnu&#x2F;bash&#x2F;manual&#x2F;bash.html#Special-Parameters&quot;&gt;bash&#x27;s docs&lt;span class=&#x27;external-link-no-underline&#x27;&gt;&lt;&#x2F;span&gt;&lt;svg width=&#x27;13.5&#x27; height=&#x27;13.5&#x27; aria-hidden=&#x27;true&#x27; viewBox=&#x27;0 0 24 24&#x27; class=&#x27;iconExternalLink_wgqa&#x27;&gt;&lt;path fill=&#x27;currentColor&#x27; d=&#x27;M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z&#x27;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;span&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;avoiding-a-redundant-shell-process&quot;&gt;Avoiding a redundant shell process&lt;&#x2F;h2&gt;
&lt;p&gt;Once we reach executing the wrapper program, the shell process has done its
job. Therefore, it would be best to replace it with the wrapped program. This
can be done using an &lt;code&gt;exec&lt;&#x2F;code&gt; prefix.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;full-example&quot;&gt;Full example&lt;&#x2F;h2&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;text plain&quot;&gt;#!&#x2F;bin&#x2F;bash

mkdir -p ~&#x2F;.locker || exit -1

exec flock ~&#x2F;.locker&#x2F;my-lock-file &amp;quot;$@&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;</content>
	</entry>
	<entry xml:lang="en">
		<title>Gitology #2 - git-retext</title>
		<published>2020-10-23T00:00:00+00:00</published>
		<updated>2020-10-23T00:00:00+00:00</updated>
		<link href="https://blog.aloni.org/posts/gitology-2-git-retext/" type="text/html"/>
		<id>https://blog.aloni.org/posts/gitology-2-git-retext/</id>
		<content type="html">&lt;p&gt;This is the second post in a series to expand on various utilities I wrote to
assist my work with Git.  Some of these utilities are located in a repository
on GitHub called &lt;span class=&#x27;external-link-outer&#x27;&gt;&lt;a class=&quot;external-link&quot;rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;da-x&#x2F;misc-gitology&quot;&gt;misc-gitology&lt;span class=&#x27;external-link-no-underline&#x27;&gt;&lt;&#x2F;span&gt;&lt;svg width=&#x27;13.5&#x27; height=&#x27;13.5&#x27; aria-hidden=&#x27;true&#x27; viewBox=&#x27;0 0 24 24&#x27; class=&#x27;iconExternalLink_wgqa&#x27;&gt;&lt;path fill=&#x27;currentColor&#x27; d=&#x27;M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z&#x27;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;span&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Previous post: &lt;a href=&quot;..&#x2F;gitology-1-git-flip-history&quot;&gt;#1&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Today I&#x27;ll introduce the commit rewriter - &lt;code&gt;git-retext&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h2 id=&quot;familiar-ways-of-git-history-editing&quot;&gt;Familiar ways of Git history editing&lt;&#x2F;h2&gt;
&lt;p&gt;In the previous post I mentioned the desire to present a clear Git history to
reviewers. Sometimes, we are reviewing our own unpublished Git history and
would like to do some polishing here and there before pushing it to a
remote repository.&lt;&#x2F;p&gt;
&lt;p&gt;There are multitude of ways in which editing the history can be done:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git commit --amend&lt;&#x2F;code&gt;, with or without &lt;code&gt;-a&lt;&#x2F;code&gt; (in the later &lt;code&gt;git add&lt;&#x2F;code&gt; is used). This
takes care of the &lt;code&gt;HEAD&lt;&#x2F;code&gt; commit, but not commits that are earlier to it.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;git rebase&lt;&#x2F;code&gt;, where you labor on a fixup commit or a set of them,
with or without &lt;code&gt;--interactive&lt;&#x2F;code&gt;, with or without &lt;code&gt;--autosquash&lt;&#x2F;code&gt;, so that
the fixup changes amend commits further down the history. There are tools such
as &lt;span class=&#x27;external-link-outer&#x27;&gt;&lt;a class=&quot;external-link&quot;rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tummychow&#x2F;git-absorb&quot;&gt;git-absorb&lt;span class=&#x27;external-link-no-underline&#x27;&gt;&lt;&#x2F;span&gt;&lt;svg width=&#x27;13.5&#x27; height=&#x27;13.5&#x27; aria-hidden=&#x27;true&#x27; viewBox=&#x27;0 0 24 24&#x27; class=&#x27;iconExternalLink_wgqa&#x27;&gt;&lt;path fill=&#x27;currentColor&#x27; d=&#x27;M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z&#x27;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;span&gt; that can be used to
automate creation of fixup commits.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;git-filter-branch&lt;&#x2F;code&gt;, a big hammer that lets you run a command per a commit,
where the result of a command is the rewritten tree. Obviously not
quite suitable for easy &#x27;final touches&#x27;.&lt;&#x2F;li&gt;
&lt;li&gt;Editor environment features. In Emacs, &lt;span class=&#x27;external-link-outer&#x27;&gt;&lt;a class=&quot;external-link&quot;rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;magit.vc&#x2F;&quot;&gt;Magit&lt;span class=&#x27;external-link-no-underline&#x27;&gt;&lt;&#x2F;span&gt;&lt;svg width=&#x27;13.5&#x27; height=&#x27;13.5&#x27; aria-hidden=&#x27;true&#x27; viewBox=&#x27;0 0 24 24&#x27; class=&#x27;iconExternalLink_wgqa&#x27;&gt;&lt;path fill=&#x27;currentColor&#x27; d=&#x27;M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z&#x27;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;span&gt;, and in
Vim, &lt;span class=&#x27;external-link-outer&#x27;&gt;&lt;a class=&quot;external-link&quot;rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jreybert&#x2F;vimagit&quot;&gt;Vimagit&lt;span class=&#x27;external-link-no-underline&#x27;&gt;&lt;&#x2F;span&gt;&lt;svg width=&#x27;13.5&#x27; height=&#x27;13.5&#x27; aria-hidden=&#x27;true&#x27; viewBox=&#x27;0 0 24 24&#x27; class=&#x27;iconExternalLink_wgqa&#x27;&gt;&lt;path fill=&#x27;currentColor&#x27; d=&#x27;M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z&#x27;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;span&gt;, and possibly other editors
have their own Git integrations, some are elaborate enough to ease on editing
the history. However, to each his own, and belaboring on a certain editor
environment would get us off-topic.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;a-new-way-git-retext&quot;&gt;A new way - &lt;code&gt;git-retext&lt;&#x2F;code&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;In the process of reviewing, we are most likely looking at diffs. What if it
was possible in an environment-independent way, to just edit the diff? &lt;&#x2F;p&gt;
&lt;p&gt;In the pre-cursor to the invention of Git, developers used emails (and some are
still using emails) in order to pass along changes to one another. The &lt;code&gt;git format-patch&lt;&#x2F;code&gt; command knows how to turn a list of commits into such emails. As
plain text emails can be easily edited by a text editor, it stands to reason
that we can edit changes in-place, if we momentarily turn commits into emails
and back.&lt;&#x2F;p&gt;
&lt;p&gt;This is what &lt;code&gt;git-retext&lt;&#x2F;code&gt; essentially lets you do.&lt;&#x2F;p&gt;
&lt;p&gt;For example, we want to edit the most recent commit in the history. Let&#x27;s issue
the command:&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;text plain&quot;&gt;git-retext HEAD~1
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;p&gt;This &lt;code&gt;git-retext&lt;&#x2F;code&gt; command turns the &lt;code&gt;HEAD~1..HEAD&lt;&#x2F;code&gt; range into emails, and then
we immediately find ourselves thrown into editing in the default text editor
that we configured either in Git&#x27;s configuration, or &lt;code&gt;EDITOR&lt;&#x2F;code&gt; environment
variable.  The &amp;quot;thrown into editor&amp;quot; situation should not be foreign to Git
users, as it is done in the default &lt;code&gt;git commit&lt;&#x2F;code&gt; or &lt;code&gt;git rebase -i&lt;&#x2F;code&gt; workflows.&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s an example for such &lt;code&gt;git-retext HEAD~1&lt;&#x2F;code&gt; invocation at one of my
repositories:&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;text plain&quot;&gt;From bbb92d7cc4ac33bd0e368164d555e4e93a66e658 Mon Sep 17 00:00:00 2001
From: Dan Aloni &amp;lt;alonid@gmail.com&amp;gt;
Date: Thu, 21 May 2020 09:56:01 +0300
Subject: [PATCH] Apply random rotation for new piece

By applying a random set of rotation, the new piece is effectively
rotated to all possible rotations.

---
 src&#x2F;main.rs | 3 +++
 1 file changed, 3 insertions(+)

diff --git a&#x2F;src&#x2F;main.rs b&#x2F;src&#x2F;main.rs
index de5aba608ec3..d2741fa61fe2 100644
--- a&#x2F;src&#x2F;main.rs
+++ b&#x2F;src&#x2F;main.rs
@@ -161,6 +161,9 @@ impl Game {

         self.falling = self.possible_pieces[idx].clone();
         self.shift = (0, 0);
+        for _ in 0 .. rng.gen_range(0, 4usize) {
+            self.rotate(false)
+        }
     }

     fn render(&amp;amp;self, window: &amp;amp;mut PistonWindow, event: &amp;amp;Event) {
--
2.26.2
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;p&gt;This is how a commit looks like when it is sent by email. It is possible to
edit the first line of the commit in the &lt;code&gt;Subject: &lt;&#x2F;code&gt; ; and the details of the
commit message before the &lt;code&gt;---&lt;&#x2F;code&gt;, and the diff itself. About the diff, we don&#x27;t
have to fix the unidiff&#x27;s meta-data, because &lt;code&gt;git-retext&lt;&#x2F;code&gt;&#x27;s processing will
take care of it instead.&lt;&#x2F;p&gt;
&lt;p&gt;Saving the temporary and exiting, &lt;code&gt;git-retext&lt;&#x2F;code&gt; will try to apply the edited
commits using &lt;code&gt;git am&lt;&#x2F;code&gt;. If we have carefully edited them, they should
apply cleanly. The resultant &lt;code&gt;HEAD&lt;&#x2F;code&gt; is the edited history.&lt;&#x2F;p&gt;
&lt;p&gt;Of course, this new method is not perfect, but it&#x27;s a time saver for certain
set of editing activities. After getting accustomed to it, you may start
reviewing changes in &lt;code&gt;git-retext&lt;&#x2F;code&gt; even if you are not ending up modifying them,
instead of running &lt;code&gt;git-diff&lt;&#x2F;code&gt; or viewing a diff made by the editor environment.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;advantages&quot;&gt;Advantages&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Easy to amend changes right when they are being reviewed, as long as
the editing is not too complicated. Adding new diff lines inside hunks
is possible.&lt;&#x2F;li&gt;
&lt;li&gt;Easy to do search and replace on the changes themselves, and that also takes
care of the commit message, and added filenames if relevant.&lt;&#x2F;li&gt;
&lt;li&gt;It is possible to remove unwanted diff hunks.&lt;&#x2F;li&gt;
&lt;li&gt;Splitting of commits to small new commits is possible by adding a new email
header in between hunks (no need to edit the diffstat).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;disadvantages&quot;&gt;Disadvantages&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;If there is more than one commit, and the commits are dependent on one
another, we must be more careful so that the editing is consistent, and that
the diff hunk context is correct.&lt;&#x2F;li&gt;
&lt;li&gt;It&#x27;s easy to mess up the editing and discover the mess only when &lt;code&gt;git-retext&lt;&#x2F;code&gt;
fails to apply the changes.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Future enhancements of &lt;code&gt;git-retext&lt;&#x2F;code&gt; should assist in avoiding mistakes during
editing, perhaps with better editor integration.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;how-it-is-implemented&quot;&gt;How it is implemented&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;code&gt;git-retext&lt;&#x2F;code&gt; is Python 3 script that relies on &lt;code&gt;recountdiff&lt;&#x2F;code&gt; in order to fix
the edited diffs. The underlying git commands being used are
&lt;code&gt;git-format-patch&lt;&#x2F;code&gt;, &lt;code&gt;git-am&lt;&#x2F;code&gt;, and &lt;code&gt;git-reset&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Gitology #1 - git-flip-history</title>
		<published>2020-10-16T00:00:00+00:00</published>
		<updated>2020-10-16T00:00:00+00:00</updated>
		<link href="https://blog.aloni.org/posts/gitology-1-git-flip-history/" type="text/html"/>
		<id>https://blog.aloni.org/posts/gitology-1-git-flip-history/</id>
		<content type="html">&lt;p&gt;This is the first post in a series to expand on various utilities I wrote to
assist my work with Git.  Some of these utilities are located in a repository
on GitHub called &lt;span class=&#x27;external-link-outer&#x27;&gt;&lt;a class=&quot;external-link&quot;rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;da-x&#x2F;misc-gitology&quot;&gt;misc-gitology&lt;span class=&#x27;external-link-no-underline&#x27;&gt;&lt;&#x2F;span&gt;&lt;svg width=&#x27;13.5&#x27; height=&#x27;13.5&#x27; aria-hidden=&#x27;true&#x27; viewBox=&#x27;0 0 24 24&#x27; class=&#x27;iconExternalLink_wgqa&#x27;&gt;&lt;path fill=&#x27;currentColor&#x27; d=&#x27;M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z&#x27;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;span&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Today I&#x27;ll introduce the history flipper - &lt;code&gt;git-flip-history&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h2 id=&quot;the-problem-with-splitting-commits&quot;&gt;The problem with splitting commits&lt;&#x2F;h2&gt;
&lt;p&gt;When working with Git and browsing other developers&#x27; commit history, it is
clear to many developers that separating logical changes to commits often
provides value to reviewers. It also makes it easier to revert changes if
needed, or when bisecting for bugs.&lt;&#x2F;p&gt;
&lt;p&gt;However, it is often hard to abide by the rule. When we are about to make a
change, sometimes we find ourselves refactoring or doing more changes along the
way, and we end up doing many preceding and&#x2F;or proceeding changes to support
the change we wanted to do in the first place.&lt;&#x2F;p&gt;
&lt;p&gt;Managing several closely related changes together while they are still &amp;quot;hot in
the stove&amp;quot; really depends on development style and organization of the person
doing so. Some manage to take every change to its own branch and commit it
right away, nice and cleanly. Others have the discipline to split right away to
separate commits and rebase-squash them with fixups. However, others cannot
afford many of the context switches that would be involved and prefer to delay
&amp;quot;feature splitting&amp;quot; to the very end once everything feels more mature and
well-formed. The utility discussed in this post is more helpful to the latter
group of developers.&lt;&#x2F;p&gt;
&lt;p&gt;Splitting a large commit that is currently in &lt;code&gt;HEAD&lt;&#x2F;code&gt; involves doing some Git
maneuvering starting with  &lt;code&gt;git reset&lt;&#x2F;code&gt;, proceeding to &lt;code&gt;git add&lt;&#x2F;code&gt; and &lt;code&gt;git add -p&lt;&#x2F;code&gt;, and an occasional &lt;code&gt;git commit&lt;&#x2F;code&gt;. However, this has a limitation - some
logical changes may be dependent on one another, in this case &lt;code&gt;git add -p&lt;&#x2F;code&gt;
would not help. For example, suppose two features add to a global list, where
they modify the same location in a file.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;history-flipping-to-the-rescue&quot;&gt;History flipping to the rescue&lt;&#x2F;h2&gt;
&lt;p&gt;Another way to tackle the problem of untangling features from one another is
this - if I can do the work to remove the features one by one, it would be the
mirror image of the work of rewriting these features from scratch, and in that
case I just need an elaborate Git trick to flip the history on itself!&lt;&#x2F;p&gt;
&lt;p&gt;In further detail, I have a large commit implementing A+B+C. If I write a new
commit that reverts A, and another one that reverts B, and flip the history of
the three versions, the result would be a history that implements all three
versions separately.&lt;&#x2F;p&gt;
&lt;p&gt;So this is where &lt;code&gt;git-flip-history&lt;&#x2F;code&gt; comes into play, where it also makes sure
that the commit log looks sane afterward.&lt;&#x2F;p&gt;
&lt;p&gt;For example, we have the following commit, with a tentative commit message:&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;text plain&quot;&gt;219bd740a8f1 WIP - three changes packed into one
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;p&gt;Our purpose is to reach a state where we have three commits each describing
a separate feature (can also be a bugfix any other kind of change).&lt;&#x2F;p&gt;
&lt;p&gt;Here, we&#x27;ll manually revert the first two features into two commits, and for
each one put specially crafted commit message with a &lt;code&gt;Revert: &lt;&#x2F;code&gt; prefix. This
can be done in the editor, and &lt;code&gt;git checkout&lt;&#x2F;code&gt; can also assist. Once we&#x27;re done
for the original commit we&#x27;ll reword it, so it becomes prefixed with a &lt;code&gt;First: &lt;&#x2F;code&gt;
prefix, describing the remaining feature which we have &lt;strong&gt;not&lt;&#x2F;strong&gt; reverted. (i.e.
whatever change the diff to &lt;code&gt;HEAD~3&lt;&#x2F;code&gt; presented).  We are free to write full
commit messages, as long as the &lt;code&gt;Revert: &lt;&#x2F;code&gt; and &lt;code&gt;First: &lt;&#x2F;code&gt; prefixes are there.&lt;&#x2F;p&gt;
&lt;p&gt;Following our work to revert the features and reword the commits accordingly,
our history looks like this:&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;text plain&quot;&gt;509c3964befd Revert: Ignore type aliases
8941699bfb69 Revert: Treat DefKind::Mod as being in the value namespace
372d10a7ffcc First: Have trait names on their own namespace
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;p&gt;Now that we are ready, we run &lt;code&gt;git-flip-history&lt;&#x2F;code&gt;. This requires no user input,
and now &lt;code&gt;HEAD&lt;&#x2F;code&gt; looks like this:&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;text plain&quot;&gt;a086ec0322a4 Treat DefKind::Mod as being in the value namespace
9d78613ed775 Ignore type aliases
86d20b3e77dc Have trait names on their own namespace
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;p&gt;Observing the changes with &lt;code&gt;git log -p&lt;&#x2F;code&gt;, we should see a sane history now,
&lt;strong&gt;where each commit adds the feature that the commit message talks about&lt;&#x2F;strong&gt;.
It&#x27;s worth to stress out that flipping the history like this does not require
us to solve any conflicts, unlike with &lt;code&gt;git rebase -i&lt;&#x2F;code&gt; in the case where
changes overlap on file offsets. Untangling the changes from one another is
done only in the process of creating the &lt;code&gt;Revert: &lt;&#x2F;code&gt; commits, and you are free
to use whatever method e.g. &lt;code&gt;git checkout -p&lt;&#x2F;code&gt;, or manual editing, in order to
create these commits.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;further-discussion&quot;&gt;Further discussion&lt;&#x2F;h3&gt;
&lt;p&gt;To explain how this is possible, let&#x27;s look at it from another angle.&lt;&#x2F;p&gt;
&lt;p&gt;We have the following history:&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;text plain&quot;&gt;HEAD     Revert A          This tree has C
HEAD~1   Revert B          This tree has A+C
HEAD~2   Implement A+B+C   This tree has A+B+C
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;p&gt;By flipping, we now have this (start by comparing the third column):&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;text plain&quot;&gt;HEAD     Implement B       This tree has A+B+C
HEAD~1   Implement A       This tree has A+C
HEAD~2   Implement C       This tree has C
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;&lt;h2 id=&quot;how-does-it-work&quot;&gt;How does it work&lt;&#x2F;h2&gt;
&lt;p&gt;The &lt;code&gt;git-flip-history&lt;&#x2F;code&gt; program is a bash script that looks back at the history,
finding the &lt;code&gt;Revert: &lt;&#x2F;code&gt; prefixes and stops when seeing a commit with the &lt;code&gt;First: &lt;&#x2F;code&gt; prefix.  The history recreation process does not do any working tree changes,
by simply invoking the &lt;code&gt;git-commit-tree&lt;&#x2F;code&gt; command. The resulting topmost version
is identical to the original branch version, and the branch is reset using
&lt;code&gt;git reset --hard&lt;&#x2F;code&gt; to the new history. The script currently requires a clean
Git status for good measure (this may change in the future).&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Path Trimming In Nightly Rust</title>
		<published>2020-09-04T00:00:00+00:00</published>
		<updated>2020-09-04T00:00:00+00:00</updated>
		<link href="https://blog.aloni.org/posts/path-trimming-in-rust-nightly/" type="text/html"/>
		<id>https://blog.aloni.org/posts/path-trimming-in-rust-nightly/</id>
		<content type="html">&lt;p&gt;As of yesterday, the &lt;span class=&#x27;external-link-outer&#x27;&gt;&lt;a class=&quot;external-link&quot;rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;73996&quot;&gt;Rust PR&lt;span class=&#x27;external-link-no-underline&#x27;&gt;&lt;&#x2F;span&gt;&lt;svg width=&#x27;13.5&#x27; height=&#x27;13.5&#x27; aria-hidden=&#x27;true&#x27; viewBox=&#x27;0 0 24 24&#x27; class=&#x27;iconExternalLink_wgqa&#x27;&gt;&lt;path fill=&#x27;currentColor&#x27; d=&#x27;M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z&#x27;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;span&gt;
(which I had worked on) is merged into Rust nightly, and it has wide
implications on compiler errors.&lt;&#x2F;p&gt;
&lt;p&gt;In this post I describe the change and what to expect from it.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h2 id=&quot;the-problem-with-full-paths-in-errors&quot;&gt;The problem with full paths in errors&lt;&#x2F;h2&gt;
&lt;p&gt;A simple program such as the following, would result in a type error.&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;source rust&quot;&gt;&lt;span class=&quot;meta function rust&quot;&gt;&lt;span class=&quot;meta function rust&quot;&gt;&lt;span class=&quot;storage type function rust&quot;&gt;fn&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;entity name function rust&quot;&gt;main&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function rust&quot;&gt;&lt;span class=&quot;meta function parameters rust&quot;&gt;&lt;span class=&quot;punctuation section parameters begin rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function rust&quot;&gt;&lt;span class=&quot;meta function parameters rust&quot;&gt;&lt;span class=&quot;punctuation section parameters end rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function rust&quot;&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;meta function rust&quot;&gt;&lt;span class=&quot;meta block rust&quot;&gt;&lt;span class=&quot;punctuation section block begin rust&quot;&gt;{&lt;&#x2F;span&gt;
    &lt;span class=&quot;storage type rust&quot;&gt;let&lt;&#x2F;span&gt; a &lt;span class=&quot;keyword operator assignment rust&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;support macro rust&quot;&gt;vec!&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group begin rust&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;support macro rust&quot;&gt;vec!&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group begin rust&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;support type rust&quot;&gt;String&lt;&#x2F;span&gt;&lt;span class=&quot;meta path rust&quot;&gt;&lt;span class=&quot;punctuation accessor rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;from&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group begin rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;string quoted double rust&quot;&gt;&lt;span class=&quot;punctuation definition string begin rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;a&lt;span class=&quot;punctuation definition string end rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group end rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section group end rust&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section group end rust&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation terminator rust&quot;&gt;;&lt;&#x2F;span&gt;
    &lt;span class=&quot;storage type rust&quot;&gt;let&lt;&#x2F;span&gt; b &lt;span class=&quot;keyword operator assignment rust&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;support macro rust&quot;&gt;vec!&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group begin rust&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;support type rust&quot;&gt;String&lt;&#x2F;span&gt;&lt;span class=&quot;meta path rust&quot;&gt;&lt;span class=&quot;punctuation accessor rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;from&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group begin rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;string quoted double rust&quot;&gt;&lt;span class=&quot;punctuation definition string begin rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;b&lt;span class=&quot;punctuation definition string end rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group end rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section group end rust&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation terminator rust&quot;&gt;;&lt;&#x2F;span&gt;
    a &lt;span class=&quot;keyword operator comparison rust&quot;&gt;==&lt;&#x2F;span&gt; b&lt;span class=&quot;punctuation terminator rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;meta block rust&quot;&gt;&lt;span class=&quot;punctuation section block end rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;p&gt;The type error can be described as such: cannot compare between values of the
types &lt;code&gt;Vec&amp;lt;Vec&amp;lt;String&amp;gt;&amp;gt;&lt;&#x2F;code&gt; and &lt;code&gt;Vec&amp;lt;String&amp;gt;&lt;&#x2F;code&gt;. Before the changes in the PR, this
was &lt;em&gt;almost&lt;&#x2F;em&gt; the first line of the error message, and the rest of the error
message gives us more details about traits:&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;codeTitle&quot; colspan=&quot;2&quot;&gt;old output&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;text plain&quot;&gt;error[E0277]: can&amp;#39;t compare `std::vec::Vec&amp;lt;std::string::String&amp;gt;` with `std::string::String`
 --&amp;gt; example.rs:5:7
  |
5 |     a == b;
  |       ^^ no implementation for `std::vec::Vec&amp;lt;std::string::String&amp;gt; == std::string::String`
  |
  = help: the trait `std::cmp::PartialEq&amp;lt;std::string::String&amp;gt;` is not implemented for `std::vec::Vec&amp;lt;std::string::String&amp;gt;`
  = note: required because of the requirements on the impl of `std::cmp::PartialEq&amp;lt;std::vec::Vec&amp;lt;std::string::String&amp;gt;&amp;gt;` for `std::vec::Vec&amp;lt;std::vec::Vec&amp;lt;std::string::String&amp;gt;&amp;gt;`
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;p&gt;It is surely noticeable that in the above error the greatest contribution to
cognitive burden is the fully qualified paths (e.g. &lt;code&gt;std::vec::Vec&lt;&#x2F;code&gt;) of types
and traits. It has made a significant readability difference for many people.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;enter-path-trimming&quot;&gt;Enter path trimming&lt;&#x2F;h2&gt;
&lt;p&gt;In the large majority of cases there would be only one &lt;code&gt;Vec&lt;&#x2F;code&gt; symbol and one
&lt;code&gt;String&lt;&#x2F;code&gt; symbol that is importable through the entire program being linked, for
all crates that are available.  Surely that there are crates existing that
define items named &lt;code&gt;Vec&lt;&#x2F;code&gt;, but they are rare, and the situation that the user
defines &lt;code&gt;Vec&lt;&#x2F;code&gt; is rare.&lt;&#x2F;p&gt;
&lt;p&gt;Considering the observation that the overlap between module namespaces is
rather minimal, we can do a uniqueness check that verifies that uniqueness
holds, i.e, that &lt;code&gt;Vec&lt;&#x2F;code&gt; and &lt;code&gt;String&lt;&#x2F;code&gt; are unique as items defined in the
compilation. Even if that&#x27;s not the case, the compilation would still succeed
without any new warning. But for the unique symbols, we don&#x27;t have to print the
entire path in warnings and errors, and we can thus trim it to the last
component - the symbol itself.&lt;&#x2F;p&gt;
&lt;p&gt;With trimming according to uniqueness, the following error is printed instead:&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;codeTitle&quot; colspan=&quot;2&quot;&gt;new output&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;text plain&quot;&gt;error[E0277]: can&amp;#39;t compare `Vec&amp;lt;String&amp;gt;` with `String`
 --&amp;gt; example.rs:5:7
  |
5 |     a == b;
  |       ^^ no implementation for `Vec&amp;lt;String&amp;gt; == String`
  |
  = help: the trait `PartialEq&amp;lt;String&amp;gt;` is not implemented for `Vec&amp;lt;String&amp;gt;`
  = note: required because of the requirements on the impl of `PartialEq&amp;lt;Vec&amp;lt;String&amp;gt;&amp;gt;` for `Vec&amp;lt;Vec&amp;lt;String&amp;gt;&amp;gt;`
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;p&gt;This behavior can be controlled using a new debug option &lt;code&gt;-Z trim-diagnostic-paths=false&lt;&#x2F;code&gt;, and it is enabled by default only for rustc
itself.&lt;&#x2F;p&gt;
&lt;p&gt;As for the toll it takes on the compiler, it is similar to the algorithm that
computes &#x27;use suggestions&#x27; on errors caused by undefined identifiers. This
means iterating all importable symbols of the entire program or library being
linked. Since this may be heavy, we made sure it is only done in case there
are warnings or errors by the compiler. If that assertion is invalidated,
it&#x27;s a bug, and you&#x27;d see a panic related to trimmed paths.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;trimming-considerations&quot;&gt;Trimming considerations&lt;&#x2F;h3&gt;
&lt;p&gt;Trimming is done only relative to what the currently built crate does, so -&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;All the local definitions in the built crate are considered, regardless of
whether they are exported from it or not. This is different from how external
crates are treated, where only the externally visible and importable
definitions are taken into account.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Trimming is considered between all crates including the one being built, so
if you define a &lt;code&gt;Vec&lt;&#x2F;code&gt; type anywhere in your crate, then &lt;code&gt;Vec&lt;&#x2F;code&gt; name will no
longer be considered unique because another &lt;code&gt;Vec&lt;&#x2F;code&gt; can be imported from
&lt;code&gt;std::vec&lt;&#x2F;code&gt; too, and thus the full paths of both types will be printed as
just as before.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Because several glob imports (i.e. &lt;code&gt;use foo::*;&lt;&#x2F;code&gt;) can happen in a single
place, it wouldn&#x27;t be clear which items they bring if we trim the paths that
are related to these items. Thus, glob imports cancel out the uniqueness of the
symbols that they import.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;what-s-next&quot;&gt;What&#x27;s next&lt;&#x2F;h2&gt;
&lt;p&gt;This change in behavior will probably go under some refinements and more
testing until it reaches stable Rust. There are expected follow-ups, for
instance, to allow some ambiguity, as not all items are treated equal. For
example between the &lt;code&gt;Result&lt;&#x2F;code&gt; type alias in &lt;code&gt;std::io&lt;&#x2F;code&gt;, and the &lt;code&gt;Result&lt;&#x2F;code&gt; type
itself from &lt;code&gt;std::result&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;thanks&quot;&gt;Thanks&lt;&#x2F;h2&gt;
&lt;p&gt;The change has been hard to maintain as a PR, as it affected more than 1000
unit tests. It has gone through several revisions until the implementation was
good.&lt;&#x2F;p&gt;
&lt;p&gt;However, despite being not a frequent Rust compiler contributor where most of
the code involved was new to me, it has been greatly instructive to rely on
long-term members of the Rust compiler team. There have been folks who were
crucial in reviewing, so I&#x27;d like to thank them â€” &lt;span class=&#x27;external-link-outer&#x27;&gt;&lt;a class=&quot;external-link&quot;rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;petrochenkov&quot;&gt;Vadim
Petrochenkov&lt;span class=&#x27;external-link-no-underline&#x27;&gt;&lt;&#x2F;span&gt;&lt;svg width=&#x27;13.5&#x27; height=&#x27;13.5&#x27; aria-hidden=&#x27;true&#x27; viewBox=&#x27;0 0 24 24&#x27; class=&#x27;iconExternalLink_wgqa&#x27;&gt;&lt;path fill=&#x27;currentColor&#x27; d=&#x27;M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z&#x27;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;span&gt;, &lt;span class=&#x27;external-link-outer&#x27;&gt;&lt;a class=&quot;external-link&quot;rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;eddyb&quot;&gt;Eduard
Burtescu&lt;span class=&#x27;external-link-no-underline&#x27;&gt;&lt;&#x2F;span&gt;&lt;svg width=&#x27;13.5&#x27; height=&#x27;13.5&#x27; aria-hidden=&#x27;true&#x27; viewBox=&#x27;0 0 24 24&#x27; class=&#x27;iconExternalLink_wgqa&#x27;&gt;&lt;path fill=&#x27;currentColor&#x27; d=&#x27;M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z&#x27;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;span&gt;, &lt;span class=&#x27;external-link-outer&#x27;&gt;&lt;a class=&quot;external-link&quot;rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;estebank&quot;&gt; Esteban
Kuber&lt;span class=&#x27;external-link-no-underline&#x27;&gt;&lt;&#x2F;span&gt;&lt;svg width=&#x27;13.5&#x27; height=&#x27;13.5&#x27; aria-hidden=&#x27;true&#x27; viewBox=&#x27;0 0 24 24&#x27; class=&#x27;iconExternalLink_wgqa&#x27;&gt;&lt;path fill=&#x27;currentColor&#x27; d=&#x27;M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z&#x27;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;span&gt;, and also other contributors â€” &lt;span class=&#x27;external-link-outer&#x27;&gt;&lt;a class=&quot;external-link&quot;rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Aaron1011&quot;&gt;Aaron
Hill&lt;span class=&#x27;external-link-no-underline&#x27;&gt;&lt;&#x2F;span&gt;&lt;svg width=&#x27;13.5&#x27; height=&#x27;13.5&#x27; aria-hidden=&#x27;true&#x27; viewBox=&#x27;0 0 24 24&#x27; class=&#x27;iconExternalLink_wgqa&#x27;&gt;&lt;path fill=&#x27;currentColor&#x27; d=&#x27;M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z&#x27;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;span&gt;, and &lt;span class=&#x27;external-link-outer&#x27;&gt;&lt;a class=&quot;external-link&quot;rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;lzutao&quot;&gt;luzato&lt;span class=&#x27;external-link-no-underline&#x27;&gt;&lt;&#x2F;span&gt;&lt;svg width=&#x27;13.5&#x27; height=&#x27;13.5&#x27; aria-hidden=&#x27;true&#x27; viewBox=&#x27;0 0 24 24&#x27; class=&#x27;iconExternalLink_wgqa&#x27;&gt;&lt;path fill=&#x27;currentColor&#x27; d=&#x27;M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z&#x27;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;span&gt;
for their help.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Tracking Linux Kernel Sources of Distributions</title>
		<published>2020-02-01T00:00:00+00:00</published>
		<updated>2020-02-01T00:00:00+00:00</updated>
		<link href="https://blog.aloni.org/posts/tracking-linux-kernel-sources-of-distributions/" type="text/html"/>
		<id>https://blog.aloni.org/posts/tracking-linux-kernel-sources-of-distributions/</id>
		<content type="html">&lt;p&gt;&lt;strong&gt;TL;DR&lt;&#x2F;strong&gt;: I provide easily browsable CentOS kernel sources &lt;span class=&#x27;external-link-outer&#x27;&gt;&lt;a class=&quot;external-link&quot;rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;kernelim&#x2F;linux&quot;&gt;on
GitHub&lt;span class=&#x27;external-link-no-underline&#x27;&gt;&lt;&#x2F;span&gt;&lt;svg width=&#x27;13.5&#x27; height=&#x27;13.5&#x27; aria-hidden=&#x27;true&#x27; viewBox=&#x27;0 0 24 24&#x27; class=&#x27;iconExternalLink_wgqa&#x27;&gt;&lt;path fill=&#x27;currentColor&#x27; d=&#x27;M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z&#x27;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;span&gt;.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;When developing Linux-based back-end systems, on some situations it is often
quite viable to look at &lt;span class=&#x27;external-link-outer&#x27;&gt;&lt;a class=&quot;external-link&quot;rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.kernel.org&quot;&gt;Linux kernel&lt;span class=&#x27;external-link-no-underline&#x27;&gt;&lt;&#x2F;span&gt;&lt;svg width=&#x27;13.5&#x27; height=&#x27;13.5&#x27; aria-hidden=&#x27;true&#x27; viewBox=&#x27;0 0 24 24&#x27; class=&#x27;iconExternalLink_wgqa&#x27;&gt;&lt;path fill=&#x27;currentColor&#x27; d=&#x27;M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z&#x27;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;span&gt; sources in order
to understand problems.  This is true for my clients who design high
performance and critical systems, often with kernel code added.&lt;&#x2F;p&gt;
&lt;p&gt;However, the source browsing provided by
&lt;span class=&#x27;external-link-outer&#x27;&gt;&lt;a class=&quot;external-link&quot;rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;elixir.bootlin.com&#x2F;linux&#x2F;latest&#x2F;source&quot;&gt;Elixir&lt;span class=&#x27;external-link-no-underline&#x27;&gt;&lt;&#x2F;span&gt;&lt;svg width=&#x27;13.5&#x27; height=&#x27;13.5&#x27; aria-hidden=&#x27;true&#x27; viewBox=&#x27;0 0 24 24&#x27; class=&#x27;iconExternalLink_wgqa&#x27;&gt;&lt;path fill=&#x27;currentColor&#x27; d=&#x27;M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z&#x27;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;span&gt;, though an
indispensable and easily accessible resource, does not cover the heavily
patched kernels that enterprise Linux users sometimes use. The clients that
need to do kernel development usually don&#x27;t take upstream kernels as a base for
a good reason - the enterprise-patched kernels are more field-driven and
heavily patched with fixes and backported features.&lt;&#x2F;p&gt;
&lt;p&gt;For example, the kernels being maintained by &lt;span class=&#x27;external-link-outer&#x27;&gt;&lt;a class=&quot;external-link&quot;rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;redhat.com&quot;&gt;Red Hat&lt;span class=&#x27;external-link-no-underline&#x27;&gt;&lt;&#x2F;span&gt;&lt;svg width=&#x27;13.5&#x27; height=&#x27;13.5&#x27; aria-hidden=&#x27;true&#x27; viewBox=&#x27;0 0 24 24&#x27; class=&#x27;iconExternalLink_wgqa&#x27;&gt;&lt;path fill=&#x27;currentColor&#x27; d=&#x27;M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z&#x27;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;span&gt;,
contain a large number of
&lt;span class=&#x27;external-link-outer&#x27;&gt;&lt;a class=&quot;external-link&quot;rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Backporting&quot;&gt;backports&lt;span class=&#x27;external-link-no-underline&#x27;&gt;&lt;&#x2F;span&gt;&lt;svg width=&#x27;13.5&#x27; height=&#x27;13.5&#x27; aria-hidden=&#x27;true&#x27; viewBox=&#x27;0 0 24 24&#x27; class=&#x27;iconExternalLink_wgqa&#x27;&gt;&lt;path fill=&#x27;currentColor&#x27; d=&#x27;M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z&#x27;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;span&gt; and changes. Due to
internal decisions, the sources of these kernels only come as source packages,
as the GPL does not enforce any kind of source control usage on released code.&lt;&#x2F;p&gt;
&lt;p&gt;Because companies such as Red Hat are reluctant to look into issues in
customized and patched kernels, organization that need to use such kernels
sometimes choose to use the equivalent &lt;span class=&#x27;external-link-outer&#x27;&gt;&lt;a class=&quot;external-link&quot;rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.centos.org&quot;&gt;CentOS&lt;span class=&#x27;external-link-no-underline&#x27;&gt;&lt;&#x2F;span&gt;&lt;svg width=&#x27;13.5&#x27; height=&#x27;13.5&#x27; aria-hidden=&#x27;true&#x27; viewBox=&#x27;0 0 24 24&#x27; class=&#x27;iconExternalLink_wgqa&#x27;&gt;&lt;path fill=&#x27;currentColor&#x27; d=&#x27;M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z&#x27;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;span&gt; kernels
with the downside of supporting these kernels themselves, outside of Red Hat,
where exact Git histories of such kernels is not available.&lt;&#x2F;p&gt;
&lt;p&gt;In an ideal world, it would have been possible to browse the source of all the
Linux kernels of distributions in one place. However, the Linux kernel is
maintained in distribution forks, and the maintainship is fragmented. So to
compensate, and in order to ease my work, a few years ago I have decided to
artificially create Git trees that track these kernels release by release.&lt;&#x2F;p&gt;
&lt;p&gt;This semi-automated work is &lt;span class=&#x27;external-link-outer&#x27;&gt;&lt;a class=&quot;external-link&quot;rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;kernelim&#x2F;linux&quot;&gt;reachable in
GitHub&lt;span class=&#x27;external-link-no-underline&#x27;&gt;&lt;&#x2F;span&gt;&lt;svg width=&#x27;13.5&#x27; height=&#x27;13.5&#x27; aria-hidden=&#x27;true&#x27; viewBox=&#x27;0 0 24 24&#x27; class=&#x27;iconExternalLink_wgqa&#x27;&gt;&lt;path fill=&#x27;currentColor&#x27; d=&#x27;M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z&#x27;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;span&gt;. In the future, I may add more
information to each commit, for example, source RPM change-log entries.  For
now, it allows to perform diffs between various minor and major kernels
versions of the distribution kernel, compare the distribution with the upstream
kernel, and other actions.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>A stack-less Rust coroutine library under 100 LoC</title>
		<published>2020-01-25T00:00:00+00:00</published>
		<updated>2020-01-25T00:00:00+00:00</updated>
		<link href="https://blog.aloni.org/posts/a-stack-less-rust-coroutine-100-loc/" type="text/html"/>
		<id>https://blog.aloni.org/posts/a-stack-less-rust-coroutine-100-loc/</id>
		<content type="html">&lt;p&gt;As of stable &lt;span class=&#x27;external-link-outer&#x27;&gt;&lt;a class=&quot;external-link&quot;rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.rust-lang.org&#x2F;&quot;&gt;Rust&lt;span class=&#x27;external-link-no-underline&#x27;&gt;&lt;&#x2F;span&gt;&lt;svg width=&#x27;13.5&#x27; height=&#x27;13.5&#x27; aria-hidden=&#x27;true&#x27; viewBox=&#x27;0 0 24 24&#x27; class=&#x27;iconExternalLink_wgqa&#x27;&gt;&lt;path fill=&#x27;currentColor&#x27; d=&#x27;M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z&#x27;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;span&gt; 1.39.0, it is possible to
implement a very basic and safe
&lt;span class=&#x27;external-link-outer&#x27;&gt;&lt;a class=&quot;external-link&quot;rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Coroutine&quot;&gt;coroutine&lt;span class=&#x27;external-link-no-underline&#x27;&gt;&lt;&#x2F;span&gt;&lt;svg width=&#x27;13.5&#x27; height=&#x27;13.5&#x27; aria-hidden=&#x27;true&#x27; viewBox=&#x27;0 0 24 24&#x27; class=&#x27;iconExternalLink_wgqa&#x27;&gt;&lt;path fill=&#x27;currentColor&#x27; d=&#x27;M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z&#x27;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;span&gt; library using Rust&#x27;s
&lt;span class=&#x27;external-link-outer&#x27;&gt;&lt;a class=&quot;external-link&quot;rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.infoq.com&#x2F;presentations&#x2F;rust-2019&#x2F;&quot;&gt;&lt;code&gt;async&lt;&#x2F;code&gt;&#x2F;&lt;code&gt;await&lt;&#x2F;code&gt;&lt;span class=&#x27;external-link-no-underline&#x27;&gt;&lt;&#x2F;span&gt;&lt;svg width=&#x27;13.5&#x27; height=&#x27;13.5&#x27; aria-hidden=&#x27;true&#x27; viewBox=&#x27;0 0 24 24&#x27; class=&#x27;iconExternalLink_wgqa&#x27;&gt;&lt;path fill=&#x27;currentColor&#x27; d=&#x27;M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z&#x27;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;span&gt; support, and
in under 100 lines of code.  The implementation depends solely on &lt;code&gt;std&lt;&#x2F;code&gt; and is
stack-less (meaning, not depending on a separate CPU architecture stack).&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;A very basic simple coroutine library contains only an event-less &#x27;yield&#x27;
primitive, which stops execution of the current coroutine so that other
coroutines can run. This is the kind of library that I chose to demonstrate in
this post to provide the most concise example.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;yielder&quot;&gt;Yielder&lt;&#x2F;h2&gt;
&lt;p&gt;To the coroutine we pass a &lt;code&gt;Fib&lt;&#x2F;code&gt; struct that only contains a simple binary
state. This &lt;code&gt;Fib&lt;&#x2F;code&gt; struct has a &lt;code&gt;waiter&lt;&#x2F;code&gt; method that creates a
&lt;span class=&#x27;external-link-outer&#x27;&gt;&lt;a class=&quot;external-link&quot;rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;future&#x2F;trait.Future.html&quot;&gt;&lt;code&gt;Future&lt;&#x2F;code&gt;&lt;span class=&#x27;external-link-no-underline&#x27;&gt;&lt;&#x2F;span&gt;&lt;svg width=&#x27;13.5&#x27; height=&#x27;13.5&#x27; aria-hidden=&#x27;true&#x27; viewBox=&#x27;0 0 24 24&#x27; class=&#x27;iconExternalLink_wgqa&#x27;&gt;&lt;path fill=&#x27;currentColor&#x27; d=&#x27;M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z&#x27;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;span&gt; that the
coroutine can use in order to be &lt;code&gt;await&lt;&#x2F;code&gt;ed upon.&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;source rust&quot;&gt;&lt;span class=&quot;keyword other rust&quot;&gt;use&lt;&#x2F;span&gt; &lt;span class=&quot;meta path rust&quot;&gt;std&lt;span class=&quot;punctuation accessor rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta path rust&quot;&gt;future&lt;span class=&quot;punctuation accessor rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;Future&lt;span class=&quot;punctuation terminator rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;span class=&quot;keyword other rust&quot;&gt;use&lt;&#x2F;span&gt; &lt;span class=&quot;meta path rust&quot;&gt;std&lt;span class=&quot;punctuation accessor rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta path rust&quot;&gt;pin&lt;span class=&quot;punctuation accessor rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;Pin&lt;span class=&quot;punctuation terminator rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;span class=&quot;keyword other rust&quot;&gt;use&lt;&#x2F;span&gt; &lt;span class=&quot;meta path rust&quot;&gt;std&lt;span class=&quot;punctuation accessor rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta path rust&quot;&gt;task&lt;span class=&quot;punctuation accessor rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta block rust&quot;&gt;&lt;span class=&quot;punctuation section block begin rust&quot;&gt;{&lt;&#x2F;span&gt;Poll&lt;span class=&quot;punctuation separator rust&quot;&gt;,&lt;&#x2F;span&gt; Context&lt;&#x2F;span&gt;&lt;span class=&quot;meta block rust&quot;&gt;&lt;span class=&quot;punctuation section block end rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation terminator rust&quot;&gt;;&lt;&#x2F;span&gt;

&lt;span class=&quot;meta enum rust&quot;&gt;&lt;span class=&quot;storage type enum rust&quot;&gt;enum&lt;&#x2F;span&gt; &lt;span class=&quot;entity name enum rust&quot;&gt;State&lt;&#x2F;span&gt; &lt;span class=&quot;meta block rust&quot;&gt;&lt;span class=&quot;punctuation section block begin rust&quot;&gt;{&lt;&#x2F;span&gt;
    Halted&lt;span class=&quot;punctuation separator rust&quot;&gt;,&lt;&#x2F;span&gt;
    Running&lt;span class=&quot;punctuation separator rust&quot;&gt;,&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;meta block rust&quot;&gt;&lt;span class=&quot;punctuation section block end rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;

&lt;span class=&quot;meta struct rust&quot;&gt;&lt;span class=&quot;storage type struct rust&quot;&gt;struct&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;meta struct rust&quot;&gt;&lt;span class=&quot;entity name struct rust&quot;&gt;Fib&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;meta struct rust&quot;&gt;&lt;span class=&quot;meta block rust&quot;&gt;&lt;span class=&quot;punctuation section block begin rust&quot;&gt;{&lt;&#x2F;span&gt;
    &lt;span class=&quot;variable other member rust&quot;&gt;state&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator type rust&quot;&gt;:&lt;&#x2F;span&gt; State,
&lt;&#x2F;span&gt;&lt;span class=&quot;meta block rust&quot;&gt;&lt;span class=&quot;punctuation section block end rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;

&lt;span class=&quot;meta impl rust&quot;&gt;&lt;span class=&quot;storage type impl rust&quot;&gt;impl&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;meta impl rust&quot;&gt;&lt;span class=&quot;entity name impl rust&quot;&gt;Fib&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;meta impl rust&quot;&gt;&lt;span class=&quot;meta block rust&quot;&gt;&lt;span class=&quot;punctuation section block begin rust&quot;&gt;{&lt;&#x2F;span&gt;
    &lt;span class=&quot;meta function rust&quot;&gt;&lt;span class=&quot;meta function rust&quot;&gt;&lt;span class=&quot;storage type function rust&quot;&gt;fn&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;entity name function rust&quot;&gt;waiter&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta generic rust&quot;&gt;&lt;span class=&quot;punctuation definition generic begin rust&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;storage modifier lifetime rust&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation definition generic end rust&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function rust&quot;&gt;&lt;span class=&quot;meta function parameters rust&quot;&gt;&lt;span class=&quot;punctuation section parameters begin rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;keyword operator rust&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span class=&quot;storage modifier lifetime rust&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt; &lt;span class=&quot;storage modifier rust&quot;&gt;mut&lt;&#x2F;span&gt; &lt;span class=&quot;variable parameter rust&quot;&gt;self&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function rust&quot;&gt;&lt;span class=&quot;meta function parameters rust&quot;&gt;&lt;span class=&quot;punctuation section parameters end rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function rust&quot;&gt; &lt;span class=&quot;meta function return-type rust&quot;&gt;&lt;span class=&quot;punctuation separator rust&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;meta generic rust&quot;&gt;Waiter&lt;span class=&quot;punctuation definition generic begin rust&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;storage modifier lifetime rust&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation definition generic end rust&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;meta function rust&quot;&gt;&lt;span class=&quot;meta block rust&quot;&gt;&lt;span class=&quot;punctuation section block begin rust&quot;&gt;{&lt;&#x2F;span&gt;
        Waiter &lt;span class=&quot;meta block rust&quot;&gt;&lt;span class=&quot;punctuation section block begin rust&quot;&gt;{&lt;&#x2F;span&gt; fib&lt;span class=&quot;punctuation separator rust&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;variable language rust&quot;&gt;self&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;meta block rust&quot;&gt;&lt;span class=&quot;punctuation section block end rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
    &lt;&#x2F;span&gt;&lt;span class=&quot;meta block rust&quot;&gt;&lt;span class=&quot;punctuation section block end rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;meta block rust&quot;&gt;&lt;span class=&quot;punctuation section block end rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;

&lt;span class=&quot;meta struct rust&quot;&gt;&lt;span class=&quot;storage type struct rust&quot;&gt;struct&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;meta struct rust&quot;&gt;&lt;span class=&quot;meta generic rust&quot;&gt;&lt;span class=&quot;entity name struct rust&quot;&gt;Waiter&lt;&#x2F;span&gt;&lt;span class=&quot;meta generic rust&quot;&gt;&lt;span class=&quot;punctuation definition generic begin rust&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;storage modifier lifetime rust&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation definition generic end rust&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta struct rust&quot;&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;meta struct rust&quot;&gt;&lt;span class=&quot;meta block rust&quot;&gt;&lt;span class=&quot;punctuation section block begin rust&quot;&gt;{&lt;&#x2F;span&gt;
    &lt;span class=&quot;variable other member rust&quot;&gt;fib&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator type rust&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;keyword operator rust&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span class=&quot;storage modifier lifetime rust&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt; &lt;span class=&quot;storage modifier rust&quot;&gt;mut&lt;&#x2F;span&gt; Fib,
&lt;&#x2F;span&gt;&lt;span class=&quot;meta block rust&quot;&gt;&lt;span class=&quot;punctuation section block end rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;

&lt;span class=&quot;meta impl rust&quot;&gt;&lt;span class=&quot;storage type impl rust&quot;&gt;impl&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta impl rust&quot;&gt;&lt;span class=&quot;meta generic rust&quot;&gt;&lt;span class=&quot;punctuation definition generic begin rust&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;storage modifier lifetime rust&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation definition generic end rust&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta impl rust&quot;&gt; Future &lt;span class=&quot;keyword other rust&quot;&gt;for&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta impl rust&quot;&gt; &lt;span class=&quot;entity name impl rust&quot;&gt;Waiter&lt;&#x2F;span&gt;&lt;span class=&quot;meta generic rust&quot;&gt;&lt;span class=&quot;punctuation definition generic begin rust&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;storage modifier lifetime rust&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation definition generic end rust&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;meta impl rust&quot;&gt;&lt;span class=&quot;meta block rust&quot;&gt;&lt;span class=&quot;punctuation section block begin rust&quot;&gt;{&lt;&#x2F;span&gt;
    &lt;span class=&quot;storage type type rust&quot;&gt;type&lt;&#x2F;span&gt; &lt;span class=&quot;entity name type rust&quot;&gt;Output&lt;&#x2F;span&gt; &lt;span class=&quot;keyword operator assignment rust&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group begin rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group end rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation terminator rust&quot;&gt;;&lt;&#x2F;span&gt;

    &lt;span class=&quot;meta function rust&quot;&gt;&lt;span class=&quot;meta function rust&quot;&gt;&lt;span class=&quot;storage type function rust&quot;&gt;fn&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;entity name function rust&quot;&gt;poll&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function rust&quot;&gt;&lt;span class=&quot;meta function parameters rust&quot;&gt;&lt;span class=&quot;punctuation section parameters begin rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;storage modifier rust&quot;&gt;mut&lt;&#x2F;span&gt; &lt;span class=&quot;variable parameter rust&quot;&gt;self&lt;&#x2F;span&gt;: &lt;span class=&quot;meta generic rust&quot;&gt;Pin&lt;span class=&quot;punctuation definition generic begin rust&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;keyword operator rust&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span class=&quot;storage modifier rust&quot;&gt;mut&lt;&#x2F;span&gt; &lt;span class=&quot;storage type rust&quot;&gt;Self&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation definition generic end rust&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;, &lt;span class=&quot;variable parameter rust&quot;&gt;_cx&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator rust&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;keyword operator rust&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span class=&quot;storage modifier rust&quot;&gt;mut&lt;&#x2F;span&gt; Context&lt;&#x2F;span&gt;&lt;span class=&quot;meta function rust&quot;&gt;&lt;span class=&quot;meta function parameters rust&quot;&gt;&lt;span class=&quot;punctuation section parameters end rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function rust&quot;&gt; &lt;span class=&quot;meta function return-type rust&quot;&gt;&lt;span class=&quot;punctuation separator rust&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;meta generic rust&quot;&gt;Poll&lt;span class=&quot;punctuation definition generic begin rust&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta path rust&quot;&gt;&lt;span class=&quot;storage type rust&quot;&gt;&lt;span class=&quot;storage type rust&quot;&gt;Self&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation accessor rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;Output&lt;span class=&quot;punctuation definition generic end rust&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;meta function rust&quot;&gt;&lt;span class=&quot;meta block rust&quot;&gt;&lt;span class=&quot;punctuation section block begin rust&quot;&gt;{&lt;&#x2F;span&gt;
        &lt;span class=&quot;keyword control rust&quot;&gt;match&lt;&#x2F;span&gt; &lt;span class=&quot;variable language rust&quot;&gt;self&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation accessor dot rust&quot;&gt;.&lt;&#x2F;span&gt;fib&lt;span class=&quot;punctuation accessor dot rust&quot;&gt;.&lt;&#x2F;span&gt;state &lt;span class=&quot;meta block rust&quot;&gt;&lt;span class=&quot;punctuation section block begin rust&quot;&gt;{&lt;&#x2F;span&gt;
            &lt;span class=&quot;meta path rust&quot;&gt;State&lt;span class=&quot;punctuation accessor rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;Halted &lt;span class=&quot;keyword operator rust&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;meta block rust&quot;&gt;&lt;span class=&quot;punctuation section block begin rust&quot;&gt;{&lt;&#x2F;span&gt;
                &lt;span class=&quot;variable language rust&quot;&gt;self&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation accessor dot rust&quot;&gt;.&lt;&#x2F;span&gt;fib&lt;span class=&quot;punctuation accessor dot rust&quot;&gt;.&lt;&#x2F;span&gt;state &lt;span class=&quot;keyword operator assignment rust&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;meta path rust&quot;&gt;State&lt;span class=&quot;punctuation accessor rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;Running&lt;span class=&quot;punctuation terminator rust&quot;&gt;;&lt;&#x2F;span&gt;
                &lt;span class=&quot;meta path rust&quot;&gt;Poll&lt;span class=&quot;punctuation accessor rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;Ready&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group begin rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group begin rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group end rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group end rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
            &lt;&#x2F;span&gt;&lt;span class=&quot;meta block rust&quot;&gt;&lt;span class=&quot;punctuation section block end rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
            &lt;span class=&quot;meta path rust&quot;&gt;State&lt;span class=&quot;punctuation accessor rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;Running &lt;span class=&quot;keyword operator rust&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;meta block rust&quot;&gt;&lt;span class=&quot;punctuation section block begin rust&quot;&gt;{&lt;&#x2F;span&gt;
                &lt;span class=&quot;variable language rust&quot;&gt;self&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation accessor dot rust&quot;&gt;.&lt;&#x2F;span&gt;fib&lt;span class=&quot;punctuation accessor dot rust&quot;&gt;.&lt;&#x2F;span&gt;state &lt;span class=&quot;keyword operator assignment rust&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;meta path rust&quot;&gt;State&lt;span class=&quot;punctuation accessor rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;Halted&lt;span class=&quot;punctuation terminator rust&quot;&gt;;&lt;&#x2F;span&gt;
                &lt;span class=&quot;meta path rust&quot;&gt;Poll&lt;span class=&quot;punctuation accessor rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;Pending
            &lt;&#x2F;span&gt;&lt;span class=&quot;meta block rust&quot;&gt;&lt;span class=&quot;punctuation section block end rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
        &lt;&#x2F;span&gt;&lt;span class=&quot;meta block rust&quot;&gt;&lt;span class=&quot;punctuation section block end rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
    &lt;&#x2F;span&gt;&lt;span class=&quot;meta block rust&quot;&gt;&lt;span class=&quot;punctuation section block end rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;meta block rust&quot;&gt;&lt;span class=&quot;punctuation section block end rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;&lt;h2 id=&quot;executor&quot;&gt;Executor&lt;&#x2F;h2&gt;
&lt;p&gt;Our executor keeps a vector of uncompleted futures, where the state of each
future is located on the heap. As a very basic executor, it only supports
adding futures to it before actual execution takes place and not afterward.
The &lt;code&gt;push&lt;&#x2F;code&gt; method adds a closure to the list of futures, and the &lt;code&gt;run&lt;&#x2F;code&gt; method
performs interlaced execution of futures until all of them complete.&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;source rust&quot;&gt;&lt;span class=&quot;keyword other rust&quot;&gt;use&lt;&#x2F;span&gt; &lt;span class=&quot;meta path rust&quot;&gt;std&lt;span class=&quot;punctuation accessor rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta path rust&quot;&gt;collections&lt;span class=&quot;punctuation accessor rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;VecDeque&lt;span class=&quot;punctuation terminator rust&quot;&gt;;&lt;&#x2F;span&gt;

&lt;span class=&quot;meta struct rust&quot;&gt;&lt;span class=&quot;storage type struct rust&quot;&gt;struct&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;meta struct rust&quot;&gt;&lt;span class=&quot;entity name struct rust&quot;&gt;Executor&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;meta struct rust&quot;&gt;&lt;span class=&quot;meta block rust&quot;&gt;&lt;span class=&quot;punctuation section block begin rust&quot;&gt;{&lt;&#x2F;span&gt;
    &lt;span class=&quot;variable other member rust&quot;&gt;fibs&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator type rust&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;meta generic rust&quot;&gt;VecDeque&lt;span class=&quot;punctuation definition generic begin rust&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta generic rust&quot;&gt;Pin&lt;span class=&quot;punctuation definition generic begin rust&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta generic rust&quot;&gt;&lt;span class=&quot;support type rust&quot;&gt;Box&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation definition generic begin rust&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;dyn &lt;span class=&quot;meta generic rust&quot;&gt;Future&lt;span class=&quot;punctuation definition generic begin rust&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;Output=&lt;span class=&quot;punctuation section group begin rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section group end rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation definition generic end rust&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation definition generic end rust&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation definition generic end rust&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation definition generic end rust&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;,
&lt;&#x2F;span&gt;&lt;span class=&quot;meta block rust&quot;&gt;&lt;span class=&quot;punctuation section block end rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;

&lt;span class=&quot;meta impl rust&quot;&gt;&lt;span class=&quot;storage type impl rust&quot;&gt;impl&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;meta impl rust&quot;&gt;&lt;span class=&quot;entity name impl rust&quot;&gt;Executor&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;meta impl rust&quot;&gt;&lt;span class=&quot;meta block rust&quot;&gt;&lt;span class=&quot;punctuation section block begin rust&quot;&gt;{&lt;&#x2F;span&gt;
    &lt;span class=&quot;meta function rust&quot;&gt;&lt;span class=&quot;meta function rust&quot;&gt;&lt;span class=&quot;storage type function rust&quot;&gt;fn&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;entity name function rust&quot;&gt;new&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function rust&quot;&gt;&lt;span class=&quot;meta function parameters rust&quot;&gt;&lt;span class=&quot;punctuation section parameters begin rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function rust&quot;&gt;&lt;span class=&quot;meta function parameters rust&quot;&gt;&lt;span class=&quot;punctuation section parameters end rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function rust&quot;&gt; &lt;span class=&quot;meta function return-type rust&quot;&gt;&lt;span class=&quot;punctuation separator rust&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;storage type rust&quot;&gt;Self&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;meta function rust&quot;&gt;&lt;span class=&quot;meta block rust&quot;&gt;&lt;span class=&quot;punctuation section block begin rust&quot;&gt;{&lt;&#x2F;span&gt;
        Executor &lt;span class=&quot;meta block rust&quot;&gt;&lt;span class=&quot;punctuation section block begin rust&quot;&gt;{&lt;&#x2F;span&gt;
            fibs&lt;span class=&quot;punctuation separator rust&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;meta path rust&quot;&gt;VecDeque&lt;span class=&quot;punctuation accessor rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;new&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group begin rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group end rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator rust&quot;&gt;,&lt;&#x2F;span&gt;
        &lt;&#x2F;span&gt;&lt;span class=&quot;meta block rust&quot;&gt;&lt;span class=&quot;punctuation section block end rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
    &lt;&#x2F;span&gt;&lt;span class=&quot;meta block rust&quot;&gt;&lt;span class=&quot;punctuation section block end rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;

    &lt;span class=&quot;meta function rust&quot;&gt;&lt;span class=&quot;meta function rust&quot;&gt;&lt;span class=&quot;storage type function rust&quot;&gt;fn&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;entity name function rust&quot;&gt;push&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta generic rust&quot;&gt;&lt;span class=&quot;punctuation definition generic begin rust&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;C, F&lt;span class=&quot;punctuation definition generic end rust&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function rust&quot;&gt;&lt;span class=&quot;meta function parameters rust&quot;&gt;&lt;span class=&quot;punctuation section parameters begin rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;keyword operator rust&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span class=&quot;storage modifier rust&quot;&gt;mut&lt;&#x2F;span&gt; &lt;span class=&quot;variable parameter rust&quot;&gt;self&lt;&#x2F;span&gt;, &lt;span class=&quot;variable parameter rust&quot;&gt;closure&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator rust&quot;&gt;:&lt;&#x2F;span&gt; C&lt;&#x2F;span&gt;&lt;span class=&quot;meta function rust&quot;&gt;&lt;span class=&quot;meta function parameters rust&quot;&gt;&lt;span class=&quot;punctuation section parameters end rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function rust&quot;&gt;
    &lt;&#x2F;span&gt;&lt;span class=&quot;meta function rust&quot;&gt;&lt;span class=&quot;keyword other rust&quot;&gt;where&lt;&#x2F;span&gt;
        F&lt;span class=&quot;punctuation separator rust&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;meta generic rust&quot;&gt;Future&lt;span class=&quot;punctuation definition generic begin rust&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;Output=&lt;span class=&quot;punctuation section group begin rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section group end rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation definition generic end rust&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; + &lt;span class=&quot;storage modifier lifetime rust&quot;&gt;&amp;#39;static&lt;&#x2F;span&gt;,
        C&lt;span class=&quot;punctuation separator rust&quot;&gt;:&lt;&#x2F;span&gt; FnOnce&lt;span class=&quot;punctuation section group begin rust&quot;&gt;(&lt;&#x2F;span&gt;Fib&lt;span class=&quot;punctuation section group end rust&quot;&gt;)&lt;&#x2F;span&gt; -&amp;gt; F,
    &lt;&#x2F;span&gt;&lt;span class=&quot;meta function rust&quot;&gt;&lt;span class=&quot;meta block rust&quot;&gt;&lt;span class=&quot;punctuation section block begin rust&quot;&gt;{&lt;&#x2F;span&gt;
        &lt;span class=&quot;storage type rust&quot;&gt;let&lt;&#x2F;span&gt; fib &lt;span class=&quot;keyword operator assignment rust&quot;&gt;=&lt;&#x2F;span&gt; Fib &lt;span class=&quot;meta block rust&quot;&gt;&lt;span class=&quot;punctuation section block begin rust&quot;&gt;{&lt;&#x2F;span&gt; state&lt;span class=&quot;punctuation separator rust&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;meta path rust&quot;&gt;State&lt;span class=&quot;punctuation accessor rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;Running &lt;&#x2F;span&gt;&lt;span class=&quot;meta block rust&quot;&gt;&lt;span class=&quot;punctuation section block end rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation terminator rust&quot;&gt;;&lt;&#x2F;span&gt;
        &lt;span class=&quot;variable language rust&quot;&gt;self&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation accessor dot rust&quot;&gt;.&lt;&#x2F;span&gt;fibs&lt;span class=&quot;punctuation accessor dot rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;support function rust&quot;&gt;push_back&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group begin rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;support type rust&quot;&gt;Box&lt;&#x2F;span&gt;&lt;span class=&quot;meta path rust&quot;&gt;&lt;span class=&quot;punctuation accessor rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;pin&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group begin rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;support function rust&quot;&gt;closure&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group begin rust&quot;&gt;(&lt;&#x2F;span&gt;fib&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group end rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group end rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group end rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation terminator rust&quot;&gt;;&lt;&#x2F;span&gt;
    &lt;&#x2F;span&gt;&lt;span class=&quot;meta block rust&quot;&gt;&lt;span class=&quot;punctuation section block end rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;

    &lt;span class=&quot;meta function rust&quot;&gt;&lt;span class=&quot;meta function rust&quot;&gt;&lt;span class=&quot;storage type function rust&quot;&gt;fn&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;entity name function rust&quot;&gt;run&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function rust&quot;&gt;&lt;span class=&quot;meta function parameters rust&quot;&gt;&lt;span class=&quot;punctuation section parameters begin rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;keyword operator rust&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span class=&quot;storage modifier rust&quot;&gt;mut&lt;&#x2F;span&gt; &lt;span class=&quot;variable parameter rust&quot;&gt;self&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function rust&quot;&gt;&lt;span class=&quot;meta function parameters rust&quot;&gt;&lt;span class=&quot;punctuation section parameters end rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function rust&quot;&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;meta function rust&quot;&gt;&lt;span class=&quot;meta block rust&quot;&gt;&lt;span class=&quot;punctuation section block begin rust&quot;&gt;{&lt;&#x2F;span&gt;
        &lt;span class=&quot;storage type rust&quot;&gt;let&lt;&#x2F;span&gt; waker &lt;span class=&quot;keyword operator assignment rust&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;meta path rust&quot;&gt;waker&lt;span class=&quot;punctuation accessor rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;create&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group begin rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group end rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation terminator rust&quot;&gt;;&lt;&#x2F;span&gt;
        &lt;span class=&quot;storage type rust&quot;&gt;let&lt;&#x2F;span&gt; &lt;span class=&quot;storage modifier rust&quot;&gt;mut&lt;&#x2F;span&gt; context &lt;span class=&quot;keyword operator assignment rust&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;meta path rust&quot;&gt;Context&lt;span class=&quot;punctuation accessor rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;from_waker&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group begin rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;keyword operator bitwise rust&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;waker&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group end rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation terminator rust&quot;&gt;;&lt;&#x2F;span&gt;

        &lt;span class=&quot;keyword control rust&quot;&gt;while&lt;&#x2F;span&gt; &lt;span class=&quot;storage type rust&quot;&gt;let&lt;&#x2F;span&gt; &lt;span class=&quot;support type rust&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group begin rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;storage modifier rust&quot;&gt;mut&lt;&#x2F;span&gt; fib&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group end rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;keyword operator assignment rust&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;variable language rust&quot;&gt;self&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation accessor dot rust&quot;&gt;.&lt;&#x2F;span&gt;fibs&lt;span class=&quot;punctuation accessor dot rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;support function rust&quot;&gt;pop_front&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group begin rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group end rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;meta block rust&quot;&gt;&lt;span class=&quot;punctuation section block begin rust&quot;&gt;{&lt;&#x2F;span&gt;
            &lt;span class=&quot;keyword control rust&quot;&gt;match&lt;&#x2F;span&gt; fib&lt;span class=&quot;punctuation accessor dot rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;support function rust&quot;&gt;as_mut&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group begin rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group end rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation accessor dot rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;support function rust&quot;&gt;poll&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group begin rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;keyword operator bitwise rust&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span class=&quot;storage modifier rust&quot;&gt;mut&lt;&#x2F;span&gt; context&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group end rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;meta block rust&quot;&gt;&lt;span class=&quot;punctuation section block begin rust&quot;&gt;{&lt;&#x2F;span&gt;
                &lt;span class=&quot;meta path rust&quot;&gt;Poll&lt;span class=&quot;punctuation accessor rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;Pending &lt;span class=&quot;keyword operator rust&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;meta block rust&quot;&gt;&lt;span class=&quot;punctuation section block begin rust&quot;&gt;{&lt;&#x2F;span&gt;
                    &lt;span class=&quot;variable language rust&quot;&gt;self&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation accessor dot rust&quot;&gt;.&lt;&#x2F;span&gt;fibs&lt;span class=&quot;punctuation accessor dot rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;support function rust&quot;&gt;push_back&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group begin rust&quot;&gt;(&lt;&#x2F;span&gt;fib&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group end rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation terminator rust&quot;&gt;;&lt;&#x2F;span&gt;
                &lt;&#x2F;span&gt;&lt;span class=&quot;meta block rust&quot;&gt;&lt;span class=&quot;punctuation section block end rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator rust&quot;&gt;,&lt;&#x2F;span&gt;
                &lt;span class=&quot;meta path rust&quot;&gt;Poll&lt;span class=&quot;punctuation accessor rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;Ready&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group begin rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group begin rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group end rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group end rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;keyword operator rust&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;meta block rust&quot;&gt;&lt;span class=&quot;punctuation section block begin rust&quot;&gt;{&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta block rust&quot;&gt;&lt;span class=&quot;punctuation section block end rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator rust&quot;&gt;,&lt;&#x2F;span&gt;
            &lt;&#x2F;span&gt;&lt;span class=&quot;meta block rust&quot;&gt;&lt;span class=&quot;punctuation section block end rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
        &lt;&#x2F;span&gt;&lt;span class=&quot;meta block rust&quot;&gt;&lt;span class=&quot;punctuation section block end rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
    &lt;&#x2F;span&gt;&lt;span class=&quot;meta block rust&quot;&gt;&lt;span class=&quot;punctuation section block end rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;meta block rust&quot;&gt;&lt;span class=&quot;punctuation section block end rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;&lt;h2 id=&quot;null-waker&quot;&gt;Null Waker&lt;&#x2F;h2&gt;
&lt;p&gt;For the executor implementation above, we need a null
&lt;span class=&#x27;external-link-outer&#x27;&gt;&lt;a class=&quot;external-link&quot;rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;futures&#x2F;0.3.1&#x2F;futures&#x2F;task&#x2F;struct.Waker.html&quot;&gt;Waker&lt;span class=&#x27;external-link-no-underline&#x27;&gt;&lt;&#x2F;span&gt;&lt;svg width=&#x27;13.5&#x27; height=&#x27;13.5&#x27; aria-hidden=&#x27;true&#x27; viewBox=&#x27;0 0 24 24&#x27; class=&#x27;iconExternalLink_wgqa&#x27;&gt;&lt;path fill=&#x27;currentColor&#x27; d=&#x27;M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z&#x27;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;span&gt;, similar
to the one used in &lt;span class=&#x27;external-link-outer&#x27;&gt;&lt;a class=&quot;external-link&quot;rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;whatisaphone&#x2F;genawaiter&quot;&gt;genawaiter&lt;span class=&#x27;external-link-no-underline&#x27;&gt;&lt;&#x2F;span&gt;&lt;svg width=&#x27;13.5&#x27; height=&#x27;13.5&#x27; aria-hidden=&#x27;true&#x27; viewBox=&#x27;0 0 24 24&#x27; class=&#x27;iconExternalLink_wgqa&#x27;&gt;&lt;path fill=&#x27;currentColor&#x27; d=&#x27;M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z&#x27;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;span&gt;
(&lt;span class=&#x27;external-link-outer&#x27;&gt;&lt;a class=&quot;external-link&quot;rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;whatisaphone&#x2F;genawaiter&#x2F;blob&#x2F;master&#x2F;src&#x2F;waker.rs&quot;&gt;link&lt;span class=&#x27;external-link-no-underline&#x27;&gt;&lt;&#x2F;span&gt;&lt;svg width=&#x27;13.5&#x27; height=&#x27;13.5&#x27; aria-hidden=&#x27;true&#x27; viewBox=&#x27;0 0 24 24&#x27; class=&#x27;iconExternalLink_wgqa&#x27;&gt;&lt;path fill=&#x27;currentColor&#x27; d=&#x27;M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z&#x27;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;span&gt;).&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;source rust&quot;&gt;&lt;span class=&quot;keyword other rust&quot;&gt;use&lt;&#x2F;span&gt; &lt;span class=&quot;meta path rust&quot;&gt;std&lt;span class=&quot;punctuation accessor rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta path rust&quot;&gt;task&lt;span class=&quot;punctuation accessor rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta block rust&quot;&gt;&lt;span class=&quot;punctuation section block begin rust&quot;&gt;{&lt;&#x2F;span&gt;RawWaker&lt;span class=&quot;punctuation separator rust&quot;&gt;,&lt;&#x2F;span&gt; RawWakerVTable&lt;span class=&quot;punctuation separator rust&quot;&gt;,&lt;&#x2F;span&gt; Waker&lt;&#x2F;span&gt;&lt;span class=&quot;meta block rust&quot;&gt;&lt;span class=&quot;punctuation section block end rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator rust&quot;&gt;,&lt;&#x2F;span&gt;

&lt;span class=&quot;meta function rust&quot;&gt;&lt;span class=&quot;meta function rust&quot;&gt;&lt;span class=&quot;storage modifier rust&quot;&gt;pub&lt;&#x2F;span&gt; &lt;span class=&quot;storage type function rust&quot;&gt;fn&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;entity name function rust&quot;&gt;create&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function rust&quot;&gt;&lt;span class=&quot;meta function parameters rust&quot;&gt;&lt;span class=&quot;punctuation section parameters begin rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function rust&quot;&gt;&lt;span class=&quot;meta function parameters rust&quot;&gt;&lt;span class=&quot;punctuation section parameters end rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function rust&quot;&gt; &lt;span class=&quot;meta function return-type rust&quot;&gt;&lt;span class=&quot;punctuation separator rust&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; Waker&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;meta function rust&quot;&gt;&lt;span class=&quot;meta block rust&quot;&gt;&lt;span class=&quot;punctuation section block begin rust&quot;&gt;{&lt;&#x2F;span&gt;
    &lt;span class=&quot;comment line double-slash rust&quot;&gt;&lt;span class=&quot;punctuation definition comment rust&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; Safety: The waker points to a vtable with functions that do nothing. Doing
&lt;&#x2F;span&gt;    &lt;span class=&quot;comment line double-slash rust&quot;&gt;&lt;span class=&quot;punctuation definition comment rust&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; nothing is memory-safe.
&lt;&#x2F;span&gt;    &lt;span class=&quot;storage modifier rust&quot;&gt;unsafe&lt;&#x2F;span&gt; &lt;span class=&quot;meta block rust&quot;&gt;&lt;span class=&quot;punctuation section block begin rust&quot;&gt;{&lt;&#x2F;span&gt; &lt;span class=&quot;meta path rust&quot;&gt;Waker&lt;span class=&quot;punctuation accessor rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;from_raw&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group begin rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;constant other rust&quot;&gt;RAW_WAKER&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group end rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;meta block rust&quot;&gt;&lt;span class=&quot;punctuation section block end rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;meta block rust&quot;&gt;&lt;span class=&quot;punctuation section block end rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;

&lt;span class=&quot;storage type rust&quot;&gt;const&lt;&#x2F;span&gt; &lt;span class=&quot;constant other rust&quot;&gt;RAW_WAKER&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator rust&quot;&gt;:&lt;&#x2F;span&gt; RawWaker &lt;span class=&quot;keyword operator assignment rust&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;meta path rust&quot;&gt;RawWaker&lt;span class=&quot;punctuation accessor rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;new&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group begin rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;meta path rust&quot;&gt;std&lt;span class=&quot;punctuation accessor rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta path rust&quot;&gt;ptr&lt;span class=&quot;punctuation accessor rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;null&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group begin rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group end rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;keyword operator bitwise rust&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span class=&quot;constant other rust&quot;&gt;VTABLE&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group end rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation terminator rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;span class=&quot;storage type rust&quot;&gt;const&lt;&#x2F;span&gt; &lt;span class=&quot;constant other rust&quot;&gt;VTABLE&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator rust&quot;&gt;:&lt;&#x2F;span&gt; RawWakerVTable &lt;span class=&quot;keyword operator assignment rust&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;meta path rust&quot;&gt;RawWakerVTable&lt;span class=&quot;punctuation accessor rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;new&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group begin rust&quot;&gt;(&lt;&#x2F;span&gt;clone&lt;span class=&quot;punctuation separator rust&quot;&gt;,&lt;&#x2F;span&gt; wake&lt;span class=&quot;punctuation separator rust&quot;&gt;,&lt;&#x2F;span&gt; wake_by_ref&lt;span class=&quot;punctuation separator rust&quot;&gt;,&lt;&#x2F;span&gt; drop&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group end rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation terminator rust&quot;&gt;;&lt;&#x2F;span&gt;

&lt;span class=&quot;storage modifier rust&quot;&gt;unsafe&lt;&#x2F;span&gt; &lt;span class=&quot;meta function rust&quot;&gt;&lt;span class=&quot;meta function rust&quot;&gt;&lt;span class=&quot;storage type function rust&quot;&gt;fn&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;entity name function rust&quot;&gt;clone&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function rust&quot;&gt;&lt;span class=&quot;meta function parameters rust&quot;&gt;&lt;span class=&quot;punctuation section parameters begin rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;keyword operator rust&quot;&gt;_&lt;&#x2F;span&gt;: &lt;span class=&quot;storage modifier rust&quot;&gt;*const&lt;&#x2F;span&gt; &lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group begin rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group end rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function rust&quot;&gt;&lt;span class=&quot;meta function parameters rust&quot;&gt;&lt;span class=&quot;punctuation section parameters end rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function rust&quot;&gt; &lt;span class=&quot;meta function return-type rust&quot;&gt;&lt;span class=&quot;punctuation separator rust&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; RawWaker&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;meta function rust&quot;&gt;&lt;span class=&quot;meta block rust&quot;&gt;&lt;span class=&quot;punctuation section block begin rust&quot;&gt;{&lt;&#x2F;span&gt; &lt;span class=&quot;constant other rust&quot;&gt;RAW_WAKER&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;meta block rust&quot;&gt;&lt;span class=&quot;punctuation section block end rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;storage modifier rust&quot;&gt;unsafe&lt;&#x2F;span&gt; &lt;span class=&quot;meta function rust&quot;&gt;&lt;span class=&quot;meta function rust&quot;&gt;&lt;span class=&quot;storage type function rust&quot;&gt;fn&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;entity name function rust&quot;&gt;wake&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function rust&quot;&gt;&lt;span class=&quot;meta function parameters rust&quot;&gt;&lt;span class=&quot;punctuation section parameters begin rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;keyword operator rust&quot;&gt;_&lt;&#x2F;span&gt;: &lt;span class=&quot;storage modifier rust&quot;&gt;*const&lt;&#x2F;span&gt; &lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group begin rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group end rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function rust&quot;&gt;&lt;span class=&quot;meta function parameters rust&quot;&gt;&lt;span class=&quot;punctuation section parameters end rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function rust&quot;&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;meta function rust&quot;&gt;&lt;span class=&quot;meta block rust&quot;&gt;&lt;span class=&quot;punctuation section block begin rust&quot;&gt;{&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;meta block rust&quot;&gt;&lt;span class=&quot;punctuation section block end rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;storage modifier rust&quot;&gt;unsafe&lt;&#x2F;span&gt; &lt;span class=&quot;meta function rust&quot;&gt;&lt;span class=&quot;meta function rust&quot;&gt;&lt;span class=&quot;storage type function rust&quot;&gt;fn&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;entity name function rust&quot;&gt;wake_by_ref&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function rust&quot;&gt;&lt;span class=&quot;meta function parameters rust&quot;&gt;&lt;span class=&quot;punctuation section parameters begin rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;keyword operator rust&quot;&gt;_&lt;&#x2F;span&gt;: &lt;span class=&quot;storage modifier rust&quot;&gt;*const&lt;&#x2F;span&gt; &lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group begin rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group end rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function rust&quot;&gt;&lt;span class=&quot;meta function parameters rust&quot;&gt;&lt;span class=&quot;punctuation section parameters end rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function rust&quot;&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;meta function rust&quot;&gt;&lt;span class=&quot;meta block rust&quot;&gt;&lt;span class=&quot;punctuation section block begin rust&quot;&gt;{&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;meta block rust&quot;&gt;&lt;span class=&quot;punctuation section block end rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;storage modifier rust&quot;&gt;unsafe&lt;&#x2F;span&gt; &lt;span class=&quot;meta function rust&quot;&gt;&lt;span class=&quot;meta function rust&quot;&gt;&lt;span class=&quot;storage type function rust&quot;&gt;fn&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;entity name function rust&quot;&gt;drop&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function rust&quot;&gt;&lt;span class=&quot;meta function parameters rust&quot;&gt;&lt;span class=&quot;punctuation section parameters begin rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;keyword operator rust&quot;&gt;_&lt;&#x2F;span&gt;: &lt;span class=&quot;storage modifier rust&quot;&gt;*const&lt;&#x2F;span&gt; &lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group begin rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group end rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function rust&quot;&gt;&lt;span class=&quot;meta function parameters rust&quot;&gt;&lt;span class=&quot;punctuation section parameters end rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function rust&quot;&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;meta function rust&quot;&gt;&lt;span class=&quot;meta block rust&quot;&gt;&lt;span class=&quot;punctuation section block begin rust&quot;&gt;{&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;meta block rust&quot;&gt;&lt;span class=&quot;punctuation section block end rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;&lt;h2 id=&quot;giving-it-a-go&quot;&gt;Giving it a go&lt;&#x2F;h2&gt;
&lt;p&gt;We can test the library using a program such as the following:&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;source rust&quot;&gt;&lt;span class=&quot;meta function rust&quot;&gt;&lt;span class=&quot;meta function rust&quot;&gt;&lt;span class=&quot;storage modifier rust&quot;&gt;pub&lt;&#x2F;span&gt; &lt;span class=&quot;storage type function rust&quot;&gt;fn&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;entity name function rust&quot;&gt;main&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function rust&quot;&gt;&lt;span class=&quot;meta function parameters rust&quot;&gt;&lt;span class=&quot;punctuation section parameters begin rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function rust&quot;&gt;&lt;span class=&quot;meta function parameters rust&quot;&gt;&lt;span class=&quot;punctuation section parameters end rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function rust&quot;&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;meta function rust&quot;&gt;&lt;span class=&quot;meta block rust&quot;&gt;&lt;span class=&quot;punctuation section block begin rust&quot;&gt;{&lt;&#x2F;span&gt;
    &lt;span class=&quot;storage type rust&quot;&gt;let&lt;&#x2F;span&gt; &lt;span class=&quot;storage modifier rust&quot;&gt;mut&lt;&#x2F;span&gt; exec &lt;span class=&quot;keyword operator assignment rust&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;meta path rust&quot;&gt;Executor&lt;span class=&quot;punctuation accessor rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;new&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group begin rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group end rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation terminator rust&quot;&gt;;&lt;&#x2F;span&gt;

    &lt;span class=&quot;keyword control rust&quot;&gt;for&lt;&#x2F;span&gt; instance &lt;span class=&quot;keyword operator rust&quot;&gt;in&lt;&#x2F;span&gt; &lt;span class=&quot;constant numeric integer decimal rust&quot;&gt;1&lt;&#x2F;span&gt;&lt;span class=&quot;keyword operator range rust&quot;&gt;..&lt;&#x2F;span&gt;&lt;span class=&quot;keyword operator assignment rust&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;constant numeric integer decimal rust&quot;&gt;3&lt;&#x2F;span&gt; &lt;span class=&quot;meta block rust&quot;&gt;&lt;span class=&quot;punctuation section block begin rust&quot;&gt;{&lt;&#x2F;span&gt;
        exec&lt;span class=&quot;punctuation accessor dot rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;support function rust&quot;&gt;push&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group begin rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;storage modifier rust&quot;&gt;move&lt;&#x2F;span&gt; &lt;span class=&quot;keyword operator bitwise rust&quot;&gt;|&lt;&#x2F;span&gt;&lt;span class=&quot;storage modifier rust&quot;&gt;mut&lt;&#x2F;span&gt; fib&lt;span class=&quot;keyword operator bitwise rust&quot;&gt;|&lt;&#x2F;span&gt; async &lt;span class=&quot;storage modifier rust&quot;&gt;move&lt;&#x2F;span&gt; &lt;span class=&quot;meta block rust&quot;&gt;&lt;span class=&quot;punctuation section block begin rust&quot;&gt;{&lt;&#x2F;span&gt;
            &lt;span class=&quot;support macro rust&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group begin rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;string quoted double rust&quot;&gt;&lt;span class=&quot;punctuation definition string begin rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span class=&quot;constant other placeholder rust&quot;&gt;{}&lt;&#x2F;span&gt; A&lt;span class=&quot;punctuation definition string end rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation separator rust&quot;&gt;,&lt;&#x2F;span&gt; instance&lt;span class=&quot;punctuation section group end rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation terminator rust&quot;&gt;;&lt;&#x2F;span&gt;
            fib&lt;span class=&quot;punctuation accessor dot rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;support function rust&quot;&gt;waiter&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group begin rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group end rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation accessor dot rust&quot;&gt;.&lt;&#x2F;span&gt;await&lt;span class=&quot;punctuation terminator rust&quot;&gt;;&lt;&#x2F;span&gt;
            &lt;span class=&quot;support macro rust&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group begin rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;string quoted double rust&quot;&gt;&lt;span class=&quot;punctuation definition string begin rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span class=&quot;constant other placeholder rust&quot;&gt;{}&lt;&#x2F;span&gt; B&lt;span class=&quot;punctuation definition string end rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation separator rust&quot;&gt;,&lt;&#x2F;span&gt; instance&lt;span class=&quot;punctuation section group end rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation terminator rust&quot;&gt;;&lt;&#x2F;span&gt;
            fib&lt;span class=&quot;punctuation accessor dot rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;support function rust&quot;&gt;waiter&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group begin rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group end rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation accessor dot rust&quot;&gt;.&lt;&#x2F;span&gt;await&lt;span class=&quot;punctuation terminator rust&quot;&gt;;&lt;&#x2F;span&gt;
            &lt;span class=&quot;support macro rust&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group begin rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;string quoted double rust&quot;&gt;&lt;span class=&quot;punctuation definition string begin rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span class=&quot;constant other placeholder rust&quot;&gt;{}&lt;&#x2F;span&gt; C&lt;span class=&quot;punctuation definition string end rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation separator rust&quot;&gt;,&lt;&#x2F;span&gt; instance&lt;span class=&quot;punctuation section group end rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation terminator rust&quot;&gt;;&lt;&#x2F;span&gt;
            fib&lt;span class=&quot;punctuation accessor dot rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;support function rust&quot;&gt;waiter&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group begin rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group end rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation accessor dot rust&quot;&gt;.&lt;&#x2F;span&gt;await&lt;span class=&quot;punctuation terminator rust&quot;&gt;;&lt;&#x2F;span&gt;
            &lt;span class=&quot;support macro rust&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group begin rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;string quoted double rust&quot;&gt;&lt;span class=&quot;punctuation definition string begin rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span class=&quot;constant other placeholder rust&quot;&gt;{}&lt;&#x2F;span&gt; D&lt;span class=&quot;punctuation definition string end rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation separator rust&quot;&gt;,&lt;&#x2F;span&gt; instance&lt;span class=&quot;punctuation section group end rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation terminator rust&quot;&gt;;&lt;&#x2F;span&gt;
        &lt;&#x2F;span&gt;&lt;span class=&quot;meta block rust&quot;&gt;&lt;span class=&quot;punctuation section block end rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group end rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation terminator rust&quot;&gt;;&lt;&#x2F;span&gt;
    &lt;&#x2F;span&gt;&lt;span class=&quot;meta block rust&quot;&gt;&lt;span class=&quot;punctuation section block end rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;

    &lt;span class=&quot;support macro rust&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group begin rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;string quoted double rust&quot;&gt;&lt;span class=&quot;punctuation definition string begin rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Running&lt;span class=&quot;punctuation definition string end rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group end rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation terminator rust&quot;&gt;;&lt;&#x2F;span&gt;
    exec&lt;span class=&quot;punctuation accessor dot rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;support function rust&quot;&gt;run&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group begin rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group end rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation terminator rust&quot;&gt;;&lt;&#x2F;span&gt;
    &lt;span class=&quot;support macro rust&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group begin rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;string quoted double rust&quot;&gt;&lt;span class=&quot;punctuation definition string begin rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Done&lt;span class=&quot;punctuation definition string end rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group end rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation terminator rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;meta block rust&quot;&gt;&lt;span class=&quot;punctuation section block end rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;p&gt;The output is as follows:&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;text plain&quot;&gt;Running
1 A
2 A
3 A
1 B
2 B
3 B
1 C
2 C
3 C
1 D
2 D
3 D
Done
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;&lt;h2 id=&quot;performance&quot;&gt;Performance&lt;&#x2F;h2&gt;
&lt;p&gt;Timing the following program compiled with &lt;code&gt;lto = true&lt;&#x2F;code&gt;, I have seen that it
takes about 5 nanoseconds for each iteration of the internal loop, on an Intel
i7-7820X CPU.&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;source rust&quot;&gt;&lt;span class=&quot;meta function rust&quot;&gt;&lt;span class=&quot;meta function rust&quot;&gt;&lt;span class=&quot;storage modifier rust&quot;&gt;pub&lt;&#x2F;span&gt; &lt;span class=&quot;storage type function rust&quot;&gt;fn&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;entity name function rust&quot;&gt;bench&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function rust&quot;&gt;&lt;span class=&quot;meta function parameters rust&quot;&gt;&lt;span class=&quot;punctuation section parameters begin rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function rust&quot;&gt;&lt;span class=&quot;meta function parameters rust&quot;&gt;&lt;span class=&quot;punctuation section parameters end rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function rust&quot;&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;meta function rust&quot;&gt;&lt;span class=&quot;meta block rust&quot;&gt;&lt;span class=&quot;punctuation section block begin rust&quot;&gt;{&lt;&#x2F;span&gt;
    &lt;span class=&quot;storage type rust&quot;&gt;let&lt;&#x2F;span&gt; &lt;span class=&quot;storage modifier rust&quot;&gt;mut&lt;&#x2F;span&gt; exec &lt;span class=&quot;keyword operator assignment rust&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;meta path rust&quot;&gt;Executor&lt;span class=&quot;punctuation accessor rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;new&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group begin rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group end rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation terminator rust&quot;&gt;;&lt;&#x2F;span&gt;

    &lt;span class=&quot;keyword control rust&quot;&gt;for&lt;&#x2F;span&gt; &lt;span class=&quot;keyword operator rust&quot;&gt;_&lt;&#x2F;span&gt; &lt;span class=&quot;keyword operator rust&quot;&gt;in&lt;&#x2F;span&gt; &lt;span class=&quot;constant numeric integer decimal rust&quot;&gt;1&lt;&#x2F;span&gt;&lt;span class=&quot;keyword operator range rust&quot;&gt;..&lt;&#x2F;span&gt;&lt;span class=&quot;keyword operator assignment rust&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;constant numeric integer decimal rust&quot;&gt;2&lt;&#x2F;span&gt; &lt;span class=&quot;meta block rust&quot;&gt;&lt;span class=&quot;punctuation section block begin rust&quot;&gt;{&lt;&#x2F;span&gt;
        exec&lt;span class=&quot;punctuation accessor dot rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;support function rust&quot;&gt;push&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group begin rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;storage modifier rust&quot;&gt;move&lt;&#x2F;span&gt; &lt;span class=&quot;keyword operator bitwise rust&quot;&gt;|&lt;&#x2F;span&gt;&lt;span class=&quot;storage modifier rust&quot;&gt;mut&lt;&#x2F;span&gt; fib&lt;span class=&quot;keyword operator bitwise rust&quot;&gt;|&lt;&#x2F;span&gt; async &lt;span class=&quot;storage modifier rust&quot;&gt;move&lt;&#x2F;span&gt; &lt;span class=&quot;meta block rust&quot;&gt;&lt;span class=&quot;punctuation section block begin rust&quot;&gt;{&lt;&#x2F;span&gt;
            &lt;span class=&quot;keyword control rust&quot;&gt;for&lt;&#x2F;span&gt; &lt;span class=&quot;keyword operator rust&quot;&gt;_&lt;&#x2F;span&gt; &lt;span class=&quot;keyword operator rust&quot;&gt;in&lt;&#x2F;span&gt; &lt;span class=&quot;constant numeric integer decimal rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;keyword operator range rust&quot;&gt;..&lt;&#x2F;span&gt;&lt;span class=&quot;constant numeric integer decimal rust&quot;&gt;100_000_000&lt;&#x2F;span&gt; &lt;span class=&quot;meta block rust&quot;&gt;&lt;span class=&quot;punctuation section block begin rust&quot;&gt;{&lt;&#x2F;span&gt;
                fib&lt;span class=&quot;punctuation accessor dot rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;support function rust&quot;&gt;waiter&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group begin rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group end rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation accessor dot rust&quot;&gt;.&lt;&#x2F;span&gt;await&lt;span class=&quot;punctuation terminator rust&quot;&gt;;&lt;&#x2F;span&gt;
            &lt;&#x2F;span&gt;&lt;span class=&quot;meta block rust&quot;&gt;&lt;span class=&quot;punctuation section block end rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
        &lt;&#x2F;span&gt;&lt;span class=&quot;meta block rust&quot;&gt;&lt;span class=&quot;punctuation section block end rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group end rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation terminator rust&quot;&gt;;&lt;&#x2F;span&gt;
    &lt;&#x2F;span&gt;&lt;span class=&quot;meta block rust&quot;&gt;&lt;span class=&quot;punctuation section block end rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;

    &lt;span class=&quot;support macro rust&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group begin rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;string quoted double rust&quot;&gt;&lt;span class=&quot;punctuation definition string begin rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Running&lt;span class=&quot;punctuation definition string end rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group end rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation terminator rust&quot;&gt;;&lt;&#x2F;span&gt;
    exec&lt;span class=&quot;punctuation accessor dot rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;support function rust&quot;&gt;run&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group begin rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group end rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation terminator rust&quot;&gt;;&lt;&#x2F;span&gt;
    &lt;span class=&quot;support macro rust&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group begin rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;string quoted double rust&quot;&gt;&lt;span class=&quot;punctuation definition string begin rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Done&lt;span class=&quot;punctuation definition string end rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta group rust&quot;&gt;&lt;span class=&quot;punctuation section group end rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation terminator rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;meta block rust&quot;&gt;&lt;span class=&quot;punctuation section block end rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;&lt;h2 id=&quot;end-notes&quot;&gt;End notes&lt;&#x2F;h2&gt;
&lt;p&gt;One of the nice things about the &lt;code&gt;async&lt;&#x2F;code&gt;&#x2F;&lt;code&gt;await&lt;&#x2F;code&gt; support in the Rust compiler
is that it does not depend on any specific run-time. Thus, if you commit to
certain run-time, you are free to implement your own executor.&lt;&#x2F;p&gt;
&lt;p&gt;Independency of run-time has its downsides. For example, the library presented
here is not compatible with other run-times such as
&lt;span class=&#x27;external-link-outer&#x27;&gt;&lt;a class=&quot;external-link&quot;rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;async-std&quot;&gt;&lt;code&gt;async-std&lt;&#x2F;code&gt;&lt;span class=&#x27;external-link-no-underline&#x27;&gt;&lt;&#x2F;span&gt;&lt;svg width=&#x27;13.5&#x27; height=&#x27;13.5&#x27; aria-hidden=&#x27;true&#x27; viewBox=&#x27;0 0 24 24&#x27; class=&#x27;iconExternalLink_wgqa&#x27;&gt;&lt;path fill=&#x27;currentColor&#x27; d=&#x27;M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z&#x27;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;span&gt;. And in fact, the implementation
violates the interface intended for the &lt;code&gt;Future&lt;&#x2F;code&gt;&#x27;s &lt;code&gt;poll&lt;&#x2F;code&gt; function by assuming
that the &lt;code&gt;Future&lt;&#x2F;code&gt; will always be &lt;code&gt;Ready&lt;&#x2F;code&gt; after it was &lt;code&gt;Pending&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Combined uses of several run-times in a single program is possible but requires
extra care (see &lt;span class=&#x27;external-link-outer&#x27;&gt;&lt;a class=&quot;external-link&quot;rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;rust&#x2F;comments&#x2F;eagjyf&#x2F;using_libraries_depending_on_different_async&#x2F;&quot;&gt;Reddit
discussion&lt;span class=&#x27;external-link-no-underline&#x27;&gt;&lt;&#x2F;span&gt;&lt;svg width=&#x27;13.5&#x27; height=&#x27;13.5&#x27; aria-hidden=&#x27;true&#x27; viewBox=&#x27;0 0 24 24&#x27; class=&#x27;iconExternalLink_wgqa&#x27;&gt;&lt;path fill=&#x27;currentColor&#x27; d=&#x27;M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z&#x27;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;span&gt;).&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>How to Easily Patch Fedora Packages</title>
		<published>2020-01-14T00:00:00+00:00</published>
		<updated>2020-01-14T00:00:00+00:00</updated>
		<link href="https://blog.aloni.org/posts/how-to-easily-patch-fedora-packages/" type="text/html"/>
		<id>https://blog.aloni.org/posts/how-to-easily-patch-fedora-packages/</id>
		<content type="html">&lt;p&gt;While many Linux users are developers, a rather small part of the developers
feels easy to meddle or extend their distribution&#x27;s packaging. When there is a
pending feature from an upstream package, or when there is a bug in a package,
users usually wait for the distribution maintainers to fix it, or resort to use
independent solutions such as
&lt;span class=&#x27;external-link-outer&#x27;&gt;&lt;a class=&quot;external-link&quot;rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;docs.brew.sh&#x2F;Homebrew-on-Linux&quot;&gt;homebrew&lt;span class=&#x27;external-link-no-underline&#x27;&gt;&lt;&#x2F;span&gt;&lt;svg width=&#x27;13.5&#x27; height=&#x27;13.5&#x27; aria-hidden=&#x27;true&#x27; viewBox=&#x27;0 0 24 24&#x27; class=&#x27;iconExternalLink_wgqa&#x27;&gt;&lt;path fill=&#x27;currentColor&#x27; d=&#x27;M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z&#x27;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;span&gt;, for rebuilding upstream
projects.&lt;&#x2F;p&gt;
&lt;p&gt;Software packaging in distributions entails dealing with the build system of an
unknown subproject, and it is sometimes a learning curve that may deter
developers from tackling it. Luckily, in &lt;span class=&#x27;external-link-outer&#x27;&gt;&lt;a class=&quot;external-link&quot;rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;getfedora.org&#x2F;&quot;&gt;Fedora
Linux&lt;span class=&#x27;external-link-no-underline&#x27;&gt;&lt;&#x2F;span&gt;&lt;svg width=&#x27;13.5&#x27; height=&#x27;13.5&#x27; aria-hidden=&#x27;true&#x27; viewBox=&#x27;0 0 24 24&#x27; class=&#x27;iconExternalLink_wgqa&#x27;&gt;&lt;path fill=&#x27;currentColor&#x27; d=&#x27;M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z&#x27;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;span&gt;, we have good tools allowing to deal each
package&#x27;s own mess, and make it surprisingly easy to build modified versions.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h2 id=&quot;obtaining-the-source&quot;&gt;Obtaining the source&lt;&#x2F;h2&gt;
&lt;p&gt;First, we begin by installing several base system package that will assist us
in dealing with package building:&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;text plain&quot;&gt;$ sudo dnf install fedpkg make
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;p&gt;Let&#x27;s say we want to consider a patch or a feature for &lt;code&gt;zsh&lt;&#x2F;code&gt; (&lt;span class=&#x27;external-link-outer&#x27;&gt;&lt;a class=&quot;external-link&quot;rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Z_shell&quot;&gt;Z
shell&lt;span class=&#x27;external-link-no-underline&#x27;&gt;&lt;&#x2F;span&gt;&lt;svg width=&#x27;13.5&#x27; height=&#x27;13.5&#x27; aria-hidden=&#x27;true&#x27; viewBox=&#x27;0 0 24 24&#x27; class=&#x27;iconExternalLink_wgqa&#x27;&gt;&lt;path fill=&#x27;currentColor&#x27; d=&#x27;M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z&#x27;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;span&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;We need to consider what is the source package project from which the resultant
binaries were made. It&#x27;s easy to query the &lt;code&gt;rpm&lt;&#x2F;code&gt; tool for that. Based on a
filename of an installed package, the name of the source package RPM can be
revealed. For example:&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;text plain&quot;&gt;$ rpm -qif &#x2F;usr&#x2F;bin&#x2F;zsh | grep &amp;#39;Source RPM&amp;#39;
Source RPM  : zsh-5.7.1-4.fc30.src.rpm
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;p&gt;It is not surprising that the source RPM name is &lt;code&gt;zsh&lt;&#x2F;code&gt; too. It may not be the
case for other packages though.&lt;&#x2F;p&gt;
&lt;p&gt;Normally, the source package RPM name matches the name of the Git repository in
which Fedora maintains the scripts that allow building it.  Cloning a source
package from Fedora&#x27;s Git server is very easy, and &lt;strong&gt;does not&lt;&#x2F;strong&gt; require
becoming a Fedora community member or any other credential. For &lt;code&gt;zsh&lt;&#x2F;code&gt;, we can
perform the following command using &lt;code&gt;fedpkg&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;text plain&quot;&gt;$ fedpkg co -a zsh
Cloning into &amp;#39;zsh&amp;#39;...
remote: Counting objects: 1023, done.
remote: Compressing objects: 100% (777&#x2F;777), done.
remote: Total 1023 (delta 556), reused 423 (delta 216)
Receiving objects: 100% (1023&#x2F;1023), 235.29 KiB | 271.00 KiB&#x2F;s, done.
Resolving deltas: 100% (556&#x2F;556), done.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;p&gt;For each package, the source for each version of Fedora is maintained in a
different branch. We can therefore check-out the branch that is matching the
version of the distribution for which we are building:&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;text plain&quot;&gt;$ cd zsh
$ git checkout -b f31 origin&#x2F;f31
Branch &amp;#39;f31&amp;#39; set up to track remote branch &amp;#39;f31&amp;#39; from &amp;#39;origin&amp;#39;.
Switched to a new branch &amp;#39;f31&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;p&gt;From now on we will invoke &lt;code&gt;fedpkg&lt;&#x2F;code&gt; in the working directory of the package.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;setting-up-a-build-environment&quot;&gt;Setting up a build environment&lt;&#x2F;h2&gt;
&lt;p&gt;Different packages will have varying requirements for a functioning development
environment. Luckily, Fedora&#x27;s &lt;code&gt;dnf&lt;&#x2F;code&gt; assists us in bringing in the dependencies
needed for any of the packages that it can build. This can be done via the &lt;code&gt;dnf builddep&lt;&#x2F;code&gt; command. For our use case, we can bring in &lt;code&gt;zsh&lt;&#x2F;code&gt; dependencies:&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;text plain&quot;&gt;$ sudo dnf builddep zsh
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;&lt;h2 id=&quot;directly-building-a-distributable-rpm&quot;&gt;Directly building a distributable RPM&lt;&#x2F;h2&gt;
&lt;p&gt;Before modifying the package, it is worth testing to see if we are able to
build it correctly even without any modification. The following command will
try to build the binary RPMs from the current state of the code:&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;text plain&quot;&gt;$ fedpkg local
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;p&gt;We can observe that the following RPMs have been generated:&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;text plain&quot;&gt;$ ls -l1 x86_64&#x2F; noarch&#x2F;
noarch&#x2F;:
total 452
-rw-rw-r--. 1 user user 459748 Jan 14 13:58 zsh-html-5.7.1-4.fc31.noarch.rpm

x86_64&#x2F;:
total 5476
-rw-rw-r--. 1 user user 2999294 Jan 14 13:58 zsh-5.7.1-4.fc31.x86_64.rpm
-rw-rw-r--. 1 user user 1771784 Jan 14 13:58 zsh-debuginfo-5.7.1-4.fc31.x86_64.rpm
-rw-rw-r--. 1 user user  829306 Jan 14 13:58 zsh-debugsource-5.7.1-4.fc31.x86_64.rpm
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;&lt;h2 id=&quot;alternatively-building-the-rpm-in-a-mock-container&quot;&gt;Alternatively, building the RPM in a &lt;code&gt;mock&lt;&#x2F;code&gt; container&lt;&#x2F;h2&gt;
&lt;p&gt;Even before docker containers were popular, Fedora provided us with a tool named &lt;code&gt;mock&lt;&#x2F;code&gt;
that creates a separate environment for building packages. Thus, it can be
used to build the package independently of the development environment.&lt;&#x2F;p&gt;
&lt;p&gt;First, we need to make sure that &lt;code&gt;mock&lt;&#x2F;code&gt; is installed.&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;text plain&quot;&gt;$ sudo dnf install mock
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;p&gt;Then, we can tell &lt;code&gt;fedpkg&lt;&#x2F;code&gt; to use &lt;code&gt;mock&lt;&#x2F;code&gt; in order to build the package:&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;text plain&quot;&gt;$ fedpkg mockbuild
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;p&gt;The build outputs of &lt;code&gt;mock&lt;&#x2F;code&gt; are all moved to a directory containing the log
files of the build, and the version and name of the package:&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;text plain&quot;&gt;$ ls -lR results_zsh&#x2F;*&#x2F;*
results_zsh&#x2F;5.7.1&#x2F;4.fc31:
total 9852
-rw-rw-r--. 1 user user  190779 Jan 14 14:10 build.log
-rw-rw-r--. 1 user user    2744 Jan 14 14:03 hw_info.log
-rw-rw-r--. 1 user user   52642 Jan 14 14:08 installed_pkgs.log
-rw-rw-r--. 1 user user  614047 Jan 14 14:10 root.log
-rw-rw-r--. 1 user user     998 Jan 14 14:10 state.log
-rw-r--r--. 1 user mock 3146067 Jan 14 14:06 zsh-5.7.1-4.fc31.src.rpm
-rw-r--r--. 1 user mock 2999346 Jan 14 14:10 zsh-5.7.1-4.fc31.x86_64.rpm
-rw-r--r--. 1 user mock 1772488 Jan 14 14:10 zsh-debuginfo-5.7.1-4.fc31.x86_64.rpm
-rw-r--r--. 1 user mock  829174 Jan 14 14:10 zsh-debugsource-5.7.1-4.fc31.x86_64.rpm
-rw-r--r--. 1 user mock  459682 Jan 14 14:10 zsh-html-5.7.1-4.fc31.noarch.rpm
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;p&gt;Using &lt;code&gt;mock&lt;&#x2F;code&gt; to perform the build has the advantage in so that it verifies that
the dependencies of the build are properly specified, and it can also be used
to build for different versions of the distribution on the same machine. It&#x27;s
also the working horse behind Fedora&#x27;s own build servers, and namely
&lt;span class=&#x27;external-link-outer&#x27;&gt;&lt;a class=&quot;external-link&quot;rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;copr.fedorainfracloud.org&quot;&gt;Copr&lt;span class=&#x27;external-link-no-underline&#x27;&gt;&lt;&#x2F;span&gt;&lt;svg width=&#x27;13.5&#x27; height=&#x27;13.5&#x27; aria-hidden=&#x27;true&#x27; viewBox=&#x27;0 0 24 24&#x27; class=&#x27;iconExternalLink_wgqa&#x27;&gt;&lt;path fill=&#x27;currentColor&#x27; d=&#x27;M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z&#x27;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;span&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;adding-a-patch&quot;&gt;Adding a patch&lt;&#x2F;h2&gt;
&lt;p&gt;To produce a patch for a package, we need the source of the package itself,
rather than the sources for the Fedora scripts that tell how to build it.&lt;&#x2F;p&gt;
&lt;p&gt;There are several ways to obtain the source, and one of them is by using
&lt;code&gt;fedpkg&lt;&#x2F;code&gt;.  We can tell it to create a directory containing the patched sources
of the package, as they are ready to be built.  This process will execute the
&lt;code&gt;prep&lt;&#x2F;code&gt; stage of the RPM spec source, and the result will usually be a directory
directly under our working tree.&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;text plain&quot;&gt;$ fedpkg prep
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;p&gt;Because Fedora source packages do not assume about the source control aspects
of upstream projects, they contain just archives of a certain version&#x27;s source.
The created directory is not tracked in source control, and if we want to
modify it, usually it is best to move it aside to a different directory, and
initialize it with Git. For example:&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;text plain&quot;&gt;$ mv zsh-5.7.1 ..&#x2F;zsh-5.7.1
$ cd ..&#x2F;zsh-5.7.1
$ git init &amp;amp;&amp;amp; git add -f . &amp;amp;&amp;amp; git commit -m &amp;quot;Base version&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;p&gt;Here, our &lt;code&gt;zsh-5.7.1&lt;&#x2F;code&gt; is only a representation of that Fedora-maintained
version, that is probably already patched by Fedora to some degree, but it can
and should be used as a base for our further patching. Though, we may want to
have a clone of the upstream project, &lt;code&gt;zsh&lt;&#x2F;code&gt; in that case, handy for full Git
history browsing.&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;text plain&quot;&gt;$ cd ..
$ git clone git:&#x2F;&#x2F;git.code.sf.net&#x2F;p&#x2F;zsh&#x2F;code zsh-upstream
Cloning into &amp;#39;zsh-upstream&amp;#39;...
remote: Enumerating objects: 94026, done.
remote: Counting objects: 100% (94026&#x2F;94026), done.
remote: Compressing objects: 100% (25128&#x2F;25128), done.
remote: Total 94026 (delta 73505), reused 87930 (delta 68487)
Receiving objects: 100% (94026&#x2F;94026), 16.60 MiB | 1.07 MiB&#x2F;s, done.
Resolving deltas: 100% (73505&#x2F;73505), done.
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;p&gt;Going back to either of our source clones we can proceed to committing changes and
generating patches from commits. Here is an example for a trivial patch:&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;source diff&quot;&gt;$ git diff HEAD
diff --git a&#x2F;Src&#x2F;hist.c b&#x2F;Src&#x2F;hist.c
index dbdc1e4..cdb1dd1 100644
&lt;span class=&quot;meta diff header from-file&quot;&gt;&lt;span class=&quot;meta header from-file diff&quot;&gt;&lt;span class=&quot;punctuation definition from-file diff&quot;&gt;---&lt;&#x2F;span&gt; a&#x2F;Src&#x2F;hist.c
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta diff header to-file&quot;&gt;&lt;span class=&quot;meta header to-file diff&quot;&gt;&lt;span class=&quot;punctuation definition to-file diff&quot;&gt;+++&lt;&#x2F;span&gt; b&#x2F;Src&#x2F;hist.c
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta diff range unified&quot;&gt;&lt;span class=&quot;meta range unified diff&quot;&gt;&lt;span class=&quot;punctuation definition range diff&quot;&gt;@@&lt;&#x2F;span&gt; &lt;span class=&quot;meta toc-list line-number diff&quot;&gt;-580,7 +580,7&lt;&#x2F;span&gt; &lt;span class=&quot;punctuation definition range diff&quot;&gt;@@&lt;&#x2F;span&gt; &lt;span class=&quot;entity name section diff&quot;&gt;histsubchar(int c)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;      *&#x2F;
     lexraw_mark = zshlex_raw_mark(-1);

&lt;span class=&quot;markup deleted diff&quot;&gt;&lt;span class=&quot;punctuation definition deleted diff&quot;&gt;-&lt;&#x2F;span&gt;    &#x2F;* look, no goto&amp;#39;s *&#x2F;
&lt;&#x2F;span&gt;&lt;span class=&quot;markup inserted diff&quot;&gt;&lt;span class=&quot;punctuation definition inserted diff&quot;&gt;+&lt;&#x2F;span&gt;    &#x2F;* look, no goto&amp;#39;s! *&#x2F;
&lt;&#x2F;span&gt;     if (isfirstch &amp;amp;&amp;amp; c == hatchar) {
        int gbal = 0;

$ git commit -m &amp;quot;Adding an exclamation mark to Src&#x2F;hist.c&amp;quot;
[f31 c00d68b] Adding an exclamation mark to Src&#x2F;hist.c
 2 files changed, 100 insertions(+), 1 deletion(-)
 create mode 100644 0001-zsh-5.7.1-zle-history-avoid-crash.patch

$ git format-patch HEAD~1 -o ..&#x2F;zsh
..&#x2F;zsh&#x2F;0001-Adding-an-exclamation-mark-to-Src-hist.c.patch
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;p&gt;The &lt;code&gt;git format-patch&lt;&#x2F;code&gt; is a handy command that exports Git commits as files,
and its output can be used as input to the package building process, as the
packaging standard in Fedora mandates separation of the upstream sources from
the patches that were made on them.&lt;&#x2F;p&gt;
&lt;p&gt;Adding the patch files to the Fedora package&#x27;s source specification may be a
bit tricky, but after a few times you understand that the packaging format is
simpler than it may seem at first. In the case of &lt;code&gt;zsh&lt;&#x2F;code&gt;, we only need to specify
the newly created patch in a &lt;code&gt;Patch&amp;lt;number&amp;gt;: &lt;&#x2F;code&gt; line in the beginning of &lt;code&gt;zsh.spec&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;source diff&quot;&gt;$ git diff
diff --git a&#x2F;zsh.spec b&#x2F;zsh.spec
index 0d77f70..0022a90 100644
&lt;span class=&quot;meta diff header from-file&quot;&gt;&lt;span class=&quot;meta header from-file diff&quot;&gt;&lt;span class=&quot;punctuation definition from-file diff&quot;&gt;---&lt;&#x2F;span&gt; a&#x2F;zsh.spec
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta diff header to-file&quot;&gt;&lt;span class=&quot;meta header to-file diff&quot;&gt;&lt;span class=&quot;punctuation definition to-file diff&quot;&gt;+++&lt;&#x2F;span&gt; b&#x2F;zsh.spec
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta diff range unified&quot;&gt;&lt;span class=&quot;meta range unified diff&quot;&gt;&lt;span class=&quot;punctuation definition range diff&quot;&gt;@@&lt;&#x2F;span&gt; &lt;span class=&quot;meta toc-list line-number diff&quot;&gt;-14,6 +14,7&lt;&#x2F;span&gt; &lt;span class=&quot;punctuation definition range diff&quot;&gt;@@&lt;&#x2F;span&gt; &lt;span class=&quot;entity name section diff&quot;&gt;Source6: dotzshrc&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
 # make failed searches of history in Zle robust (#1722703)
 Patch1:  0001-zsh-5.7.1-zle-history-avoid-crash.patch
&lt;span class=&quot;markup inserted diff&quot;&gt;&lt;span class=&quot;punctuation definition inserted diff&quot;&gt;+&lt;&#x2F;span&gt;Patch2:  0001-Adding-an-exclamation-mark-to-Src-hist.c.patch
&lt;&#x2F;span&gt;
 BuildRequires: autoconf
 BuildRequires: coreutils
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;p&gt;Older packages may require some more changes, such as adding extra &lt;code&gt;%patch&lt;&#x2F;code&gt;
lines further in the file, relating to the aforementioned &lt;code&gt;prep&lt;&#x2F;code&gt; stage.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;identifying-a-patched-package&quot;&gt;Identifying a patched package&lt;&#x2F;h2&gt;
&lt;p&gt;If no other &lt;code&gt;.spec&lt;&#x2F;code&gt; fields are changed, our modified package would appear
mostly indistinguishable in meta-data from the original package. Usually this
is not wanted. Therefore, it is best to modify the &lt;code&gt;.spec&lt;&#x2F;code&gt; to include a string
in the package&#x27;s &lt;code&gt;Release&lt;&#x2F;code&gt; field. For example:&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;source diff&quot;&gt;diff --git a&#x2F;zsh.spec b&#x2F;zsh.spec
index 0022a90..78c362e 100644
&lt;span class=&quot;meta diff header from-file&quot;&gt;&lt;span class=&quot;meta header from-file diff&quot;&gt;&lt;span class=&quot;punctuation definition from-file diff&quot;&gt;---&lt;&#x2F;span&gt; a&#x2F;zsh.spec
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta diff header to-file&quot;&gt;&lt;span class=&quot;meta header to-file diff&quot;&gt;&lt;span class=&quot;punctuation definition to-file diff&quot;&gt;+++&lt;&#x2F;span&gt; b&#x2F;zsh.spec
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta diff range unified&quot;&gt;&lt;span class=&quot;meta range unified diff&quot;&gt;&lt;span class=&quot;punctuation definition range diff&quot;&gt;@@&lt;&#x2F;span&gt; &lt;span class=&quot;meta toc-list line-number diff&quot;&gt;-1,7 +1,7&lt;&#x2F;span&gt; &lt;span class=&quot;punctuation definition range diff&quot;&gt;@@&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; Summary: Powerful interactive shell
 Name: zsh
 Version: 5.7.1
&lt;span class=&quot;markup deleted diff&quot;&gt;&lt;span class=&quot;punctuation definition deleted diff&quot;&gt;-&lt;&#x2F;span&gt;Release: 4%{?dist}
&lt;&#x2F;span&gt;&lt;span class=&quot;markup inserted diff&quot;&gt;&lt;span class=&quot;punctuation definition inserted diff&quot;&gt;+&lt;&#x2F;span&gt;Release: 4%{?dist}.daloni
&lt;&#x2F;span&gt; License: MIT
 URL: http:&#x2F;&#x2F;zsh.sourceforge.net&#x2F;
 Source0: https:&#x2F;&#x2F;downloads.sourceforge.net&#x2F;%{name}&#x2F;%{name}-%{version}.tar.xz
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;p&gt;We can see that following a build, the &lt;code&gt;&amp;lt;name&amp;gt;-&amp;lt;version&amp;gt;-&amp;lt;release&amp;gt;&lt;&#x2F;code&gt; triplet is extended:&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;text plain&quot;&gt;$ ls -l1 x86_64&#x2F; noarch&#x2F;

noarch&#x2F;:
total 452
-rw-rw-r--. 1 user user 459790 Jan 14 15:15 zsh-html-5.7.1-4.fc31.&lt;span class=&quot;sourceMarker&quot;&gt;daloni&lt;&#x2F;span&gt;.noarch.rpm

x86_64&#x2F;:
total 5476
-rw-rw-r--. 1 user user 2999482 Jan 14 15:15 zsh-5.7.1-4.fc31.&lt;span class=&quot;sourceMarker&quot;&gt;daloni&lt;&#x2F;span&gt;.x86_64.rpm
-rw-rw-r--. 1 user user 1773094 Jan 14 15:15 zsh-debuginfo-5.7.1-4.fc31.&lt;span class=&quot;sourceMarker&quot;&gt;daloni&lt;&#x2F;span&gt;.x86_64.rpm
-rw-rw-r--. 1 user user  829124 Jan 14 15:15 zsh-debugsource-5.7.1-4.fc31.&lt;span class=&quot;sourceMarker&quot;&gt;daloni&lt;&#x2F;span&gt;.x86_64.rpm
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;&lt;h2 id=&quot;installing-the-package&quot;&gt;Installing the package&lt;&#x2F;h2&gt;
&lt;p&gt;The new packages can be installed via &lt;code&gt;dnf install&lt;&#x2F;code&gt;. Once the patched packages
are installed, it is easy to spot them by &lt;code&gt;grep&lt;&#x2F;code&gt;-ing over the output of &lt;code&gt;dnf list installed&lt;&#x2F;code&gt; by various means.&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;text plain&quot;&gt;$ sudo dnf install x86_64&#x2F;zsh-5.7.1-4.fc31.daloni.x86_64.rpm

$ dnf list installed | grep @@commandline
zsh.x86_64              5.7.1-4.fc31.daloni                    @@commandline

$ dnf list installed | grep daloni
zsh.x86_64              5.7.1-4.fc31.daloni                    @@commandline
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;&lt;h2 id=&quot;avoiding-accidental-overrides-from-a-newer-package-version&quot;&gt;Avoiding accidental overrides from a newer package version&lt;&#x2F;h2&gt;
&lt;p&gt;When Fedora releases newer version of the package, automatic system upgrades
may override the patched one due to providing a higher version. There are
several ways to prevent this issue, but the one I prefer is excluding upgrades
on such packages from &lt;code&gt;dnf&lt;&#x2F;code&gt;&#x27;s configuration:&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;text plain&quot;&gt;$ grep exclude &#x2F;etc&#x2F;dnf&#x2F;dnf.conf
exclude=zsh
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;p&gt;Furthermore, there are various aspects of dealing with packages that are
outside the scope of this post. An exercise left for the reader is to create an
RPM repository containing the patched package, host it on the network, and for
client machines - devise a repository description file to be placed in
&lt;code&gt;&#x2F;etc&#x2F;yum.repos.d&lt;&#x2F;code&gt;, and configure it to have a higher priority than the
original distribution packages.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;keep-the-debuginfo&quot;&gt;Keep the debuginfo!&lt;&#x2F;h2&gt;
&lt;p&gt;If a patched package has crashed and generated a corefile, the special
debuginfo packages that were produced in the build may be handy in examining
this corefile. Therefore, you may want to keep these debuginfo packages,
especially because a reproduced build is sometimes difficult to match in
complete binary compatibility to the original one. This depends on how
deterministically the package is being built, a matter that is intrinsic to the
package&#x27;s own build system.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Computing Symbolic Gradient Vectors with Plain Haskell</title>
		<published>2016-04-27T00:00:00+00:00</published>
		<updated>2016-04-27T00:00:00+00:00</updated>
		<link href="https://blog.aloni.org/posts/symbolic-gradients-with-plain-haskell/" type="text/html"/>
		<id>https://blog.aloni.org/posts/symbolic-gradients-with-plain-haskell/</id>
		<content type="html">&lt;p&gt;While writing my &lt;a href=&quot;&#x2F;posts&#x2F;backprop-with-tensorflow&quot;&gt;previous post&lt;&#x2F;a&gt;, I was curious how easy it would be to implement &lt;span class=&#x27;external-link-outer&#x27;&gt;&lt;a class=&quot;external-link&quot;rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.tensorflow.org&quot;&gt;TensorFlow&lt;span class=&#x27;external-link-no-underline&#x27;&gt;&lt;&#x2F;span&gt;&lt;svg width=&#x27;13.5&#x27; height=&#x27;13.5&#x27; aria-hidden=&#x27;true&#x27; viewBox=&#x27;0 0 24 24&#x27; class=&#x27;iconExternalLink_wgqa&#x27;&gt;&lt;path fill=&#x27;currentColor&#x27; d=&#x27;M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z&#x27;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;span&gt;&#x27;s automatic differentiation for back propagation. In TensorFlow&#x27;s web site they call it &#x27;automatic differentiation&#x27; but in fact they probably do &#x27;symbolic differentiation&#x27;, as &lt;span class=&#x27;external-link-outer&#x27;&gt;&lt;a class=&quot;external-link&quot;rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;download.tensorflow.org&#x2F;paper&#x2F;whitepaper2015.pdf&quot;&gt;mentioned in their white paper&lt;span class=&#x27;external-link-no-underline&#x27;&gt;&lt;&#x2F;span&gt;&lt;svg width=&#x27;13.5&#x27; height=&#x27;13.5&#x27; aria-hidden=&#x27;true&#x27; viewBox=&#x27;0 0 24 24&#x27; class=&#x27;iconExternalLink_wgqa&#x27;&gt;&lt;path fill=&#x27;currentColor&#x27; d=&#x27;M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z&#x27;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;span&gt;. The difference between the two relates to whether the differentiation is done during the original computation or beforehand. It makes sense to do the latter, because then you can maintain a separate computational graph of the back propagation to perform the updates.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;I&#x27;ve looked into this topic in the &lt;span class=&#x27;external-link-outer&#x27;&gt;&lt;a class=&quot;external-link&quot;rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Haskell_(programming_language)&quot;&gt;Haskell&lt;span class=&#x27;external-link-no-underline&#x27;&gt;&lt;&#x2F;span&gt;&lt;svg width=&#x27;13.5&#x27; height=&#x27;13.5&#x27; aria-hidden=&#x27;true&#x27; viewBox=&#x27;0 0 24 24&#x27; class=&#x27;iconExternalLink_wgqa&#x27;&gt;&lt;path fill=&#x27;currentColor&#x27; d=&#x27;M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z&#x27;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;span&gt; ecosystem, and found many useful and extensive libraries, namely &lt;span class=&#x27;external-link-outer&#x27;&gt;&lt;a class=&quot;external-link&quot;rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;hackage.haskell.org&#x2F;package&#x2F;ad&quot;&gt;ad&lt;span class=&#x27;external-link-no-underline&#x27;&gt;&lt;&#x2F;span&gt;&lt;svg width=&#x27;13.5&#x27; height=&#x27;13.5&#x27; aria-hidden=&#x27;true&#x27; viewBox=&#x27;0 0 24 24&#x27; class=&#x27;iconExternalLink_wgqa&#x27;&gt;&lt;path fill=&#x27;currentColor&#x27; d=&#x27;M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z&#x27;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;span&gt; by Edward Kmett. However, to use these libraries or understand many of the blog posts on the subject requires some advanced Haskell, and I was wondering whether one can get going with differentiation using very basic and lean use of Haskell.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;So, how easy it would be to compute gradients of single-output functions, using Haskell with only the basic arsenal at our hands?&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;data-and-imports&quot;&gt;Data and imports&lt;&#x2F;h2&gt;
&lt;p&gt;First, we perform some imports and declare the basic data type to hold our expression tree:&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;source haskell&quot;&gt;&lt;span class=&quot;meta import haskell&quot;&gt;&lt;span class=&quot;keyword other haskell&quot;&gt;import&lt;&#x2F;span&gt;           &lt;span class=&quot;support other module haskell&quot;&gt;Control.Monad&lt;&#x2F;span&gt; &lt;span class=&quot;meta declaration exports haskell&quot;&gt;(&lt;span class=&quot;entity name function haskell&quot;&gt;forM_&lt;&#x2F;span&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;meta import haskell&quot;&gt;&lt;span class=&quot;keyword other haskell&quot;&gt;import&lt;&#x2F;span&gt; &lt;span class=&quot;keyword other haskell&quot;&gt;qualified&lt;&#x2F;span&gt; &lt;span class=&quot;support other module haskell&quot;&gt;Data.Map&lt;&#x2F;span&gt;      &lt;span class=&quot;keyword other haskell&quot;&gt;as&lt;&#x2F;span&gt; &lt;span class=&quot;support other module haskell&quot;&gt;Map&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;

&lt;span class=&quot;keyword other haskell&quot;&gt;data&lt;&#x2F;span&gt; &lt;span class=&quot;constant other haskell&quot;&gt;Expr&lt;&#x2F;span&gt;
   &lt;span class=&quot;keyword operator haskell&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;constant other haskell&quot;&gt;Term&lt;&#x2F;span&gt; &lt;span class=&quot;constant other haskell&quot;&gt;Int&lt;&#x2F;span&gt;       &lt;span class=&quot;comment line double-dash haskell&quot;&gt;&lt;span class=&quot;punctuation definition comment haskell&quot;&gt;--&lt;&#x2F;span&gt; &amp;#39;Term 0&amp;#39; is x0, &amp;#39;Term 1&amp;#39; is x1, etc..
&lt;&#x2F;span&gt;   &lt;span class=&quot;keyword operator haskell&quot;&gt;|&lt;&#x2F;span&gt; &lt;span class=&quot;constant other haskell&quot;&gt;Lit&lt;&#x2F;span&gt; &lt;span class=&quot;constant other haskell&quot;&gt;Float&lt;&#x2F;span&gt;      &lt;span class=&quot;comment line double-dash haskell&quot;&gt;&lt;span class=&quot;punctuation definition comment haskell&quot;&gt;--&lt;&#x2F;span&gt; Constant numbers
&lt;&#x2F;span&gt;   &lt;span class=&quot;keyword operator haskell&quot;&gt;|&lt;&#x2F;span&gt; &lt;span class=&quot;constant other haskell&quot;&gt;Neg&lt;&#x2F;span&gt; &lt;span class=&quot;constant other haskell&quot;&gt;Expr&lt;&#x2F;span&gt;       &lt;span class=&quot;comment line double-dash haskell&quot;&gt;&lt;span class=&quot;punctuation definition comment haskell&quot;&gt;--&lt;&#x2F;span&gt; -f
&lt;&#x2F;span&gt;   &lt;span class=&quot;keyword operator haskell&quot;&gt;|&lt;&#x2F;span&gt; &lt;span class=&quot;constant other haskell&quot;&gt;Mul&lt;&#x2F;span&gt; &lt;span class=&quot;constant other haskell&quot;&gt;Expr&lt;&#x2F;span&gt; &lt;span class=&quot;constant other haskell&quot;&gt;Expr&lt;&#x2F;span&gt;  &lt;span class=&quot;comment line double-dash haskell&quot;&gt;&lt;span class=&quot;punctuation definition comment haskell&quot;&gt;--&lt;&#x2F;span&gt; a + b
&lt;&#x2F;span&gt;   &lt;span class=&quot;keyword operator haskell&quot;&gt;|&lt;&#x2F;span&gt; &lt;span class=&quot;constant other haskell&quot;&gt;Add&lt;&#x2F;span&gt; &lt;span class=&quot;constant other haskell&quot;&gt;Expr&lt;&#x2F;span&gt; &lt;span class=&quot;constant other haskell&quot;&gt;Expr&lt;&#x2F;span&gt;  &lt;span class=&quot;comment line double-dash haskell&quot;&gt;&lt;span class=&quot;punctuation definition comment haskell&quot;&gt;--&lt;&#x2F;span&gt; a * b
&lt;&#x2F;span&gt;   &lt;span class=&quot;keyword operator haskell&quot;&gt;|&lt;&#x2F;span&gt; &lt;span class=&quot;constant other haskell&quot;&gt;Sin&lt;&#x2F;span&gt; &lt;span class=&quot;constant other haskell&quot;&gt;Expr&lt;&#x2F;span&gt;       &lt;span class=&quot;comment line double-dash haskell&quot;&gt;&lt;span class=&quot;punctuation definition comment haskell&quot;&gt;--&lt;&#x2F;span&gt; sin a
&lt;&#x2F;span&gt;   &lt;span class=&quot;keyword operator haskell&quot;&gt;|&lt;&#x2F;span&gt; &lt;span class=&quot;constant other haskell&quot;&gt;Cos&lt;&#x2F;span&gt; &lt;span class=&quot;constant other haskell&quot;&gt;Expr&lt;&#x2F;span&gt;       &lt;span class=&quot;comment line double-dash haskell&quot;&gt;&lt;span class=&quot;punctuation definition comment haskell&quot;&gt;--&lt;&#x2F;span&gt; cos a
&lt;&#x2F;span&gt;   &lt;span class=&quot;meta deriving haskell&quot;&gt;&lt;span class=&quot;keyword other haskell&quot;&gt;deriving&lt;&#x2F;span&gt; (&lt;span class=&quot;entity other inherited-class haskell&quot;&gt;Show&lt;&#x2F;span&gt;, &lt;span class=&quot;entity other inherited-class haskell&quot;&gt;Eq&lt;&#x2F;span&gt;, &lt;span class=&quot;entity other inherited-class haskell&quot;&gt;Ord&lt;&#x2F;span&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;p&gt;We shall be able to derive symbolic gradients for any function built with this data type.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;poor-man-s-pretty-printing&quot;&gt;Poor man&#x27;s pretty-printing&lt;&#x2F;h2&gt;
&lt;p&gt;One cannot go by without a nice String representation:&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;source haskell&quot;&gt;&lt;span class=&quot;meta function type-declaration haskell&quot;&gt;&lt;span class=&quot;entity name function haskell&quot;&gt;fshow&lt;&#x2F;span&gt; &lt;span class=&quot;keyword other double-colon haskell&quot;&gt;::&lt;&#x2F;span&gt; &lt;span class=&quot;storage type haskell&quot;&gt;Expr&lt;&#x2F;span&gt; &lt;span class=&quot;keyword other arrow haskell&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;storage type haskell&quot;&gt;String&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;fshow (&lt;span class=&quot;constant other haskell&quot;&gt;Term&lt;&#x2F;span&gt; v)    &lt;span class=&quot;keyword operator haskell&quot;&gt;=&lt;&#x2F;span&gt; concat [&lt;span class=&quot;string quoted double haskell&quot;&gt;&lt;span class=&quot;punctuation definition string begin haskell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;x&lt;span class=&quot;punctuation definition string end haskell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator comma haskell&quot;&gt;,&lt;&#x2F;span&gt; show v]
fshow (&lt;span class=&quot;constant other haskell&quot;&gt;Lit&lt;&#x2F;span&gt; v)     &lt;span class=&quot;keyword operator haskell&quot;&gt;=&lt;&#x2F;span&gt; show v
fshow (&lt;span class=&quot;constant other haskell&quot;&gt;Mul&lt;&#x2F;span&gt; e1 e2) &lt;span class=&quot;keyword operator haskell&quot;&gt;=&lt;&#x2F;span&gt; concat [&lt;span class=&quot;string quoted double haskell&quot;&gt;&lt;span class=&quot;punctuation definition string begin haskell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;(&lt;span class=&quot;punctuation definition string end haskell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator comma haskell&quot;&gt;,&lt;&#x2F;span&gt; fshow e1&lt;span class=&quot;punctuation separator comma haskell&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;string quoted double haskell&quot;&gt;&lt;span class=&quot;punctuation definition string begin haskell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt; * &lt;span class=&quot;punctuation definition string end haskell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator comma haskell&quot;&gt;,&lt;&#x2F;span&gt; fshow e2&lt;span class=&quot;punctuation separator comma haskell&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;string quoted double haskell&quot;&gt;&lt;span class=&quot;punctuation definition string begin haskell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;)&lt;span class=&quot;punctuation definition string end haskell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;]
fshow (&lt;span class=&quot;constant other haskell&quot;&gt;Add&lt;&#x2F;span&gt; e1 e2) &lt;span class=&quot;keyword operator haskell&quot;&gt;=&lt;&#x2F;span&gt; concat [&lt;span class=&quot;string quoted double haskell&quot;&gt;&lt;span class=&quot;punctuation definition string begin haskell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;(&lt;span class=&quot;punctuation definition string end haskell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator comma haskell&quot;&gt;,&lt;&#x2F;span&gt; fshow e1&lt;span class=&quot;punctuation separator comma haskell&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;string quoted double haskell&quot;&gt;&lt;span class=&quot;punctuation definition string begin haskell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt; + &lt;span class=&quot;punctuation definition string end haskell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator comma haskell&quot;&gt;,&lt;&#x2F;span&gt; fshow e2&lt;span class=&quot;punctuation separator comma haskell&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;string quoted double haskell&quot;&gt;&lt;span class=&quot;punctuation definition string begin haskell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;)&lt;span class=&quot;punctuation definition string end haskell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;]
fshow (&lt;span class=&quot;constant other haskell&quot;&gt;Neg&lt;&#x2F;span&gt; e)     &lt;span class=&quot;keyword operator haskell&quot;&gt;=&lt;&#x2F;span&gt; concat [&lt;span class=&quot;string quoted double haskell&quot;&gt;&lt;span class=&quot;punctuation definition string begin haskell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;-(&lt;span class=&quot;punctuation definition string end haskell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator comma haskell&quot;&gt;,&lt;&#x2F;span&gt; fshow e&lt;span class=&quot;punctuation separator comma haskell&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;string quoted double haskell&quot;&gt;&lt;span class=&quot;punctuation definition string begin haskell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;)&lt;span class=&quot;punctuation definition string end haskell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;]
fshow (&lt;span class=&quot;constant other haskell&quot;&gt;Sin&lt;&#x2F;span&gt; e)     &lt;span class=&quot;keyword operator haskell&quot;&gt;=&lt;&#x2F;span&gt; concat [&lt;span class=&quot;string quoted double haskell&quot;&gt;&lt;span class=&quot;punctuation definition string begin haskell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;sin(&lt;span class=&quot;punctuation definition string end haskell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator comma haskell&quot;&gt;,&lt;&#x2F;span&gt; fshow e&lt;span class=&quot;punctuation separator comma haskell&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;string quoted double haskell&quot;&gt;&lt;span class=&quot;punctuation definition string begin haskell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;)&lt;span class=&quot;punctuation definition string end haskell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;]
fshow (&lt;span class=&quot;constant other haskell&quot;&gt;Cos&lt;&#x2F;span&gt; e)     &lt;span class=&quot;keyword operator haskell&quot;&gt;=&lt;&#x2F;span&gt; concat [&lt;span class=&quot;string quoted double haskell&quot;&gt;&lt;span class=&quot;punctuation definition string begin haskell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;cos(&lt;span class=&quot;punctuation definition string end haskell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator comma haskell&quot;&gt;,&lt;&#x2F;span&gt; fshow e&lt;span class=&quot;punctuation separator comma haskell&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;string quoted double haskell&quot;&gt;&lt;span class=&quot;punctuation definition string begin haskell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;)&lt;span class=&quot;punctuation definition string end haskell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;p&gt;This implementation is basic in so that a sequence of summations will bear a horrible representation similar to &lt;code&gt;(x1 + (x2 + (x3 + (...))))&lt;&#x2F;code&gt; - however it&#x27;s enough to get us going.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;sample&quot;&gt;Sample&lt;&#x2F;h2&gt;
&lt;p&gt;The &lt;span class=&#x27;external-link-outer&#x27;&gt;&lt;a class=&quot;external-link&quot;rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Automatic_differentiation&quot;&gt;Wikipedia page for Automatic Differentiation&lt;span class=&#x27;external-link-no-underline&#x27;&gt;&lt;&#x2F;span&gt;&lt;svg width=&#x27;13.5&#x27; height=&#x27;13.5&#x27; aria-hidden=&#x27;true&#x27; viewBox=&#x27;0 0 24 24&#x27; class=&#x27;iconExternalLink_wgqa&#x27;&gt;&lt;path fill=&#x27;currentColor&#x27; d=&#x27;M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z&#x27;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;span&gt; demonstrates with the following function:&lt;&#x2F;p&gt;
&lt;p&gt;$$
f(x_1, x_2) = \sin x_1 + x_1x_2
$$&lt;&#x2F;p&gt;
&lt;p&gt;It should be easy enough to represent it with our Haskell data, and use &lt;code&gt;fshow&lt;&#x2F;code&gt; from above:&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;source haskell&quot;&gt;Î»&lt;span class=&quot;keyword operator haskell&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;keyword other haskell&quot;&gt;let&lt;&#x2F;span&gt; wikipediaFunc &lt;span class=&quot;keyword operator haskell&quot;&gt;=&lt;&#x2F;span&gt; (&lt;span class=&quot;constant other haskell&quot;&gt;Sin&lt;&#x2F;span&gt; (&lt;span class=&quot;constant other haskell&quot;&gt;Term&lt;&#x2F;span&gt; &lt;span class=&quot;constant numeric integer decimal haskell&quot;&gt;1&lt;&#x2F;span&gt;)) &lt;span class=&quot;keyword operator function infix haskell&quot;&gt;&lt;span class=&quot;punctuation definition entity haskell&quot;&gt;`&lt;&#x2F;span&gt;Add&lt;span class=&quot;punctuation definition entity haskell&quot;&gt;`&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; ((&lt;span class=&quot;constant other haskell&quot;&gt;Term&lt;&#x2F;span&gt; &lt;span class=&quot;constant numeric integer decimal haskell&quot;&gt;1&lt;&#x2F;span&gt;) &lt;span class=&quot;keyword operator function infix haskell&quot;&gt;&lt;span class=&quot;punctuation definition entity haskell&quot;&gt;`&lt;&#x2F;span&gt;Mul&lt;span class=&quot;punctuation definition entity haskell&quot;&gt;`&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; (&lt;span class=&quot;constant other haskell&quot;&gt;Term&lt;&#x2F;span&gt; &lt;span class=&quot;constant numeric integer decimal haskell&quot;&gt;2&lt;&#x2F;span&gt;))

Î»&lt;span class=&quot;keyword operator haskell&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; fshow wikipediaFunc
&lt;span class=&quot;string quoted double haskell&quot;&gt;&lt;span class=&quot;punctuation definition string begin haskell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;(sin(x1) + (x1 * x2))&lt;span class=&quot;punctuation definition string end haskell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;&lt;h2 id=&quot;gradient&quot;&gt;Gradient&lt;&#x2F;h2&gt;
&lt;p&gt;The &lt;code&gt;gradient&lt;&#x2F;code&gt; function below takes an expression, and returns a map from each term number to the expression that computes it. The definition of the function is recursive and based on known simple derivation rules:&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;source haskell&quot;&gt;&lt;span class=&quot;meta function type-declaration haskell&quot;&gt;&lt;span class=&quot;entity name function haskell&quot;&gt;gradient&lt;&#x2F;span&gt; &lt;span class=&quot;keyword other double-colon haskell&quot;&gt;::&lt;&#x2F;span&gt; &lt;span class=&quot;storage type haskell&quot;&gt;Expr&lt;&#x2F;span&gt; &lt;span class=&quot;keyword other arrow haskell&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;storage type haskell&quot;&gt;Map&lt;&#x2F;span&gt;.&lt;span class=&quot;storage type haskell&quot;&gt;Map&lt;&#x2F;span&gt; &lt;span class=&quot;storage type haskell&quot;&gt;Int&lt;&#x2F;span&gt; &lt;span class=&quot;storage type haskell&quot;&gt;Expr&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;gradient (&lt;span class=&quot;constant other haskell&quot;&gt;Neg&lt;&#x2F;span&gt; e)     &lt;span class=&quot;keyword operator haskell&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;constant other haskell&quot;&gt;Map&lt;&#x2F;span&gt;&lt;span class=&quot;keyword operator haskell&quot;&gt;.&lt;&#x2F;span&gt;map &lt;span class=&quot;constant other haskell&quot;&gt;Neg&lt;&#x2F;span&gt; (gradient e)
gradient (&lt;span class=&quot;constant other haskell&quot;&gt;Cos&lt;&#x2F;span&gt; e)     &lt;span class=&quot;keyword operator haskell&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;constant other haskell&quot;&gt;Map&lt;&#x2F;span&gt;&lt;span class=&quot;keyword operator haskell&quot;&gt;.&lt;&#x2F;span&gt;map (&lt;span class=&quot;constant other haskell&quot;&gt;Mul&lt;&#x2F;span&gt; (&lt;span class=&quot;constant other haskell&quot;&gt;Neg&lt;&#x2F;span&gt; (&lt;span class=&quot;constant other haskell&quot;&gt;Sin&lt;&#x2F;span&gt; e))) (gradient e)
gradient (&lt;span class=&quot;constant other haskell&quot;&gt;Sin&lt;&#x2F;span&gt; e)     &lt;span class=&quot;keyword operator haskell&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;constant other haskell&quot;&gt;Map&lt;&#x2F;span&gt;&lt;span class=&quot;keyword operator haskell&quot;&gt;.&lt;&#x2F;span&gt;map (&lt;span class=&quot;constant other haskell&quot;&gt;Mul&lt;&#x2F;span&gt; (&lt;span class=&quot;constant other haskell&quot;&gt;Cos&lt;&#x2F;span&gt; e)) (gradient e)
gradient (&lt;span class=&quot;constant other haskell&quot;&gt;Term&lt;&#x2F;span&gt; i)    &lt;span class=&quot;keyword operator haskell&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;constant other haskell&quot;&gt;Map&lt;&#x2F;span&gt;&lt;span class=&quot;keyword operator haskell&quot;&gt;.&lt;&#x2F;span&gt;fromList [(i&lt;span class=&quot;punctuation separator comma haskell&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;constant other haskell&quot;&gt;Lit&lt;&#x2F;span&gt; &lt;span class=&quot;constant numeric float decimal haskell&quot;&gt;1&lt;span class=&quot;punctuation separator decimal haskell&quot;&gt;.&lt;&#x2F;span&gt;0&lt;&#x2F;span&gt;)]
gradient (&lt;span class=&quot;constant other haskell&quot;&gt;Lit&lt;&#x2F;span&gt; _)     &lt;span class=&quot;keyword operator haskell&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;constant other haskell&quot;&gt;Map&lt;&#x2F;span&gt;&lt;span class=&quot;keyword operator haskell&quot;&gt;.&lt;&#x2F;span&gt;empty
gradient (&lt;span class=&quot;constant other haskell&quot;&gt;Add&lt;&#x2F;span&gt; e1 e2) &lt;span class=&quot;keyword operator haskell&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;constant other haskell&quot;&gt;Map&lt;&#x2F;span&gt;&lt;span class=&quot;keyword operator haskell&quot;&gt;.&lt;&#x2F;span&gt;unionWith &lt;span class=&quot;constant other haskell&quot;&gt;Add&lt;&#x2F;span&gt; (gradient e1) (gradient e2)
gradient (&lt;span class=&quot;constant other haskell&quot;&gt;Mul&lt;&#x2F;span&gt; e1 e2) &lt;span class=&quot;keyword operator haskell&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;constant other haskell&quot;&gt;Map&lt;&#x2F;span&gt;&lt;span class=&quot;keyword operator haskell&quot;&gt;.&lt;&#x2F;span&gt;unionWith &lt;span class=&quot;constant other haskell&quot;&gt;Add&lt;&#x2F;span&gt; (&lt;span class=&quot;constant other haskell&quot;&gt;Map&lt;&#x2F;span&gt;&lt;span class=&quot;keyword operator haskell&quot;&gt;.&lt;&#x2F;span&gt;map (&lt;span class=&quot;constant other haskell&quot;&gt;Mul&lt;&#x2F;span&gt; e2) (gradient e1))
                                         (&lt;span class=&quot;constant other haskell&quot;&gt;Map&lt;&#x2F;span&gt;&lt;span class=&quot;keyword operator haskell&quot;&gt;.&lt;&#x2F;span&gt;map (&lt;span class=&quot;constant other haskell&quot;&gt;Mul&lt;&#x2F;span&gt; e1) (gradient e2))
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;p&gt;The interesting parts are where &lt;code&gt;Map.unionWith&lt;&#x2F;code&gt; is used for addition and multiplication. Notice how easily the &lt;code&gt;Mul&lt;&#x2F;code&gt; part relates to the known derivation rule:&lt;&#x2F;p&gt;
&lt;p&gt;$$(f(x)g(x))&#x27; = g(x)f&#x27;(x) + g&#x27;(x)f(x)$$&lt;&#x2F;p&gt;
&lt;p&gt;The documentation for &lt;span class=&#x27;external-link-outer&#x27;&gt;&lt;a class=&quot;external-link&quot;rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;hackage.haskell.org&#x2F;package&#x2F;containers&#x2F;docs&#x2F;Data-Map-Strict.html&quot;&gt;Data.Map&lt;span class=&#x27;external-link-no-underline&#x27;&gt;&lt;&#x2F;span&gt;&lt;svg width=&#x27;13.5&#x27; height=&#x27;13.5&#x27; aria-hidden=&#x27;true&#x27; viewBox=&#x27;0 0 24 24&#x27; class=&#x27;iconExternalLink_wgqa&#x27;&gt;&lt;path fill=&#x27;currentColor&#x27; d=&#x27;M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z&#x27;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;span&gt; can tell about &lt;code&gt;Map.map&lt;&#x2F;code&gt; and &lt;code&gt;Map.unionWith&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;small-helpers&quot;&gt;Small helpers&lt;&#x2F;h2&gt;
&lt;p&gt;Before testing it, we&#x27;ll add just two helper functions. The first function simplifies expressions by getting rid of the $1.0$ literals we have added.&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;source haskell&quot;&gt;&lt;span class=&quot;meta function type-declaration haskell&quot;&gt;&lt;span class=&quot;entity name function haskell&quot;&gt;simplify&lt;&#x2F;span&gt; &lt;span class=&quot;keyword other double-colon haskell&quot;&gt;::&lt;&#x2F;span&gt; &lt;span class=&quot;storage type haskell&quot;&gt;Expr&lt;&#x2F;span&gt; &lt;span class=&quot;keyword other arrow haskell&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;storage type haskell&quot;&gt;Expr&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;simplify (&lt;span class=&quot;constant other haskell&quot;&gt;Mul&lt;&#x2F;span&gt; (&lt;span class=&quot;constant other haskell&quot;&gt;Lit&lt;&#x2F;span&gt; &lt;span class=&quot;constant numeric float decimal haskell&quot;&gt;1&lt;span class=&quot;punctuation separator decimal haskell&quot;&gt;.&lt;&#x2F;span&gt;0&lt;&#x2F;span&gt;) e) &lt;span class=&quot;keyword operator haskell&quot;&gt;=&lt;&#x2F;span&gt; simplify e
simplify (&lt;span class=&quot;constant other haskell&quot;&gt;Mul&lt;&#x2F;span&gt; e (&lt;span class=&quot;constant other haskell&quot;&gt;Lit&lt;&#x2F;span&gt; &lt;span class=&quot;constant numeric float decimal haskell&quot;&gt;1&lt;span class=&quot;punctuation separator decimal haskell&quot;&gt;.&lt;&#x2F;span&gt;0&lt;&#x2F;span&gt;)) &lt;span class=&quot;keyword operator haskell&quot;&gt;=&lt;&#x2F;span&gt; simplify e
simplify (&lt;span class=&quot;constant other haskell&quot;&gt;Add&lt;&#x2F;span&gt; e1 e2) &lt;span class=&quot;keyword operator haskell&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;constant other haskell&quot;&gt;Add&lt;&#x2F;span&gt; (simplify e1) (simplify e2)
simplify (&lt;span class=&quot;constant other haskell&quot;&gt;Mul&lt;&#x2F;span&gt; e1 e2) &lt;span class=&quot;keyword operator haskell&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;constant other haskell&quot;&gt;Mul&lt;&#x2F;span&gt; (simplify e1) (simplify e2)
simplify e &lt;span class=&quot;keyword operator haskell&quot;&gt;=&lt;&#x2F;span&gt; e
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;p&gt;The second function will do all the work at the program&#x27;s top level to compute the gradient and print it:&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;source haskell&quot;&gt;&lt;span class=&quot;meta function type-declaration haskell&quot;&gt;&lt;span class=&quot;entity name function haskell&quot;&gt;showGradient&lt;&#x2F;span&gt; &lt;span class=&quot;keyword other double-colon haskell&quot;&gt;::&lt;&#x2F;span&gt; &lt;span class=&quot;storage type haskell&quot;&gt;Expr&lt;&#x2F;span&gt; &lt;span class=&quot;keyword other arrow haskell&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;storage type haskell&quot;&gt;IO&lt;&#x2F;span&gt; &lt;span class=&quot;support constant unit haskell&quot;&gt;()&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;showGradient func &lt;span class=&quot;keyword operator haskell&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;keyword control haskell&quot;&gt;do&lt;&#x2F;span&gt;
    putStrLn &lt;span class=&quot;keyword operator haskell&quot;&gt;$&lt;&#x2F;span&gt; &lt;span class=&quot;string quoted double haskell&quot;&gt;&lt;span class=&quot;punctuation definition string begin haskell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;f(..) = &lt;span class=&quot;punctuation definition string end haskell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;keyword operator haskell&quot;&gt;++&lt;&#x2F;span&gt; fshow func

    forM_ (&lt;span class=&quot;constant other haskell&quot;&gt;Map&lt;&#x2F;span&gt;&lt;span class=&quot;keyword operator haskell&quot;&gt;.&lt;&#x2F;span&gt;toList &lt;span class=&quot;keyword operator haskell&quot;&gt;$&lt;&#x2F;span&gt; gradient func) &lt;span class=&quot;keyword operator haskell&quot;&gt;$&lt;&#x2F;span&gt; &lt;span class=&quot;keyword operator haskell&quot;&gt;\&lt;&#x2F;span&gt;(k&lt;span class=&quot;punctuation separator comma haskell&quot;&gt;,&lt;&#x2F;span&gt; v) &lt;span class=&quot;keyword operator haskell&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;keyword control haskell&quot;&gt;do&lt;&#x2F;span&gt;
        putStrLn &lt;span class=&quot;keyword operator haskell&quot;&gt;$&lt;&#x2F;span&gt; &lt;span class=&quot;string quoted double haskell&quot;&gt;&lt;span class=&quot;punctuation definition string begin haskell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;âˆ‚f &#x2F; âˆ‚&lt;span class=&quot;punctuation definition string end haskell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;keyword operator haskell&quot;&gt;++&lt;&#x2F;span&gt; fshow (&lt;span class=&quot;constant other haskell&quot;&gt;Term&lt;&#x2F;span&gt; k) &lt;span class=&quot;keyword operator haskell&quot;&gt;++&lt;&#x2F;span&gt; &lt;span class=&quot;string quoted double haskell&quot;&gt;&lt;span class=&quot;punctuation definition string begin haskell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt; = &lt;span class=&quot;punctuation definition string end haskell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;keyword operator haskell&quot;&gt;++&lt;&#x2F;span&gt; (fshow &lt;span class=&quot;keyword operator haskell&quot;&gt;.&lt;&#x2F;span&gt; simplify) v
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;&lt;h2 id=&quot;does-it-work&quot;&gt;Does it work?&lt;&#x2F;h2&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;source haskell&quot;&gt;&lt;span class=&quot;keyword operator haskell&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; showGradient wikipediaFunc

f&lt;span class=&quot;entity name function infix haskell&quot;&gt;(..)&lt;&#x2F;span&gt; &lt;span class=&quot;keyword operator haskell&quot;&gt;=&lt;&#x2F;span&gt; (sin(x1) &lt;span class=&quot;keyword operator haskell&quot;&gt;+&lt;&#x2F;span&gt; (x1 * x2))
âˆ‚f &lt;span class=&quot;keyword operator haskell&quot;&gt;&#x2F;&lt;&#x2F;span&gt; âˆ‚x1 &lt;span class=&quot;keyword operator haskell&quot;&gt;=&lt;&#x2F;span&gt; (cos(x1) &lt;span class=&quot;keyword operator haskell&quot;&gt;+&lt;&#x2F;span&gt; x2)
âˆ‚f &lt;span class=&quot;keyword operator haskell&quot;&gt;&#x2F;&lt;&#x2F;span&gt; âˆ‚x2 &lt;span class=&quot;keyword operator haskell&quot;&gt;=&lt;&#x2F;span&gt; x1
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;p&gt;Looks that it does. We have arrived at the same results as Wikipedia.&lt;&#x2F;p&gt;
&lt;script type=&quot;math&#x2F;tex;mode=display&quot;&gt;\begin{aligned}
&amp; \frac{âˆ‚ f}{âˆ‚ x_1} = \cos x_1 + x_2 \\
&amp; \frac{âˆ‚ f}{âˆ‚ x_2} = x_1 \\
\end{aligned}&lt;&#x2F;script&gt;
&lt;p&gt;Will it work with something more complex?&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;source haskell&quot;&gt;&lt;span class=&quot;keyword operator haskell&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; showGradient (&lt;span class=&quot;constant other haskell&quot;&gt;Sin&lt;&#x2F;span&gt; (&lt;span class=&quot;constant other haskell&quot;&gt;Mul&lt;&#x2F;span&gt; (&lt;span class=&quot;constant other haskell&quot;&gt;Term&lt;&#x2F;span&gt; &lt;span class=&quot;constant numeric integer decimal haskell&quot;&gt;2&lt;&#x2F;span&gt; &lt;span class=&quot;keyword operator function infix haskell&quot;&gt;&lt;span class=&quot;punctuation definition entity haskell&quot;&gt;`&lt;&#x2F;span&gt;Add&lt;span class=&quot;punctuation definition entity haskell&quot;&gt;`&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;constant other haskell&quot;&gt;Lit&lt;&#x2F;span&gt; &lt;span class=&quot;constant numeric float decimal haskell&quot;&gt;5&lt;span class=&quot;punctuation separator decimal haskell&quot;&gt;.&lt;&#x2F;span&gt;1&lt;&#x2F;span&gt;) &lt;span class=&quot;keyword operator haskell&quot;&gt;$&lt;&#x2F;span&gt; &lt;span class=&quot;constant other haskell&quot;&gt;Cos&lt;&#x2F;span&gt; (&lt;span class=&quot;constant other haskell&quot;&gt;Term&lt;&#x2F;span&gt; &lt;span class=&quot;constant numeric integer decimal haskell&quot;&gt;1&lt;&#x2F;span&gt;))) &lt;span class=&quot;keyword operator function infix haskell&quot;&gt;&lt;span class=&quot;punctuation definition entity haskell&quot;&gt;`&lt;&#x2F;span&gt;Mul&lt;span class=&quot;punctuation definition entity haskell&quot;&gt;`&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; (&lt;span class=&quot;constant other haskell&quot;&gt;Term&lt;&#x2F;span&gt; &lt;span class=&quot;constant numeric integer decimal haskell&quot;&gt;1&lt;&#x2F;span&gt;) &lt;span class=&quot;keyword operator function infix haskell&quot;&gt;&lt;span class=&quot;punctuation definition entity haskell&quot;&gt;`&lt;&#x2F;span&gt;Mul&lt;span class=&quot;punctuation definition entity haskell&quot;&gt;`&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; (&lt;span class=&quot;constant other haskell&quot;&gt;Term&lt;&#x2F;span&gt; &lt;span class=&quot;constant numeric integer decimal haskell&quot;&gt;3&lt;&#x2F;span&gt;)

f&lt;span class=&quot;entity name function infix haskell&quot;&gt;(..)&lt;&#x2F;span&gt; &lt;span class=&quot;keyword operator haskell&quot;&gt;=&lt;&#x2F;span&gt; ((sin(((x2 &lt;span class=&quot;keyword operator haskell&quot;&gt;+&lt;&#x2F;span&gt; &lt;span class=&quot;constant numeric float decimal haskell&quot;&gt;5&lt;span class=&quot;punctuation separator decimal haskell&quot;&gt;.&lt;&#x2F;span&gt;1&lt;&#x2F;span&gt;) * cos(x1))) * x1) * x3)
âˆ‚f &lt;span class=&quot;keyword operator haskell&quot;&gt;&#x2F;&lt;&#x2F;span&gt; âˆ‚x1 &lt;span class=&quot;keyword operator haskell&quot;&gt;=&lt;&#x2F;span&gt; (x3 * ((x1 * (cos(((x2 &lt;span class=&quot;keyword operator haskell&quot;&gt;+&lt;&#x2F;span&gt; &lt;span class=&quot;constant numeric float decimal haskell&quot;&gt;5&lt;span class=&quot;punctuation separator decimal haskell&quot;&gt;.&lt;&#x2F;span&gt;1&lt;&#x2F;span&gt;) * cos(x1))) * ((x2 &lt;span class=&quot;keyword operator haskell&quot;&gt;+&lt;&#x2F;span&gt; &lt;span class=&quot;constant numeric float decimal haskell&quot;&gt;5&lt;span class=&quot;punctuation separator decimal haskell&quot;&gt;.&lt;&#x2F;span&gt;1&lt;&#x2F;span&gt;) * &lt;span class=&quot;keyword operator haskell&quot;&gt;-&lt;&#x2F;span&gt;(sin(x1))))) &lt;span class=&quot;keyword operator haskell&quot;&gt;+&lt;&#x2F;span&gt; sin(((x2 &lt;span class=&quot;keyword operator haskell&quot;&gt;+&lt;&#x2F;span&gt; &lt;span class=&quot;constant numeric float decimal haskell&quot;&gt;5&lt;span class=&quot;punctuation separator decimal haskell&quot;&gt;.&lt;&#x2F;span&gt;1&lt;&#x2F;span&gt;) * cos(x1)))))
âˆ‚f &lt;span class=&quot;keyword operator haskell&quot;&gt;&#x2F;&lt;&#x2F;span&gt; âˆ‚x2 &lt;span class=&quot;keyword operator haskell&quot;&gt;=&lt;&#x2F;span&gt; (x3 * (x1 * (cos(((x2 &lt;span class=&quot;keyword operator haskell&quot;&gt;+&lt;&#x2F;span&gt; &lt;span class=&quot;constant numeric float decimal haskell&quot;&gt;5&lt;span class=&quot;punctuation separator decimal haskell&quot;&gt;.&lt;&#x2F;span&gt;1&lt;&#x2F;span&gt;) * cos(x1))) * cos(x1))))
âˆ‚f &lt;span class=&quot;keyword operator haskell&quot;&gt;&#x2F;&lt;&#x2F;span&gt; âˆ‚x3 &lt;span class=&quot;keyword operator haskell&quot;&gt;=&lt;&#x2F;span&gt; (sin(((x2 &lt;span class=&quot;keyword operator haskell&quot;&gt;+&lt;&#x2F;span&gt; &lt;span class=&quot;constant numeric float decimal haskell&quot;&gt;5&lt;span class=&quot;punctuation separator decimal haskell&quot;&gt;.&lt;&#x2F;span&gt;1&lt;&#x2F;span&gt;) * cos(x1))) * x1)
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;p&gt;Comparing with &lt;span class=&#x27;external-link-outer&#x27;&gt;&lt;a class=&quot;external-link&quot;rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.wolframalpha.com&#x2F;input&#x2F;?i=derive+((sin(((x2+%2B+5.1)+*+cos(x1)))+*+x1)+*+x3)&quot;&gt;Wolfram Alpha&lt;span class=&#x27;external-link-no-underline&#x27;&gt;&lt;&#x2F;span&gt;&lt;svg width=&#x27;13.5&#x27; height=&#x27;13.5&#x27; aria-hidden=&#x27;true&#x27; viewBox=&#x27;0 0 24 24&#x27; class=&#x27;iconExternalLink_wgqa&#x27;&gt;&lt;path fill=&#x27;currentColor&#x27; d=&#x27;M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z&#x27;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;span&gt;, it seems to get it right.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;end-note&quot;&gt;End note&lt;&#x2F;h2&gt;
&lt;p&gt;Advance extensions of what I illustrated here can add a considerable amount of functionality and ease of use. We will definitely need to support matrices for instance, if we would like to derive a back-propagation graph. You can browse the &lt;span class=&#x27;external-link-outer&#x27;&gt;&lt;a class=&quot;external-link&quot;rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;hackage.haskell.org&#x2F;package&#x2F;ad&quot;&gt;ad&lt;span class=&#x27;external-link-no-underline&#x27;&gt;&lt;&#x2F;span&gt;&lt;svg width=&#x27;13.5&#x27; height=&#x27;13.5&#x27; aria-hidden=&#x27;true&#x27; viewBox=&#x27;0 0 24 24&#x27; class=&#x27;iconExternalLink_wgqa&#x27;&gt;&lt;path fill=&#x27;currentColor&#x27; d=&#x27;M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z&#x27;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;span&gt; package to get some ideas.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Intro</title>
		<published>2016-04-26T00:00:00+00:00</published>
		<updated>2016-04-26T00:00:00+00:00</updated>
		<link href="https://blog.aloni.org/pages/about/intro/" type="text/html"/>
		<id>https://blog.aloni.org/pages/about/intro/</id>
		<content type="html">&lt;p&gt;I&#x27;m a software developer, working as contractor for several companies. When I
first learned about the existence of computers I marveled at the ability to
program them, and so I taught myself the mÃ©tier in the mid-1990&#x27;s. I also
hold a B.Sc in computer science.&lt;&#x2F;p&gt;
&lt;p&gt;My expertise is a wide arch, ranging from low-level Linux kernel hacking and
machine code to compilers, Rust and Haskell programming, software packaging,
build automation, and more. I&#x27;ve been following Linux kernel development since
year 2000, and had the joy of adopting &lt;span class=&#x27;external-link-outer&#x27;&gt;&lt;a class=&quot;external-link&quot;rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;git-scm.com&#x2F;&quot;&gt;Git&lt;span class=&#x27;external-link-no-underline&#x27;&gt;&lt;&#x2F;span&gt;&lt;svg width=&#x27;13.5&#x27; height=&#x27;13.5&#x27; aria-hidden=&#x27;true&#x27; viewBox=&#x27;0 0 24 24&#x27; class=&#x27;iconExternalLink_wgqa&#x27;&gt;&lt;path fill=&#x27;currentColor&#x27; d=&#x27;M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z&#x27;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;span&gt; since its
inception in 2005.&lt;&#x2F;p&gt;
&lt;p&gt;I authored and contributed patches to various kinds of open source projects,
namely the Linux kernel (of which
&lt;span class=&#x27;external-link-outer&#x27;&gt;&lt;a class=&quot;external-link&quot;rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Cooperative_Linux&quot;&gt;coLinux&lt;span class=&#x27;external-link-no-underline&#x27;&gt;&lt;&#x2F;span&gt;&lt;svg width=&#x27;13.5&#x27; height=&#x27;13.5&#x27; aria-hidden=&#x27;true&#x27; viewBox=&#x27;0 0 24 24&#x27; class=&#x27;iconExternalLink_wgqa&#x27;&gt;&lt;path fill=&#x27;currentColor&#x27; d=&#x27;M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z&#x27;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;span&gt; was a project of mine
I presented in &lt;span class=&#x27;external-link-outer&#x27;&gt;&lt;a class=&quot;external-link&quot;rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.kernel.org&#x2F;doc&#x2F;ols&#x2F;2004&#x2F;&quot;&gt;OLS 2004&lt;span class=&#x27;external-link-no-underline&#x27;&gt;&lt;&#x2F;span&gt;&lt;svg width=&#x27;13.5&#x27; height=&#x27;13.5&#x27; aria-hidden=&#x27;true&#x27; viewBox=&#x27;0 0 24 24&#x27; class=&#x27;iconExternalLink_wgqa&#x27;&gt;&lt;path fill=&#x27;currentColor&#x27; d=&#x27;M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z&#x27;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;span&gt;),
&lt;span class=&#x27;external-link-outer&#x27;&gt;&lt;a class=&quot;external-link&quot;rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;lists.gnu.org&#x2F;archive&#x2F;html&#x2F;qemu-devel&#x2F;2007-09&#x2F;msg00010.html&quot;&gt;QEMU&lt;span class=&#x27;external-link-no-underline&#x27;&gt;&lt;&#x2F;span&gt;&lt;svg width=&#x27;13.5&#x27; height=&#x27;13.5&#x27; aria-hidden=&#x27;true&#x27; viewBox=&#x27;0 0 24 24&#x27; class=&#x27;iconExternalLink_wgqa&#x27;&gt;&lt;path fill=&#x27;currentColor&#x27; d=&#x27;M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z&#x27;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;span&gt;,
&lt;span class=&#x27;external-link-outer&#x27;&gt;&lt;a class=&quot;external-link&quot;rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tmux&#x2F;tmux&#x2F;wiki&quot;&gt;tmux&lt;span class=&#x27;external-link-no-underline&#x27;&gt;&lt;&#x2F;span&gt;&lt;svg width=&#x27;13.5&#x27; height=&#x27;13.5&#x27; aria-hidden=&#x27;true&#x27; viewBox=&#x27;0 0 24 24&#x27; class=&#x27;iconExternalLink_wgqa&#x27;&gt;&lt;path fill=&#x27;currentColor&#x27; d=&#x27;M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z&#x27;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;span&gt;, &lt;span class=&#x27;external-link-outer&#x27;&gt;&lt;a class=&quot;external-link&quot;rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;neovim.io&quot;&gt;Neovim&lt;span class=&#x27;external-link-no-underline&#x27;&gt;&lt;&#x2F;span&gt;&lt;svg width=&#x27;13.5&#x27; height=&#x27;13.5&#x27; aria-hidden=&#x27;true&#x27; viewBox=&#x27;0 0 24 24&#x27; class=&#x27;iconExternalLink_wgqa&#x27;&gt;&lt;path fill=&#x27;currentColor&#x27; d=&#x27;M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z&#x27;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;span&gt;,
&lt;span class=&#x27;external-link-outer&#x27;&gt;&lt;a class=&quot;external-link&quot;rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;cargo&quot;&gt;cargo&lt;span class=&#x27;external-link-no-underline&#x27;&gt;&lt;&#x2F;span&gt;&lt;svg width=&#x27;13.5&#x27; height=&#x27;13.5&#x27; aria-hidden=&#x27;true&#x27; viewBox=&#x27;0 0 24 24&#x27; class=&#x27;iconExternalLink_wgqa&#x27;&gt;&lt;path fill=&#x27;currentColor&#x27; d=&#x27;M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z&#x27;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;span&gt;,
&lt;span class=&#x27;external-link-outer&#x27;&gt;&lt;a class=&quot;external-link&quot;rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&quot;&gt;rust&lt;span class=&#x27;external-link-no-underline&#x27;&gt;&lt;&#x2F;span&gt;&lt;svg width=&#x27;13.5&#x27; height=&#x27;13.5&#x27; aria-hidden=&#x27;true&#x27; viewBox=&#x27;0 0 24 24&#x27; class=&#x27;iconExternalLink_wgqa&#x27;&gt;&lt;path fill=&#x27;currentColor&#x27; d=&#x27;M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z&#x27;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;span&gt;, and many more. For more details, see
a comprehensive list of my &lt;a href=&quot;&#x2F;oss&quot;&gt;OSS contributions&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Other interests are playing and studying music, languages, and knowledge in
various fields of science.&lt;&#x2F;p&gt;
&lt;p&gt;My development environment is composed of
&lt;span class=&#x27;external-link-outer&#x27;&gt;&lt;a class=&quot;external-link&quot;rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Z_shell&quot;&gt;zsh&lt;span class=&#x27;external-link-no-underline&#x27;&gt;&lt;&#x2F;span&gt;&lt;svg width=&#x27;13.5&#x27; height=&#x27;13.5&#x27; aria-hidden=&#x27;true&#x27; viewBox=&#x27;0 0 24 24&#x27; class=&#x27;iconExternalLink_wgqa&#x27;&gt;&lt;path fill=&#x27;currentColor&#x27; d=&#x27;M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z&#x27;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;span&gt;,
&lt;span class=&#x27;external-link-outer&#x27;&gt;&lt;a class=&quot;external-link&quot;rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tmux&#x2F;tmux&#x2F;wiki&quot;&gt;tmux&lt;span class=&#x27;external-link-no-underline&#x27;&gt;&lt;&#x2F;span&gt;&lt;svg width=&#x27;13.5&#x27; height=&#x27;13.5&#x27; aria-hidden=&#x27;true&#x27; viewBox=&#x27;0 0 24 24&#x27; class=&#x27;iconExternalLink_wgqa&#x27;&gt;&lt;path fill=&#x27;currentColor&#x27; d=&#x27;M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z&#x27;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;span&gt; (with patches), with
&lt;span class=&#x27;external-link-outer&#x27;&gt;&lt;a class=&quot;external-link&quot;rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;neovim.io&quot;&gt;Neovim&lt;span class=&#x27;external-link-no-underline&#x27;&gt;&lt;&#x2F;span&gt;&lt;svg width=&#x27;13.5&#x27; height=&#x27;13.5&#x27; aria-hidden=&#x27;true&#x27; viewBox=&#x27;0 0 24 24&#x27; class=&#x27;iconExternalLink_wgqa&#x27;&gt;&lt;path fill=&#x27;currentColor&#x27; d=&#x27;M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z&#x27;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;span&gt; as editor and &lt;span class=&#x27;external-link-outer&#x27;&gt;&lt;a class=&quot;external-link&quot;rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Fedora_%28operating_system%29&quot;&gt;Fedora
Linux&lt;span class=&#x27;external-link-no-underline&#x27;&gt;&lt;&#x2F;span&gt;&lt;svg width=&#x27;13.5&#x27; height=&#x27;13.5&#x27; aria-hidden=&#x27;true&#x27; viewBox=&#x27;0 0 24 24&#x27; class=&#x27;iconExternalLink_wgqa&#x27;&gt;&lt;path fill=&#x27;currentColor&#x27; d=&#x27;M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z&#x27;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;span&gt; as a desktop
and laptop OS.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Back Propagation with TensorFlow</title>
		<published>2016-04-26T00:00:00+00:00</published>
		<updated>2016-04-26T00:00:00+00:00</updated>
		<link href="https://blog.aloni.org/posts/backprop-with-tensorflow/" type="text/html"/>
		<id>https://blog.aloni.org/posts/backprop-with-tensorflow/</id>
		<content type="html">&lt;p&gt;&lt;strong&gt;(Updated for TensorFlow 1.0 on March 6th, 2017)&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;When I first read about neural network in Michael Nielsen&#x27;s &lt;span class=&#x27;external-link-outer&#x27;&gt;&lt;a class=&quot;external-link&quot;rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;neuralnetworksanddeeplearning.com&#x2F;&quot;&gt;Neural Networks and Deep Learning&lt;span class=&#x27;external-link-no-underline&#x27;&gt;&lt;&#x2F;span&gt;&lt;svg width=&#x27;13.5&#x27; height=&#x27;13.5&#x27; aria-hidden=&#x27;true&#x27; viewBox=&#x27;0 0 24 24&#x27; class=&#x27;iconExternalLink_wgqa&#x27;&gt;&lt;path fill=&#x27;currentColor&#x27; d=&#x27;M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z&#x27;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;span&gt;, I was excited to find a good source that explains the material along with actual code. However there was a rather steep jump in the part that describes the basic math and the part that goes about implementing it, and it was especially apparent in the  &lt;code&gt;numpy&lt;&#x2F;code&gt;-based code that implements backward propagation.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;So, in order to explain it better to myself, and learn about &lt;span class=&#x27;external-link-outer&#x27;&gt;&lt;a class=&quot;external-link&quot;rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.tensorflow.org&#x2F;&quot;&gt;TensorFlow&lt;span class=&#x27;external-link-no-underline&#x27;&gt;&lt;&#x2F;span&gt;&lt;svg width=&#x27;13.5&#x27; height=&#x27;13.5&#x27; aria-hidden=&#x27;true&#x27; viewBox=&#x27;0 0 24 24&#x27; class=&#x27;iconExternalLink_wgqa&#x27;&gt;&lt;path fill=&#x27;currentColor&#x27; d=&#x27;M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z&#x27;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;span&gt; in the process, I took it upon myself to implement the first network in the book using TensorFlow by two means. First, &lt;em&gt;manually&lt;&#x2F;em&gt; defining the back propagation step, and the second - letting TensorFlow do the hard work using &lt;span class=&#x27;external-link-outer&#x27;&gt;&lt;a class=&quot;external-link&quot;rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Automatic_differentiation&quot;&gt;automatic differentiation&lt;span class=&#x27;external-link-no-underline&#x27;&gt;&lt;&#x2F;span&gt;&lt;svg width=&#x27;13.5&#x27; height=&#x27;13.5&#x27; aria-hidden=&#x27;true&#x27; viewBox=&#x27;0 0 24 24&#x27; class=&#x27;iconExternalLink_wgqa&#x27;&gt;&lt;path fill=&#x27;currentColor&#x27; d=&#x27;M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z&#x27;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;span&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;setup&quot;&gt;Setup&lt;&#x2F;h2&gt;
&lt;p&gt;First, we need to load TensorFlow and setup the basic parts of the graph - inputs (&lt;code&gt;a_0&lt;&#x2F;code&gt;, &lt;code&gt;y&lt;&#x2F;code&gt;), and states (&lt;code&gt;w_1&lt;&#x2F;code&gt;, &lt;code&gt;b_1&lt;&#x2F;code&gt;, &lt;code&gt;w_2&lt;&#x2F;code&gt;, &lt;code&gt;b_2&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;source python&quot;&gt;&lt;span class=&quot;comment line number-sign python&quot;&gt;&lt;span class=&quot;punctuation definition comment python&quot;&gt;#&lt;&#x2F;span&gt;!&#x2F;usr&#x2F;bin&#x2F;env python
&lt;&#x2F;span&gt;
&lt;span class=&quot;meta statement import python&quot;&gt;&lt;span class=&quot;keyword control import python&quot;&gt;import&lt;&#x2F;span&gt; &lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;tensorflow&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;meta statement import python&quot;&gt;&lt;span class=&quot;keyword control import python&quot;&gt;import&lt;&#x2F;span&gt; &lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;tensorflow&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;keyword control import as python&quot;&gt;as&lt;&#x2F;span&gt; &lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;tf&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;

&lt;span class=&quot;meta statement import python&quot;&gt;&lt;span class=&quot;keyword control import from python&quot;&gt;from&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta statement import python&quot;&gt;&lt;span class=&quot;meta import-source python&quot;&gt; &lt;span class=&quot;meta import-path python&quot;&gt;&lt;span class=&quot;meta import-name python&quot;&gt;tensorflow&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation accessor dot python&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;meta import-name python&quot;&gt;examples&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation accessor dot python&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;meta import-name python&quot;&gt;tutorials&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation accessor dot python&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;meta import-name python&quot;&gt;mnist&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;meta statement import python&quot;&gt;&lt;span class=&quot;keyword control import python&quot;&gt;import&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta statement import python&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta statement import python&quot;&gt; &lt;span class=&quot;meta generic-name python&quot;&gt;input_data&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;mnist&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;keyword operator assignment python&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;meta function-call python&quot;&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;input_data&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;punctuation accessor dot python&quot;&gt;.&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;variable function python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;read_data_sets&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call arguments python&quot;&gt;&lt;span class=&quot;punctuation section arguments begin python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;meta string python&quot;&gt;&lt;span class=&quot;string quoted double python&quot;&gt;&lt;span class=&quot;punctuation definition string begin python&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta string python&quot;&gt;&lt;span class=&quot;string quoted double python&quot;&gt;MNIST_data&#x2F;&lt;span class=&quot;punctuation definition string end python&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator arguments python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;variable parameter python&quot;&gt;one_hot&lt;&#x2F;span&gt;&lt;span class=&quot;keyword operator assignment python&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;constant language python&quot;&gt;True&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section arguments end python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;

&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;a_0&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;keyword operator assignment python&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;meta function-call python&quot;&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;tf&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;punctuation accessor dot python&quot;&gt;.&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;variable function python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;placeholder&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call arguments python&quot;&gt;&lt;span class=&quot;punctuation section arguments begin python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;tf&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation accessor dot python&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;float32&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator arguments python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;meta sequence list python&quot;&gt;&lt;span class=&quot;punctuation section sequence begin python&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;constant language python&quot;&gt;None&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator sequence python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;constant numeric integer decimal python&quot;&gt;784&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section sequence end python&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section arguments end python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;y&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;keyword operator assignment python&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;meta function-call python&quot;&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;tf&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;punctuation accessor dot python&quot;&gt;.&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;variable function python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;placeholder&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call arguments python&quot;&gt;&lt;span class=&quot;punctuation section arguments begin python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;tf&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation accessor dot python&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;float32&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator arguments python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;meta sequence list python&quot;&gt;&lt;span class=&quot;punctuation section sequence begin python&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;constant language python&quot;&gt;None&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator sequence python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;constant numeric integer decimal python&quot;&gt;10&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section sequence end python&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section arguments end python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;

&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;middle&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;keyword operator assignment python&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;constant numeric integer decimal python&quot;&gt;30&lt;&#x2F;span&gt;
&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;w_1&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;keyword operator assignment python&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;meta function-call python&quot;&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;tf&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;punctuation accessor dot python&quot;&gt;.&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;variable function python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;Variable&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call arguments python&quot;&gt;&lt;span class=&quot;punctuation section arguments begin python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call python&quot;&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;tf&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;punctuation accessor dot python&quot;&gt;.&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;variable function python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;truncated_normal&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call arguments python&quot;&gt;&lt;span class=&quot;punctuation section arguments begin python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;meta sequence list python&quot;&gt;&lt;span class=&quot;punctuation section sequence begin python&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;constant numeric integer decimal python&quot;&gt;784&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator sequence python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;middle&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section sequence end python&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section arguments end python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section arguments end python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;b_1&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;keyword operator assignment python&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;meta function-call python&quot;&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;tf&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;punctuation accessor dot python&quot;&gt;.&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;variable function python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;Variable&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call arguments python&quot;&gt;&lt;span class=&quot;punctuation section arguments begin python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call python&quot;&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;tf&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;punctuation accessor dot python&quot;&gt;.&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;variable function python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;truncated_normal&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call arguments python&quot;&gt;&lt;span class=&quot;punctuation section arguments begin python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;meta sequence list python&quot;&gt;&lt;span class=&quot;punctuation section sequence begin python&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;constant numeric integer decimal python&quot;&gt;1&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator sequence python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;middle&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section sequence end python&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section arguments end python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section arguments end python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;w_2&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;keyword operator assignment python&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;meta function-call python&quot;&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;tf&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;punctuation accessor dot python&quot;&gt;.&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;variable function python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;Variable&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call arguments python&quot;&gt;&lt;span class=&quot;punctuation section arguments begin python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call python&quot;&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;tf&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;punctuation accessor dot python&quot;&gt;.&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;variable function python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;truncated_normal&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call arguments python&quot;&gt;&lt;span class=&quot;punctuation section arguments begin python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;meta sequence list python&quot;&gt;&lt;span class=&quot;punctuation section sequence begin python&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;middle&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator sequence python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;constant numeric integer decimal python&quot;&gt;10&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section sequence end python&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section arguments end python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section arguments end python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;b_2&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;keyword operator assignment python&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;meta function-call python&quot;&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;tf&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;punctuation accessor dot python&quot;&gt;.&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;variable function python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;Variable&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call arguments python&quot;&gt;&lt;span class=&quot;punctuation section arguments begin python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call python&quot;&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;tf&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;punctuation accessor dot python&quot;&gt;.&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;variable function python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;truncated_normal&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call arguments python&quot;&gt;&lt;span class=&quot;punctuation section arguments begin python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;meta sequence list python&quot;&gt;&lt;span class=&quot;punctuation section sequence begin python&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;constant numeric integer decimal python&quot;&gt;1&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator sequence python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;constant numeric integer decimal python&quot;&gt;10&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section sequence end python&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section arguments end python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section arguments end python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;&lt;h2 id=&quot;the-sigmoid-function&quot;&gt;The sigmoid function&lt;&#x2F;h2&gt;
&lt;p&gt;Our sigmoid function, although provided by TensorFlow&#x27;s extensive function library, is brought here as reference:&lt;&#x2F;p&gt;
&lt;p&gt;$$
\sigma(z) = \frac{1}{1+e^{-z}}
$$&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;source python&quot;&gt;&lt;span class=&quot;meta function python&quot;&gt;&lt;span class=&quot;storage type function python&quot;&gt;&lt;span class=&quot;keyword declaration function python&quot;&gt;def&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;entity name function python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;sigma&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function parameters python&quot;&gt;&lt;span class=&quot;punctuation section parameters begin python&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function parameters python&quot;&gt;&lt;span class=&quot;variable parameter python&quot;&gt;x&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section parameters end python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function python&quot;&gt;&lt;span class=&quot;punctuation section function begin python&quot;&gt;:&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
    &lt;span class=&quot;keyword control flow return python&quot;&gt;return&lt;&#x2F;span&gt; &lt;span class=&quot;meta function-call python&quot;&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;tf&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;punctuation accessor dot python&quot;&gt;.&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;variable function python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;div&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call arguments python&quot;&gt;&lt;span class=&quot;punctuation section arguments begin python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call python&quot;&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;tf&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;punctuation accessor dot python&quot;&gt;.&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;variable function python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;constant&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call arguments python&quot;&gt;&lt;span class=&quot;punctuation section arguments begin python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;constant numeric float decimal python&quot;&gt;1&lt;span class=&quot;punctuation separator decimal python&quot;&gt;.&lt;&#x2F;span&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section arguments end python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator arguments python&quot;&gt;,&lt;&#x2F;span&gt;
                  &lt;span class=&quot;meta function-call python&quot;&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;tf&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;punctuation accessor dot python&quot;&gt;.&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;variable function python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;add&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call arguments python&quot;&gt;&lt;span class=&quot;punctuation section arguments begin python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call python&quot;&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;tf&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;punctuation accessor dot python&quot;&gt;.&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;variable function python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;constant&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call arguments python&quot;&gt;&lt;span class=&quot;punctuation section arguments begin python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;constant numeric float decimal python&quot;&gt;1&lt;span class=&quot;punctuation separator decimal python&quot;&gt;.&lt;&#x2F;span&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section arguments end python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator arguments python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;meta function-call python&quot;&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;tf&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;punctuation accessor dot python&quot;&gt;.&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;variable function python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;exp&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call arguments python&quot;&gt;&lt;span class=&quot;punctuation section arguments begin python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call python&quot;&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;tf&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;punctuation accessor dot python&quot;&gt;.&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;variable function python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;negative&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call arguments python&quot;&gt;&lt;span class=&quot;punctuation section arguments begin python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;x&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section arguments end python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section arguments end python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section arguments end python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section arguments end python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;&lt;h2 id=&quot;the-forward-propagation&quot;&gt;The forward propagation&lt;&#x2F;h2&gt;
&lt;p&gt;Provided that the input image is given by the \( a_0 \) matrix, calculating forward propagation for multiple
images at a time can be done with simple matrix multiplication, defined as such:&lt;&#x2F;p&gt;
&lt;script type=&quot;math&#x2F;tex;mode=display&quot;&gt;\begin{aligned}
&amp; z_1 = a_0 \cdot w_1 + b_1 \\
&amp; a_1 = \sigma(z_1) \\
&amp; z_2 = a_1 \cdot w_2 + b_2 \\
&amp; a_2 = \sigma(z_2) \\
\end{aligned}&lt;&#x2F;script&gt;
&lt;p&gt;Given a tensor of &lt;em&gt;multiple images&lt;&#x2F;em&gt;, this can done in TensorFlow for &lt;em&gt;all&lt;&#x2F;em&gt; them at the same time (thanks to &#x27;broadcasting&#x27;),
so the above gets a one-to-one translation in TensorFlow:&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;source python&quot;&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;z_1&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;keyword operator assignment python&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;meta function-call python&quot;&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;tf&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;punctuation accessor dot python&quot;&gt;.&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;variable function python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;add&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call arguments python&quot;&gt;&lt;span class=&quot;punctuation section arguments begin python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call python&quot;&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;tf&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;punctuation accessor dot python&quot;&gt;.&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;variable function python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;matmul&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call arguments python&quot;&gt;&lt;span class=&quot;punctuation section arguments begin python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;a_0&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator arguments python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;w_1&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section arguments end python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator arguments python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;b_1&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section arguments end python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;a_1&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;keyword operator assignment python&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;meta function-call python&quot;&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;variable function python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;sigma&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call arguments python&quot;&gt;&lt;span class=&quot;punctuation section arguments begin python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;z_1&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section arguments end python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;z_2&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;keyword operator assignment python&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;meta function-call python&quot;&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;tf&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;punctuation accessor dot python&quot;&gt;.&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;variable function python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;add&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call arguments python&quot;&gt;&lt;span class=&quot;punctuation section arguments begin python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call python&quot;&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;tf&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;punctuation accessor dot python&quot;&gt;.&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;variable function python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;matmul&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call arguments python&quot;&gt;&lt;span class=&quot;punctuation section arguments begin python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;a_1&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator arguments python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;w_2&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section arguments end python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator arguments python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;b_2&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section arguments end python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;a_2&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;keyword operator assignment python&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;meta function-call python&quot;&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;variable function python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;sigma&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call arguments python&quot;&gt;&lt;span class=&quot;punctuation section arguments begin python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;z_2&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section arguments end python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;&lt;h2 id=&quot;difference&quot;&gt;Difference&lt;&#x2F;h2&gt;
&lt;p&gt;The input provides \( y \) as the test for the accuracy of the network&#x27;s output, so we compute the following vector:&lt;&#x2F;p&gt;
&lt;script type=&quot;math&#x2F;tex;mode=display&quot;&gt;\begin{aligned}
&amp; \nabla a = a_2 - y \\
\end{aligned}&lt;&#x2F;script&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;source python&quot;&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;diff&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;keyword operator assignment python&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;meta function-call python&quot;&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;tf&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;punctuation accessor dot python&quot;&gt;.&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;variable function python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;subtract&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call arguments python&quot;&gt;&lt;span class=&quot;punctuation section arguments begin python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;a_2&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator arguments python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;y&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section arguments end python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;&lt;h2 id=&quot;the-sigmoid-prime-function&quot;&gt;The sigmoid prime function&lt;&#x2F;h2&gt;
&lt;p&gt;Here&#x27;s the derivate of the sigmoid function from above, which will be needed during the backward propagation:&lt;&#x2F;p&gt;
&lt;p&gt;$$
\sigma&#x27;(z) = \sigma(z)(1 - \sigma(z))
$$&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;source python&quot;&gt;&lt;span class=&quot;meta function python&quot;&gt;&lt;span class=&quot;storage type function python&quot;&gt;&lt;span class=&quot;keyword declaration function python&quot;&gt;def&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;entity name function python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;sigmaprime&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function parameters python&quot;&gt;&lt;span class=&quot;punctuation section parameters begin python&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function parameters python&quot;&gt;&lt;span class=&quot;variable parameter python&quot;&gt;x&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section parameters end python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function python&quot;&gt;&lt;span class=&quot;punctuation section function begin python&quot;&gt;:&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
    &lt;span class=&quot;keyword control flow return python&quot;&gt;return&lt;&#x2F;span&gt; &lt;span class=&quot;meta function-call python&quot;&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;tf&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;punctuation accessor dot python&quot;&gt;.&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;variable function python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;multiply&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call arguments python&quot;&gt;&lt;span class=&quot;punctuation section arguments begin python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call python&quot;&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;variable function python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;sigma&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call arguments python&quot;&gt;&lt;span class=&quot;punctuation section arguments begin python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;x&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section arguments end python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator arguments python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;meta function-call python&quot;&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;tf&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;punctuation accessor dot python&quot;&gt;.&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;variable function python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;subtract&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call arguments python&quot;&gt;&lt;span class=&quot;punctuation section arguments begin python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call python&quot;&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;tf&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;punctuation accessor dot python&quot;&gt;.&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;variable function python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;constant&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call arguments python&quot;&gt;&lt;span class=&quot;punctuation section arguments begin python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;constant numeric float decimal python&quot;&gt;1&lt;span class=&quot;punctuation separator decimal python&quot;&gt;.&lt;&#x2F;span&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section arguments end python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator arguments python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;meta function-call python&quot;&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;variable function python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;sigma&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call arguments python&quot;&gt;&lt;span class=&quot;punctuation section arguments begin python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;x&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section arguments end python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section arguments end python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section arguments end python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;&lt;h2 id=&quot;back&quot;&gt;Backward propagation&lt;&#x2F;h2&gt;
&lt;p&gt;The most complicated part is the backward propagation. First, we need to compute the deltas of the weights and biases. In the original book the Python code was a bit puzzling, but here we can describe the same algorithm in a functional, stateless way.&lt;&#x2F;p&gt;
&lt;script type=&quot;math&#x2F;tex;mode=display&quot;&gt;\begin{aligned}
&amp; \nabla z_2 = \nabla a \cdot \sigma&#x27;(z_2) \\
&amp; \nabla b_2 = \nabla z_2 \\
&amp; \nabla w_2 = a_1^T \cdot \nabla z_2 \\
&amp; \\
&amp; \nabla a_1 = \nabla z_2 \cdot w_2^T \\
&amp; \nabla z_1 = \nabla a_1 \cdot \sigma&#x27;(z_1) \\
&amp; \nabla b_1 = \nabla z_1 \\
&amp; \nabla w_1 = a_0^T \cdot \nabla z_1 \\
\end{aligned}&lt;&#x2F;script&gt;
&lt;p&gt;It&#x27;s also one-to-one with:&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;source python&quot;&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;d_z_2&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;keyword operator assignment python&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;meta function-call python&quot;&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;tf&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;punctuation accessor dot python&quot;&gt;.&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;variable function python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;multiply&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call arguments python&quot;&gt;&lt;span class=&quot;punctuation section arguments begin python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;diff&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator arguments python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;meta function-call python&quot;&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;variable function python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;sigmaprime&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call arguments python&quot;&gt;&lt;span class=&quot;punctuation section arguments begin python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;z_2&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section arguments end python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section arguments end python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;d_b_2&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;keyword operator assignment python&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;d_z_2&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;d_w_2&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;keyword operator assignment python&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;meta function-call python&quot;&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;tf&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;punctuation accessor dot python&quot;&gt;.&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;variable function python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;matmul&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call arguments python&quot;&gt;&lt;span class=&quot;punctuation section arguments begin python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call python&quot;&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;tf&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;punctuation accessor dot python&quot;&gt;.&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;variable function python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;transpose&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call arguments python&quot;&gt;&lt;span class=&quot;punctuation section arguments begin python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;a_1&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section arguments end python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator arguments python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;d_z_2&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section arguments end python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;

&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;d_a_1&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;keyword operator assignment python&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;meta function-call python&quot;&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;tf&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;punctuation accessor dot python&quot;&gt;.&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;variable function python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;matmul&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call arguments python&quot;&gt;&lt;span class=&quot;punctuation section arguments begin python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;d_z_2&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator arguments python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;meta function-call python&quot;&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;tf&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;punctuation accessor dot python&quot;&gt;.&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;variable function python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;transpose&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call arguments python&quot;&gt;&lt;span class=&quot;punctuation section arguments begin python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;w_2&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section arguments end python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section arguments end python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;d_z_1&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;keyword operator assignment python&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;meta function-call python&quot;&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;tf&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;punctuation accessor dot python&quot;&gt;.&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;variable function python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;multiply&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call arguments python&quot;&gt;&lt;span class=&quot;punctuation section arguments begin python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;d_a_1&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator arguments python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;meta function-call python&quot;&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;variable function python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;sigmaprime&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call arguments python&quot;&gt;&lt;span class=&quot;punctuation section arguments begin python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;z_1&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section arguments end python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section arguments end python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;d_b_1&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;keyword operator assignment python&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;d_z_1&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;d_w_1&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;keyword operator assignment python&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;meta function-call python&quot;&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;tf&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;punctuation accessor dot python&quot;&gt;.&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;variable function python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;matmul&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call arguments python&quot;&gt;&lt;span class=&quot;punctuation section arguments begin python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call python&quot;&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;tf&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;punctuation accessor dot python&quot;&gt;.&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;variable function python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;transpose&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call arguments python&quot;&gt;&lt;span class=&quot;punctuation section arguments begin python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;a_0&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section arguments end python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator arguments python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;d_z_1&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section arguments end python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;&lt;h2 id=&quot;upd&quot;&gt;Updating the network&lt;&#x2F;h2&gt;
&lt;p&gt;We take the computed \( \nabla \) and update the weights in one step. Note that the following does not precisely match the book - I have omitted the constant \( 1&#x2F;n \) divider. For simplicity, it&#x27;s not really needed, as it comes into play inside the \( \eta \) itself, in this case.&lt;&#x2F;p&gt;
&lt;script type=&quot;math&#x2F;tex;mode=display&quot;&gt;\begin{aligned}
&amp; w_1 \leftarrow w_1 - \eta \cdot \nabla w_1 \\
&amp; b_1 \leftarrow b_1 - \eta \cdot \nabla b_1 \\
&amp; w_2 \leftarrow w_2 - \eta \cdot \nabla w_2 \\
&amp; b_2 \leftarrow b_2 - \eta \cdot \nabla b_2 \\
\end{aligned}&lt;&#x2F;script&gt;
&lt;p&gt;In TensorFlow, it can translate to a list of a assignments:&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;source python&quot;&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;eta&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;keyword operator assignment python&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;meta function-call python&quot;&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;tf&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;punctuation accessor dot python&quot;&gt;.&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;variable function python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;constant&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call arguments python&quot;&gt;&lt;span class=&quot;punctuation section arguments begin python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;constant numeric float decimal python&quot;&gt;0&lt;span class=&quot;punctuation separator decimal python&quot;&gt;.&lt;&#x2F;span&gt;5&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section arguments end python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;step&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;keyword operator assignment python&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;meta sequence list python&quot;&gt;&lt;span class=&quot;punctuation section sequence begin python&quot;&gt;[&lt;&#x2F;span&gt;
    &lt;span class=&quot;meta function-call python&quot;&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;tf&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;punctuation accessor dot python&quot;&gt;.&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;variable function python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;assign&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call arguments python&quot;&gt;&lt;span class=&quot;punctuation section arguments begin python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;w_1&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator arguments python&quot;&gt;,&lt;&#x2F;span&gt;
            &lt;span class=&quot;meta function-call python&quot;&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;tf&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;punctuation accessor dot python&quot;&gt;.&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;variable function python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;subtract&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call arguments python&quot;&gt;&lt;span class=&quot;punctuation section arguments begin python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;w_1&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator arguments python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;meta function-call python&quot;&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;tf&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;punctuation accessor dot python&quot;&gt;.&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;variable function python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;multiply&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call arguments python&quot;&gt;&lt;span class=&quot;punctuation section arguments begin python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;eta&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator arguments python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;d_w_1&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section arguments end python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section arguments end python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section arguments end python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
  &lt;span class=&quot;punctuation separator sequence python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;meta function-call python&quot;&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;tf&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;punctuation accessor dot python&quot;&gt;.&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;variable function python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;assign&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call arguments python&quot;&gt;&lt;span class=&quot;punctuation section arguments begin python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;b_1&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator arguments python&quot;&gt;,&lt;&#x2F;span&gt;
            &lt;span class=&quot;meta function-call python&quot;&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;tf&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;punctuation accessor dot python&quot;&gt;.&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;variable function python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;subtract&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call arguments python&quot;&gt;&lt;span class=&quot;punctuation section arguments begin python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;b_1&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator arguments python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;meta function-call python&quot;&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;tf&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;punctuation accessor dot python&quot;&gt;.&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;variable function python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;multiply&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call arguments python&quot;&gt;&lt;span class=&quot;punctuation section arguments begin python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;eta&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator arguments python&quot;&gt;,&lt;&#x2F;span&gt;
                               &lt;span class=&quot;meta function-call python&quot;&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;tf&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;punctuation accessor dot python&quot;&gt;.&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;variable function python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;reduce_mean&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call arguments python&quot;&gt;&lt;span class=&quot;punctuation section arguments begin python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;d_b_1&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator arguments python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;variable parameter python&quot;&gt;axis&lt;&#x2F;span&gt;&lt;span class=&quot;keyword operator assignment python&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;meta sequence list python&quot;&gt;&lt;span class=&quot;punctuation section sequence begin python&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;constant numeric integer decimal python&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section sequence end python&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section arguments end python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section arguments end python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section arguments end python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section arguments end python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
  &lt;span class=&quot;punctuation separator sequence python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;meta function-call python&quot;&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;tf&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;punctuation accessor dot python&quot;&gt;.&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;variable function python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;assign&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call arguments python&quot;&gt;&lt;span class=&quot;punctuation section arguments begin python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;w_2&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator arguments python&quot;&gt;,&lt;&#x2F;span&gt;
            &lt;span class=&quot;meta function-call python&quot;&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;tf&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;punctuation accessor dot python&quot;&gt;.&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;variable function python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;subtract&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call arguments python&quot;&gt;&lt;span class=&quot;punctuation section arguments begin python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;w_2&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator arguments python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;meta function-call python&quot;&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;tf&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;punctuation accessor dot python&quot;&gt;.&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;variable function python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;multiply&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call arguments python&quot;&gt;&lt;span class=&quot;punctuation section arguments begin python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;eta&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator arguments python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;d_w_2&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section arguments end python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section arguments end python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section arguments end python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
  &lt;span class=&quot;punctuation separator sequence python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;meta function-call python&quot;&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;tf&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;punctuation accessor dot python&quot;&gt;.&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;variable function python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;assign&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call arguments python&quot;&gt;&lt;span class=&quot;punctuation section arguments begin python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;b_2&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator arguments python&quot;&gt;,&lt;&#x2F;span&gt;
            &lt;span class=&quot;meta function-call python&quot;&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;tf&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;punctuation accessor dot python&quot;&gt;.&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;variable function python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;subtract&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call arguments python&quot;&gt;&lt;span class=&quot;punctuation section arguments begin python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;b_2&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator arguments python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;meta function-call python&quot;&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;tf&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;punctuation accessor dot python&quot;&gt;.&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;variable function python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;multiply&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call arguments python&quot;&gt;&lt;span class=&quot;punctuation section arguments begin python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;eta&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator arguments python&quot;&gt;,&lt;&#x2F;span&gt;
                               &lt;span class=&quot;meta function-call python&quot;&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;tf&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;punctuation accessor dot python&quot;&gt;.&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;variable function python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;reduce_mean&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call arguments python&quot;&gt;&lt;span class=&quot;punctuation section arguments begin python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;d_b_2&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator arguments python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;variable parameter python&quot;&gt;axis&lt;&#x2F;span&gt;&lt;span class=&quot;keyword operator assignment python&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;meta sequence list python&quot;&gt;&lt;span class=&quot;punctuation section sequence begin python&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;constant numeric integer decimal python&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section sequence end python&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section arguments end python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section arguments end python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section arguments end python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section arguments end python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;punctuation section sequence end python&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;&lt;h2 id=&quot;running-and-testing-the-training-process&quot;&gt;Running and testing the training process&lt;&#x2F;h2&gt;
&lt;p&gt;The following will be able to train the network and test it in the meanwhile, using mini-batches of 10. Here, I chose to test with 1000 items from the test set, every 1000 mini-batches.&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;source python&quot;&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;acct_mat&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;keyword operator assignment python&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;meta function-call python&quot;&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;tf&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;punctuation accessor dot python&quot;&gt;.&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;variable function python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;equal&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call arguments python&quot;&gt;&lt;span class=&quot;punctuation section arguments begin python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call python&quot;&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;tf&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;punctuation accessor dot python&quot;&gt;.&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;variable function python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;argmax&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call arguments python&quot;&gt;&lt;span class=&quot;punctuation section arguments begin python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;a_2&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator arguments python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;constant numeric integer decimal python&quot;&gt;1&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section arguments end python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator arguments python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;meta function-call python&quot;&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;tf&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;punctuation accessor dot python&quot;&gt;.&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;variable function python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;argmax&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call arguments python&quot;&gt;&lt;span class=&quot;punctuation section arguments begin python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;y&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator arguments python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;constant numeric integer decimal python&quot;&gt;1&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section arguments end python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section arguments end python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;acct_res&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;keyword operator assignment python&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;meta function-call python&quot;&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;tf&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;punctuation accessor dot python&quot;&gt;.&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;variable function python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;reduce_sum&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call arguments python&quot;&gt;&lt;span class=&quot;punctuation section arguments begin python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call python&quot;&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;tf&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;punctuation accessor dot python&quot;&gt;.&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;variable function python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;cast&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call arguments python&quot;&gt;&lt;span class=&quot;punctuation section arguments begin python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;acct_mat&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator arguments python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;tf&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation accessor dot python&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;float32&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section arguments end python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section arguments end python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;

&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;sess&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;keyword operator assignment python&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;meta function-call python&quot;&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;tf&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;punctuation accessor dot python&quot;&gt;.&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;variable function python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;InteractiveSession&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call arguments python&quot;&gt;&lt;span class=&quot;punctuation section arguments begin python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section arguments end python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;meta function-call python&quot;&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;sess&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;punctuation accessor dot python&quot;&gt;.&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;variable function python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;run&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call arguments python&quot;&gt;&lt;span class=&quot;punctuation section arguments begin python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call python&quot;&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;tf&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;punctuation accessor dot python&quot;&gt;.&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;variable function python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;global_variables_initializer&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call arguments python&quot;&gt;&lt;span class=&quot;punctuation section arguments begin python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section arguments end python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section arguments end python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;

&lt;span class=&quot;meta statement loop for python&quot;&gt;&lt;span class=&quot;keyword control loop for python&quot;&gt;for&lt;&#x2F;span&gt; &lt;span class=&quot;meta generic-name python&quot;&gt;i&lt;&#x2F;span&gt; &lt;span class=&quot;keyword control loop for in python&quot;&gt;in&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta statement loop for python&quot;&gt; &lt;span class=&quot;meta function-call python&quot;&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;variable function python&quot;&gt;&lt;span class=&quot;support type python&quot;&gt;xrange&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call arguments python&quot;&gt;&lt;span class=&quot;punctuation section arguments begin python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;constant numeric integer decimal python&quot;&gt;10000&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section arguments end python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta statement loop for python&quot;&gt;&lt;span class=&quot;punctuation section block loop for python&quot;&gt;:&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
    &lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;batch_xs&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;, &lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;batch_ys&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;keyword operator assignment python&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;meta function-call python&quot;&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;mnist&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation accessor dot python&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;train&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;punctuation accessor dot python&quot;&gt;.&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;variable function python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;next_batch&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call arguments python&quot;&gt;&lt;span class=&quot;punctuation section arguments begin python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;constant numeric integer decimal python&quot;&gt;10&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section arguments end python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
    &lt;span class=&quot;meta function-call python&quot;&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;sess&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;punctuation accessor dot python&quot;&gt;.&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;variable function python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;run&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call arguments python&quot;&gt;&lt;span class=&quot;punctuation section arguments begin python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;step&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator arguments python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;variable parameter python&quot;&gt;feed_dict&lt;&#x2F;span&gt; &lt;span class=&quot;keyword operator assignment python&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;meta mapping python&quot;&gt;&lt;span class=&quot;punctuation section mapping begin python&quot;&gt;{&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta mapping key python&quot;&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;a_0&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta mapping python&quot;&gt;&lt;span class=&quot;punctuation separator mapping key-value python&quot;&gt;:&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta mapping python&quot;&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;meta mapping value python&quot;&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;batch_xs&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta mapping python&quot;&gt;&lt;span class=&quot;punctuation separator mapping python&quot;&gt;,&lt;&#x2F;span&gt;
                                &lt;span class=&quot;meta mapping key python&quot;&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;y&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator mapping key-value python&quot;&gt;:&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta mapping python&quot;&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;meta mapping value python&quot;&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;batch_ys&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta mapping python&quot;&gt;&lt;span class=&quot;punctuation section mapping end python&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section arguments end python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
    &lt;span class=&quot;meta statement conditional if python&quot;&gt;&lt;span class=&quot;keyword control conditional if python&quot;&gt;if&lt;&#x2F;span&gt; &lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;i&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;keyword operator arithmetic python&quot;&gt;%&lt;&#x2F;span&gt; &lt;span class=&quot;constant numeric integer decimal python&quot;&gt;1000&lt;&#x2F;span&gt; &lt;span class=&quot;keyword operator comparison python&quot;&gt;==&lt;&#x2F;span&gt; &lt;span class=&quot;constant numeric integer decimal python&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section block conditional if python&quot;&gt;:&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
        &lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;res&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;keyword operator assignment python&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;meta function-call python&quot;&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;sess&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;punctuation accessor dot python&quot;&gt;.&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;variable function python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;run&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call arguments python&quot;&gt;&lt;span class=&quot;punctuation section arguments begin python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;acct_res&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator arguments python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;variable parameter python&quot;&gt;feed_dict&lt;&#x2F;span&gt; &lt;span class=&quot;keyword operator assignment python&quot;&gt;=&lt;&#x2F;span&gt;
                       &lt;span class=&quot;meta mapping python&quot;&gt;&lt;span class=&quot;punctuation section mapping begin python&quot;&gt;{&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta mapping key python&quot;&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;a_0&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta mapping python&quot;&gt;&lt;span class=&quot;punctuation separator mapping key-value python&quot;&gt;:&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta mapping python&quot;&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;meta mapping value python&quot;&gt;&lt;span class=&quot;meta item-access python&quot;&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;mnist&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation accessor dot python&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;test&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation accessor dot python&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;images&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta item-access python&quot;&gt;&lt;span class=&quot;punctuation section brackets begin python&quot;&gt;[&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta item-access arguments python&quot;&gt;&lt;span class=&quot;punctuation separator slice python&quot;&gt;:&lt;&#x2F;span&gt;&lt;span class=&quot;constant numeric integer decimal python&quot;&gt;1000&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta item-access python&quot;&gt;&lt;span class=&quot;punctuation section brackets end python&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta mapping python&quot;&gt;&lt;span class=&quot;punctuation separator mapping python&quot;&gt;,&lt;&#x2F;span&gt;
                        &lt;span class=&quot;meta mapping key python&quot;&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;y&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator mapping key-value python&quot;&gt;:&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta mapping python&quot;&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;meta mapping value python&quot;&gt;&lt;span class=&quot;meta item-access python&quot;&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;mnist&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation accessor dot python&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;test&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation accessor dot python&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;labels&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta item-access python&quot;&gt;&lt;span class=&quot;punctuation section brackets begin python&quot;&gt;[&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta item-access arguments python&quot;&gt;&lt;span class=&quot;punctuation separator slice python&quot;&gt;:&lt;&#x2F;span&gt;&lt;span class=&quot;constant numeric integer decimal python&quot;&gt;1000&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta item-access python&quot;&gt;&lt;span class=&quot;punctuation section brackets end python&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta mapping python&quot;&gt;&lt;span class=&quot;punctuation section mapping end python&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section arguments end python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
        &lt;span class=&quot;keyword other print python&quot;&gt;print&lt;&#x2F;span&gt; &lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;res&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;p&gt;Running it shows that it manages to train the network, as we quickly get 923 correct out of 1000 tests.&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;text plain&quot;&gt;Extracting MNIST_data&#x2F;train-images-idx3-ubyte.gz
Extracting MNIST_data&#x2F;train-labels-idx1-ubyte.gz
Extracting MNIST_data&#x2F;t10k-images-idx3-ubyte.gz
Extracting MNIST_data&#x2F;t10k-labels-idx1-ubyte.gz
93.0
741.0
870.0
909.0
904.0
912.0
916.0
923.0
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;&lt;h2 id=&quot;automatic-differentiation&quot;&gt;Automatic differentiation&lt;&#x2F;h2&gt;
&lt;p&gt;The great part about TensorFlow is its ability to derive the step function on its own. So, instead of the rather complicated &#x27;Backward propagation&#x27; and &#x27;Updating the network&#x27; given above for educational purposes (see: &lt;a href=&quot;https:&#x2F;&#x2F;blog.aloni.org&#x2F;posts&#x2F;backprop-with-tensorflow&#x2F;#back&quot;&gt;backward propagation&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;blog.aloni.org&#x2F;posts&#x2F;backprop-with-tensorflow&#x2F;#upd&quot;&gt;updating&lt;&#x2F;a&gt;), we can simply write the following step function alternative:&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;source python&quot;&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;cost&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;keyword operator assignment python&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;meta function-call python&quot;&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;tf&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;punctuation accessor dot python&quot;&gt;.&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;variable function python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;multiply&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call arguments python&quot;&gt;&lt;span class=&quot;punctuation section arguments begin python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;diff&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator arguments python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;diff&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section arguments end python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;step&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;keyword operator assignment python&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;meta function-call python&quot;&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;tf&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation accessor dot python&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;train&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;punctuation accessor dot python&quot;&gt;.&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;variable function python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;GradientDescentOptimizer&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call arguments python&quot;&gt;&lt;span class=&quot;punctuation section arguments begin python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;constant numeric float decimal python&quot;&gt;0&lt;span class=&quot;punctuation separator decimal python&quot;&gt;.&lt;&#x2F;span&gt;1&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section arguments end python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call python&quot;&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;punctuation accessor dot python&quot;&gt;.&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;variable function python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;minimize&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call arguments python&quot;&gt;&lt;span class=&quot;punctuation section arguments begin python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;meta qualified-name python&quot;&gt;&lt;span class=&quot;meta generic-name python&quot;&gt;cost&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section arguments end python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;p&gt;And observe that the training still works.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Mailing Lists Under GMail</title>
		<published>2016-03-15T00:00:00+00:00</published>
		<updated>2016-03-15T00:00:00+00:00</updated>
		<link href="https://blog.aloni.org/posts/mailing-lists-under-gmail/" type="text/html"/>
		<id>https://blog.aloni.org/posts/mailing-lists-under-gmail/</id>
		<content type="html">&lt;p&gt;In the Webmail era, E-Mail for group correspondences is often mishandled. Here&#x27;s how to efficiently handle it in GMail.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;With many open source projects, you may innocuously subscribe to an Mailing list on the Internet, or you may be unwittingly added to a group mail in an organization (those are often the &lt;code&gt;all@&lt;&#x2F;code&gt; and &lt;code&gt;dev@&lt;&#x2F;code&gt; and &lt;code&gt;rnd@&lt;&#x2F;code&gt; E-Mail prefixes). Your in-box is now bombed with messages that are not for you, in discussions you don&#x27;t (yet) participate, but some of them are or would be, later.&lt;&#x2F;p&gt;
&lt;p&gt;At that point, you should be made aware of the situation and use GMail filters because they are easy to configure. However, the filters you choose play a crucial part on how the mailing list is handled. What so are the options?&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;The bad options&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Bad&lt;&#x2F;strong&gt; option #1: Skip in-box for everything sent to the mailing list. Now your GMail archive is some unsorted junk.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Bad&lt;&#x2F;strong&gt; option #2: Delete everything sent to the mailing list that is not for me. Now, you cannot interject on discussions that could be relevant to your work.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Bad&lt;&#x2F;strong&gt; option #3: Tag all posts to the mailing list with a label, and skip the in-box. We are getting there - however it&#x27;s still bad. Because messages to you are archived as well (i.e. disappeared from in-box but still searchable, in GMail&#x27;s terminology).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;One good option&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;What we should expect from GMail is the following:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;If a group E-Mail is received, then:
&lt;ul&gt;
&lt;li&gt;If your personal E-Mail address is &lt;em&gt;not also&lt;&#x2F;em&gt; in the &lt;code&gt;To:&lt;&#x2F;code&gt; or &lt;code&gt;Cc:&lt;&#x2F;code&gt; fields, then &lt;em&gt;skip in-box&lt;&#x2F;em&gt; and &lt;em&gt;apply a label&lt;&#x2F;em&gt;. The GMail will remain is unread for later consumption.&lt;&#x2F;li&gt;
&lt;li&gt;Otherwise, &lt;em&gt;only apply the label&lt;&#x2F;em&gt; but &lt;em&gt;don&#x27;t skip the in-box&lt;&#x2F;em&gt;. Since you are personally addressed in addition to the group, the discussion is relevant and your response is needed.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The nice thing about Labels in GMail is that they map nicely to groups under this scheme. When you visit the label, you are essentially visiting the group, and you can join discussions. One of nice benefits is that GMail tracks which discussions were read or unread by you, without cluttering your inbox.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Adding GMail filters for Mailing List that Just Do The Proper Job:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;When viewing details for an E-Mail, GMail shows a link &#x27;Filter messages from this mailing list&#x27;. It presents you with a bad filter that you can edit. However I think it&#x27;s better to add the good set of filters from the outset instead of editing bad ones.&lt;&#x2F;p&gt;
&lt;p&gt;Go to one of the group E-Mails, and do &lt;em&gt;Show Original&lt;&#x2F;em&gt;, then look for the &lt;code&gt;List-Id&lt;&#x2F;code&gt; header. It would most likely appear similarly to this:&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;text plain&quot;&gt;List-ID: &amp;lt;group.company.com&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;p&gt;To go along the rules of the option above, we should have filters that look like below, in the GMail&#x27;s filter settings:&lt;&#x2F;p&gt;
&lt;img src=&quot;&#x2F;images&#x2F;gmail-filter-settings.png&quot; class=&quot;center&quot;&gt;
&lt;p&gt;We can manually enter these filters in a few steps.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The first GMail filter is (after relevant &lt;strong&gt;strings replaced&lt;&#x2F;strong&gt;):&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;list:group.company.com to:your.name@organization.com&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;How to enable:&lt;&#x2F;strong&gt; Enter in GMail search box, hit tiny arrow in the right of the search box -&amp;gt; &lt;em&gt;Show Search Options&lt;&#x2F;em&gt; -&amp;gt; &lt;em&gt;Create As Filter&lt;&#x2F;em&gt; -&amp;gt; Do this: Apply label &amp;quot;Group Name&amp;quot;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The second GMail filter is (after relevant &lt;strong&gt;strings replaced&lt;&#x2F;strong&gt;):&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;list:group.company.com -to:your.name@organization.com&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;How to enable:&lt;&#x2F;strong&gt; Enter in GMail search box, hit tiny arrow in the right of the search box -&amp;gt; &lt;em&gt;Show Search Options&lt;&#x2F;em&gt; -&amp;gt; &lt;em&gt;Create As Filter&lt;&#x2F;em&gt; -&amp;gt; Do this: Skip In-box, Apply label &amp;quot;Group Name&amp;quot;&lt;&#x2F;p&gt;
&lt;p&gt;Alternatively, instead of the manual filter entry, it&#x27;s possible to edit the following XML, and import it under GMail&#x27;s filter settings.&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;text xml&quot;&gt;&lt;span class=&quot;meta tag preprocessor xml&quot;&gt;&lt;span class=&quot;punctuation definition tag begin xml&quot;&gt;&amp;lt;?&lt;&#x2F;span&gt;&lt;span class=&quot;entity name tag xml&quot;&gt;xml&lt;&#x2F;span&gt; &lt;span class=&quot;entity other attribute-name localname xml&quot;&gt;version&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator key-value xml&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;string quoted single xml&quot;&gt;&lt;span class=&quot;punctuation definition string begin xml&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;1.0&lt;span class=&quot;punctuation definition string end xml&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;entity other attribute-name localname xml&quot;&gt;encoding&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator key-value xml&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;string quoted single xml&quot;&gt;&lt;span class=&quot;punctuation definition string begin xml&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;UTF-8&lt;span class=&quot;punctuation definition string end xml&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation definition tag end xml&quot;&gt;?&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta tag xml&quot;&gt;&lt;span class=&quot;punctuation definition tag begin xml&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;entity name tag localname xml&quot;&gt;feed&lt;&#x2F;span&gt; &lt;span class=&quot;entity other attribute-name localname xml&quot;&gt;xmlns&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator key-value xml&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;string quoted single xml&quot;&gt;&lt;span class=&quot;punctuation definition string begin xml&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;http:&#x2F;&#x2F;www.w3.org&#x2F;2005&#x2F;Atom&lt;span class=&quot;punctuation definition string end xml&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;entity other attribute-name namespace xml&quot;&gt;xmlns&lt;&#x2F;span&gt;&lt;span class=&quot;entity other attribute-name xml&quot;&gt;&lt;span class=&quot;punctuation separator namespace xml&quot;&gt;:&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;entity other attribute-name localname xml&quot;&gt;apps&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator key-value xml&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;string quoted single xml&quot;&gt;&lt;span class=&quot;punctuation definition string begin xml&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;http:&#x2F;&#x2F;schemas.google.com&#x2F;apps&#x2F;2006&lt;span class=&quot;punctuation definition string end xml&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation definition tag end xml&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
	&lt;span class=&quot;meta tag xml&quot;&gt;&lt;span class=&quot;punctuation definition tag begin xml&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;entity name tag localname xml&quot;&gt;title&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation definition tag end xml&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;Mail Filters&lt;span class=&quot;meta tag xml&quot;&gt;&lt;span class=&quot;punctuation definition tag begin xml&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span class=&quot;entity name tag localname xml&quot;&gt;title&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation definition tag end xml&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
	&lt;span class=&quot;meta tag xml&quot;&gt;&lt;span class=&quot;punctuation definition tag begin xml&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;entity name tag localname xml&quot;&gt;id&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation definition tag end xml&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;tag:mail.google.com,2008:filters:1458024047214,1458024071178&lt;span class=&quot;meta tag xml&quot;&gt;&lt;span class=&quot;punctuation definition tag begin xml&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span class=&quot;entity name tag localname xml&quot;&gt;id&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation definition tag end xml&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
	&lt;span class=&quot;meta tag xml&quot;&gt;&lt;span class=&quot;punctuation definition tag begin xml&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;entity name tag localname xml&quot;&gt;entry&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation definition tag end xml&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
		&lt;span class=&quot;meta tag xml&quot;&gt;&lt;span class=&quot;punctuation definition tag begin xml&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;entity name tag localname xml&quot;&gt;category&lt;&#x2F;span&gt; &lt;span class=&quot;entity other attribute-name localname xml&quot;&gt;term&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator key-value xml&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;string quoted single xml&quot;&gt;&lt;span class=&quot;punctuation definition string begin xml&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;filter&lt;span class=&quot;punctuation definition string end xml&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation definition tag end xml&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta tag xml&quot;&gt;&lt;span class=&quot;punctuation definition tag begin xml&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span class=&quot;entity name tag localname xml&quot;&gt;category&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation definition tag end xml&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
		&lt;span class=&quot;meta tag xml&quot;&gt;&lt;span class=&quot;punctuation definition tag begin xml&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;entity name tag localname xml&quot;&gt;title&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation definition tag end xml&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;Mail Filter&lt;span class=&quot;meta tag xml&quot;&gt;&lt;span class=&quot;punctuation definition tag begin xml&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span class=&quot;entity name tag localname xml&quot;&gt;title&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation definition tag end xml&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
		&lt;span class=&quot;meta tag xml&quot;&gt;&lt;span class=&quot;punctuation definition tag begin xml&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;entity name tag localname xml&quot;&gt;id&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation definition tag end xml&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;tag:mail.google.com,2008:filter:1458024047214&lt;span class=&quot;meta tag xml&quot;&gt;&lt;span class=&quot;punctuation definition tag begin xml&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span class=&quot;entity name tag localname xml&quot;&gt;id&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation definition tag end xml&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
		&lt;span class=&quot;meta tag xml&quot;&gt;&lt;span class=&quot;punctuation definition tag begin xml&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;entity name tag namespace xml&quot;&gt;apps&lt;&#x2F;span&gt;&lt;span class=&quot;entity name tag xml&quot;&gt;&lt;span class=&quot;punctuation separator namespace xml&quot;&gt;:&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;entity name tag localname xml&quot;&gt;property&lt;&#x2F;span&gt; &lt;span class=&quot;entity other attribute-name localname xml&quot;&gt;name&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator key-value xml&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;string quoted single xml&quot;&gt;&lt;span class=&quot;punctuation definition string begin xml&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;hasTheWord&lt;span class=&quot;punctuation definition string end xml&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;entity other attribute-name localname xml&quot;&gt;value&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator key-value xml&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;string quoted single xml&quot;&gt;&lt;span class=&quot;punctuation definition string begin xml&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;list:group.company.com to:your.name@organization.com&lt;span class=&quot;punctuation definition string end xml&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation definition tag end xml&quot;&gt;&#x2F;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
		&lt;span class=&quot;meta tag xml&quot;&gt;&lt;span class=&quot;punctuation definition tag begin xml&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;entity name tag namespace xml&quot;&gt;apps&lt;&#x2F;span&gt;&lt;span class=&quot;entity name tag xml&quot;&gt;&lt;span class=&quot;punctuation separator namespace xml&quot;&gt;:&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;entity name tag localname xml&quot;&gt;property&lt;&#x2F;span&gt; &lt;span class=&quot;entity other attribute-name localname xml&quot;&gt;name&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator key-value xml&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;string quoted single xml&quot;&gt;&lt;span class=&quot;punctuation definition string begin xml&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;label&lt;span class=&quot;punctuation definition string end xml&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;entity other attribute-name localname xml&quot;&gt;value&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator key-value xml&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;string quoted single xml&quot;&gt;&lt;span class=&quot;punctuation definition string begin xml&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;Dev&lt;span class=&quot;punctuation definition string end xml&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation definition tag end xml&quot;&gt;&#x2F;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
		&lt;span class=&quot;meta tag xml&quot;&gt;&lt;span class=&quot;punctuation definition tag begin xml&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;entity name tag namespace xml&quot;&gt;apps&lt;&#x2F;span&gt;&lt;span class=&quot;entity name tag xml&quot;&gt;&lt;span class=&quot;punctuation separator namespace xml&quot;&gt;:&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;entity name tag localname xml&quot;&gt;property&lt;&#x2F;span&gt; &lt;span class=&quot;entity other attribute-name localname xml&quot;&gt;name&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator key-value xml&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;string quoted single xml&quot;&gt;&lt;span class=&quot;punctuation definition string begin xml&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;sizeOperator&lt;span class=&quot;punctuation definition string end xml&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;entity other attribute-name localname xml&quot;&gt;value&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator key-value xml&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;string quoted single xml&quot;&gt;&lt;span class=&quot;punctuation definition string begin xml&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;s_sl&lt;span class=&quot;punctuation definition string end xml&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation definition tag end xml&quot;&gt;&#x2F;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
		&lt;span class=&quot;meta tag xml&quot;&gt;&lt;span class=&quot;punctuation definition tag begin xml&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;entity name tag namespace xml&quot;&gt;apps&lt;&#x2F;span&gt;&lt;span class=&quot;entity name tag xml&quot;&gt;&lt;span class=&quot;punctuation separator namespace xml&quot;&gt;:&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;entity name tag localname xml&quot;&gt;property&lt;&#x2F;span&gt; &lt;span class=&quot;entity other attribute-name localname xml&quot;&gt;name&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator key-value xml&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;string quoted single xml&quot;&gt;&lt;span class=&quot;punctuation definition string begin xml&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;sizeUnit&lt;span class=&quot;punctuation definition string end xml&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;entity other attribute-name localname xml&quot;&gt;value&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator key-value xml&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;string quoted single xml&quot;&gt;&lt;span class=&quot;punctuation definition string begin xml&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;s_smb&lt;span class=&quot;punctuation definition string end xml&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation definition tag end xml&quot;&gt;&#x2F;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
	&lt;span class=&quot;meta tag xml&quot;&gt;&lt;span class=&quot;punctuation definition tag begin xml&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span class=&quot;entity name tag localname xml&quot;&gt;entry&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation definition tag end xml&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
	&lt;span class=&quot;meta tag xml&quot;&gt;&lt;span class=&quot;punctuation definition tag begin xml&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;entity name tag localname xml&quot;&gt;entry&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation definition tag end xml&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
		&lt;span class=&quot;meta tag xml&quot;&gt;&lt;span class=&quot;punctuation definition tag begin xml&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;entity name tag localname xml&quot;&gt;category&lt;&#x2F;span&gt; &lt;span class=&quot;entity other attribute-name localname xml&quot;&gt;term&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator key-value xml&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;string quoted single xml&quot;&gt;&lt;span class=&quot;punctuation definition string begin xml&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;filter&lt;span class=&quot;punctuation definition string end xml&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation definition tag end xml&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta tag xml&quot;&gt;&lt;span class=&quot;punctuation definition tag begin xml&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span class=&quot;entity name tag localname xml&quot;&gt;category&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation definition tag end xml&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
		&lt;span class=&quot;meta tag xml&quot;&gt;&lt;span class=&quot;punctuation definition tag begin xml&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;entity name tag localname xml&quot;&gt;title&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation definition tag end xml&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;Mail Filter&lt;span class=&quot;meta tag xml&quot;&gt;&lt;span class=&quot;punctuation definition tag begin xml&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span class=&quot;entity name tag localname xml&quot;&gt;title&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation definition tag end xml&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
		&lt;span class=&quot;meta tag xml&quot;&gt;&lt;span class=&quot;punctuation definition tag begin xml&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;entity name tag localname xml&quot;&gt;id&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation definition tag end xml&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;tag:mail.google.com,2008:filter:1458024071178&lt;span class=&quot;meta tag xml&quot;&gt;&lt;span class=&quot;punctuation definition tag begin xml&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span class=&quot;entity name tag localname xml&quot;&gt;id&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation definition tag end xml&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
		&lt;span class=&quot;meta tag xml&quot;&gt;&lt;span class=&quot;punctuation definition tag begin xml&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;entity name tag namespace xml&quot;&gt;apps&lt;&#x2F;span&gt;&lt;span class=&quot;entity name tag xml&quot;&gt;&lt;span class=&quot;punctuation separator namespace xml&quot;&gt;:&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;entity name tag localname xml&quot;&gt;property&lt;&#x2F;span&gt; &lt;span class=&quot;entity other attribute-name localname xml&quot;&gt;name&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator key-value xml&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;string quoted single xml&quot;&gt;&lt;span class=&quot;punctuation definition string begin xml&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;hasTheWord&lt;span class=&quot;punctuation definition string end xml&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;entity other attribute-name localname xml&quot;&gt;value&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator key-value xml&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;string quoted single xml&quot;&gt;&lt;span class=&quot;punctuation definition string begin xml&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;list:group.company.com -to:your.name@organization.com&lt;span class=&quot;punctuation definition string end xml&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation definition tag end xml&quot;&gt;&#x2F;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
		&lt;span class=&quot;meta tag xml&quot;&gt;&lt;span class=&quot;punctuation definition tag begin xml&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;entity name tag namespace xml&quot;&gt;apps&lt;&#x2F;span&gt;&lt;span class=&quot;entity name tag xml&quot;&gt;&lt;span class=&quot;punctuation separator namespace xml&quot;&gt;:&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;entity name tag localname xml&quot;&gt;property&lt;&#x2F;span&gt; &lt;span class=&quot;entity other attribute-name localname xml&quot;&gt;name&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator key-value xml&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;string quoted single xml&quot;&gt;&lt;span class=&quot;punctuation definition string begin xml&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;label&lt;span class=&quot;punctuation definition string end xml&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;entity other attribute-name localname xml&quot;&gt;value&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator key-value xml&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;string quoted single xml&quot;&gt;&lt;span class=&quot;punctuation definition string begin xml&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;Dev&lt;span class=&quot;punctuation definition string end xml&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation definition tag end xml&quot;&gt;&#x2F;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
		&lt;span class=&quot;meta tag xml&quot;&gt;&lt;span class=&quot;punctuation definition tag begin xml&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;entity name tag namespace xml&quot;&gt;apps&lt;&#x2F;span&gt;&lt;span class=&quot;entity name tag xml&quot;&gt;&lt;span class=&quot;punctuation separator namespace xml&quot;&gt;:&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;entity name tag localname xml&quot;&gt;property&lt;&#x2F;span&gt; &lt;span class=&quot;entity other attribute-name localname xml&quot;&gt;name&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator key-value xml&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;string quoted single xml&quot;&gt;&lt;span class=&quot;punctuation definition string begin xml&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;shouldArchive&lt;span class=&quot;punctuation definition string end xml&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;entity other attribute-name localname xml&quot;&gt;value&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator key-value xml&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;string quoted single xml&quot;&gt;&lt;span class=&quot;punctuation definition string begin xml&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;true&lt;span class=&quot;punctuation definition string end xml&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation definition tag end xml&quot;&gt;&#x2F;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
		&lt;span class=&quot;meta tag xml&quot;&gt;&lt;span class=&quot;punctuation definition tag begin xml&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;entity name tag namespace xml&quot;&gt;apps&lt;&#x2F;span&gt;&lt;span class=&quot;entity name tag xml&quot;&gt;&lt;span class=&quot;punctuation separator namespace xml&quot;&gt;:&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;entity name tag localname xml&quot;&gt;property&lt;&#x2F;span&gt; &lt;span class=&quot;entity other attribute-name localname xml&quot;&gt;name&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator key-value xml&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;string quoted single xml&quot;&gt;&lt;span class=&quot;punctuation definition string begin xml&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;sizeOperator&lt;span class=&quot;punctuation definition string end xml&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;entity other attribute-name localname xml&quot;&gt;value&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator key-value xml&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;string quoted single xml&quot;&gt;&lt;span class=&quot;punctuation definition string begin xml&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;s_sl&lt;span class=&quot;punctuation definition string end xml&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation definition tag end xml&quot;&gt;&#x2F;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
		&lt;span class=&quot;meta tag xml&quot;&gt;&lt;span class=&quot;punctuation definition tag begin xml&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;entity name tag namespace xml&quot;&gt;apps&lt;&#x2F;span&gt;&lt;span class=&quot;entity name tag xml&quot;&gt;&lt;span class=&quot;punctuation separator namespace xml&quot;&gt;:&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;entity name tag localname xml&quot;&gt;property&lt;&#x2F;span&gt; &lt;span class=&quot;entity other attribute-name localname xml&quot;&gt;name&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator key-value xml&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;string quoted single xml&quot;&gt;&lt;span class=&quot;punctuation definition string begin xml&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;sizeUnit&lt;span class=&quot;punctuation definition string end xml&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;entity other attribute-name localname xml&quot;&gt;value&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator key-value xml&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;string quoted single xml&quot;&gt;&lt;span class=&quot;punctuation definition string begin xml&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;s_smb&lt;span class=&quot;punctuation definition string end xml&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation definition tag end xml&quot;&gt;&#x2F;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
	&lt;span class=&quot;meta tag xml&quot;&gt;&lt;span class=&quot;punctuation definition tag begin xml&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span class=&quot;entity name tag localname xml&quot;&gt;entry&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation definition tag end xml&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;meta tag xml&quot;&gt;&lt;span class=&quot;punctuation definition tag begin xml&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span class=&quot;entity name tag localname xml&quot;&gt;feed&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation definition tag end xml&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;</content>
	</entry>
	<entry xml:lang="en">
		<title>Performance of the ST Monad with Pure Exceptions</title>
		<published>2016-02-20T00:00:00+00:00</published>
		<updated>2016-02-20T00:00:00+00:00</updated>
		<link href="https://blog.aloni.org/posts/st-monad-perf-with-exceptions/" type="text/html"/>
		<id>https://blog.aloni.org/posts/st-monad-perf-with-exceptions/</id>
		<content type="html">&lt;p&gt;The &lt;span class=&#x27;external-link-outer&#x27;&gt;&lt;a class=&quot;external-link&quot;rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;wiki.haskell.org&#x2F;Monad&#x2F;ST&quot;&gt;ST Monad&lt;span class=&#x27;external-link-no-underline&#x27;&gt;&lt;&#x2F;span&gt;&lt;svg width=&#x27;13.5&#x27; height=&#x27;13.5&#x27; aria-hidden=&#x27;true&#x27; viewBox=&#x27;0 0 24 24&#x27; class=&#x27;iconExternalLink_wgqa&#x27;&gt;&lt;path fill=&#x27;currentColor&#x27; d=&#x27;M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z&#x27;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;span&gt; provides a venerable method in Haskell for writing stateful imperative code. Writing such code, in contrast to the non-stateful approach, is sometimes better. Some algorithms are better understood or better illustrated with states, and another reason is increased performance. The difference between &lt;code&gt;ST&lt;&#x2F;code&gt; and &lt;code&gt;IO&lt;&#x2F;code&gt; is important, because when we implement an algorithm, we only want to deal with the internal states and not bother with side effects that don&#x27;t belong to it. Allowing stateful algorithm to remain pure under &lt;code&gt;ST&lt;&#x2F;code&gt;, gives way to better code generation by the compiler.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;Some algorithms are better written with &lt;span class=&#x27;external-link-outer&#x27;&gt;&lt;a class=&quot;external-link&quot;rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;wiki.haskell.org&#x2F;Exception&quot;&gt;Exceptions&lt;span class=&#x27;external-link-no-underline&#x27;&gt;&lt;&#x2F;span&gt;&lt;svg width=&#x27;13.5&#x27; height=&#x27;13.5&#x27; aria-hidden=&#x27;true&#x27; viewBox=&#x27;0 0 24 24&#x27; class=&#x27;iconExternalLink_wgqa&#x27;&gt;&lt;path fill=&#x27;currentColor&#x27; d=&#x27;M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z&#x27;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;span&gt;. For example, an algorithm for validating an expression tree may be such one. However, one needs to be aware that exceptions in pure code can only be caught in &lt;code&gt;IO&lt;&#x2F;code&gt;, unless &lt;span class=&#x27;external-link-outer&#x27;&gt;&lt;a class=&quot;external-link&quot;rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;hackage.haskell.org&#x2F;package&#x2F;exceptions&quot;&gt;pure exceptions&lt;span class=&#x27;external-link-no-underline&#x27;&gt;&lt;&#x2F;span&gt;&lt;svg width=&#x27;13.5&#x27; height=&#x27;13.5&#x27; aria-hidden=&#x27;true&#x27; viewBox=&#x27;0 0 24 24&#x27; class=&#x27;iconExternalLink_wgqa&#x27;&gt;&lt;path fill=&#x27;currentColor&#x27; d=&#x27;M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z&#x27;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;span&gt; are used. We can use these pure exceptions under a &lt;span class=&#x27;external-link-outer&#x27;&gt;&lt;a class=&quot;external-link&quot;rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;book.realworldhaskell.org&#x2F;read&#x2F;monad-transformers.html&quot;&gt;monad transformer&lt;span class=&#x27;external-link-no-underline&#x27;&gt;&lt;&#x2F;span&gt;&lt;svg width=&#x27;13.5&#x27; height=&#x27;13.5&#x27; aria-hidden=&#x27;true&#x27; viewBox=&#x27;0 0 24 24&#x27; class=&#x27;iconExternalLink_wgqa&#x27;&gt;&lt;path fill=&#x27;currentColor&#x27; d=&#x27;M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z&#x27;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;span&gt;, but then we need to verify that there was no significant loss in performance. We suspect that the &lt;code&gt;CatchT&lt;&#x2F;code&gt; transformer would provide us a zero-cost abstraction, being a &lt;code&gt;newtype&lt;&#x2F;code&gt;. But how well would GHC succeed in optimizing away the transformations?&lt;&#x2F;p&gt;
&lt;h2 id=&quot;fibonacci-that-throws-for-kicks&quot;&gt;Fibonacci that throws, for kicks&lt;&#x2F;h2&gt;
&lt;p&gt;First, let us look at the example for &lt;code&gt;ST&lt;&#x2F;code&gt; brought from the &lt;span class=&#x27;external-link-outer&#x27;&gt;&lt;a class=&quot;external-link&quot;rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;wiki.haskell.org&#x2F;Monad&#x2F;ST&quot;&gt;Haskell Wiki&lt;span class=&#x27;external-link-no-underline&#x27;&gt;&lt;&#x2F;span&gt;&lt;svg width=&#x27;13.5&#x27; height=&#x27;13.5&#x27; aria-hidden=&#x27;true&#x27; viewBox=&#x27;0 0 24 24&#x27; class=&#x27;iconExternalLink_wgqa&#x27;&gt;&lt;path fill=&#x27;currentColor&#x27; d=&#x27;M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z&#x27;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;span&gt;, which presents us with the stateful implementation of computing the n-th Fibonacci number:&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;source haskell&quot;&gt;&lt;span class=&quot;meta function type-declaration haskell&quot;&gt;&lt;span class=&quot;entity name function haskell&quot;&gt;fibST&lt;&#x2F;span&gt; &lt;span class=&quot;keyword other double-colon haskell&quot;&gt;::&lt;&#x2F;span&gt; &lt;span class=&quot;storage type haskell&quot;&gt;Integer&lt;&#x2F;span&gt; &lt;span class=&quot;keyword other arrow haskell&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;storage type haskell&quot;&gt;Integer&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;fibST n &lt;span class=&quot;keyword operator haskell&quot;&gt;=&lt;&#x2F;span&gt;
    &lt;span class=&quot;keyword control haskell&quot;&gt;if&lt;&#x2F;span&gt; n &lt;span class=&quot;keyword operator haskell&quot;&gt;&amp;lt;&lt;&#x2F;span&gt; &lt;span class=&quot;constant numeric integer decimal haskell&quot;&gt;2&lt;&#x2F;span&gt;
        &lt;span class=&quot;keyword control haskell&quot;&gt;then&lt;&#x2F;span&gt; n
        &lt;span class=&quot;keyword control haskell&quot;&gt;else&lt;&#x2F;span&gt; runST &lt;span class=&quot;keyword operator haskell&quot;&gt;$&lt;&#x2F;span&gt; &lt;span class=&quot;keyword control haskell&quot;&gt;do&lt;&#x2F;span&gt; x &lt;span class=&quot;keyword operator haskell&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt; newSTRef &lt;span class=&quot;constant numeric integer decimal haskell&quot;&gt;0&lt;&#x2F;span&gt;
                        y &lt;span class=&quot;keyword operator haskell&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt; newSTRef &lt;span class=&quot;constant numeric integer decimal haskell&quot;&gt;1&lt;&#x2F;span&gt;
                        fibST&amp;#39; n x y

    &lt;span class=&quot;keyword other haskell&quot;&gt;where&lt;&#x2F;span&gt; fibST&amp;#39; &lt;span class=&quot;constant numeric integer decimal haskell&quot;&gt;0&lt;&#x2F;span&gt; x _ &lt;span class=&quot;keyword operator haskell&quot;&gt;=&lt;&#x2F;span&gt; readSTRef x
          fibST&amp;#39; n&amp;#39; x y &lt;span class=&quot;keyword operator haskell&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;keyword control haskell&quot;&gt;do&lt;&#x2F;span&gt;
              x&amp;#39; &lt;span class=&quot;keyword operator haskell&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt; readSTRef x
              y&amp;#39; &lt;span class=&quot;keyword operator haskell&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt; readSTRef y
              writeSTRef x y&amp;#39;
              writeSTRef y &lt;span class=&quot;keyword operator haskell&quot;&gt;$!&lt;&#x2F;span&gt; x&amp;#39;&lt;span class=&quot;keyword operator haskell&quot;&gt;+&lt;&#x2F;span&gt;y&amp;#39;
              fibST&amp;#39; (n&amp;#39; &lt;span class=&quot;keyword operator haskell&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;constant numeric integer decimal haskell&quot;&gt;1&lt;&#x2F;span&gt;) x y
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;p&gt;We would like to test the performance of pure exceptions. So, let us have a slightly modified version of it, being a modulo of Fibonacci using &lt;code&gt;Int&lt;&#x2F;code&gt;. The change of type from &lt;code&gt;Integer&lt;&#x2F;code&gt; to &lt;code&gt;Int&lt;&#x2F;code&gt; would be better for us when measuring performance, otherwise the run would have spent time adding really big numbers in each one of the loop iterations.&lt;&#x2F;p&gt;
&lt;p&gt;We will use this new &lt;code&gt;Exception&lt;&#x2F;code&gt; type,&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;source haskell&quot;&gt;&lt;span class=&quot;keyword other haskell&quot;&gt;data&lt;&#x2F;span&gt; &lt;span class=&quot;constant other haskell&quot;&gt;MyException&lt;&#x2F;span&gt; &lt;span class=&quot;keyword operator haskell&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;constant other haskell&quot;&gt;MyException&lt;&#x2F;span&gt; &lt;span class=&quot;constant other haskell&quot;&gt;Int&lt;&#x2F;span&gt;
  &lt;span class=&quot;keyword other haskell&quot;&gt;deriving&lt;&#x2F;span&gt; &lt;span class=&quot;constant other haskell&quot;&gt;Show&lt;&#x2F;span&gt;
&lt;span class=&quot;meta declaration instance haskell&quot;&gt;&lt;span class=&quot;keyword other haskell&quot;&gt;instance&lt;&#x2F;span&gt; &lt;span class=&quot;storage type haskell&quot;&gt;Exception&lt;&#x2F;span&gt; &lt;span class=&quot;storage type haskell&quot;&gt;MyException&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;p&gt;... and modify the function in various ways:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Have the caller use &lt;code&gt;runST&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Change the type signature bear &lt;code&gt;Int&lt;&#x2F;code&gt; and be under &lt;code&gt;ST&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Add a throw to some exception along the way.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;source haskell&quot;&gt;&lt;span class=&quot;sourceMarker&quot;&gt;fibMod  &lt;span class=&quot;keyword operator haskell&quot;&gt;::&lt;&#x2F;span&gt; &lt;span class=&quot;constant other haskell&quot;&gt;Int&lt;&#x2F;span&gt; &lt;span class=&quot;keyword operator haskell&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;constant other haskell&quot;&gt;ST&lt;&#x2F;span&gt; s &lt;span class=&quot;constant other haskell&quot;&gt;Int&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;sourceMarker&quot;&gt;fibMod n &lt;span class=&quot;keyword operator haskell&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;keyword control haskell&quot;&gt;do&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
    &lt;span class=&quot;keyword control haskell&quot;&gt;if&lt;&#x2F;span&gt; n &lt;span class=&quot;keyword operator haskell&quot;&gt;&amp;lt;&lt;&#x2F;span&gt; &lt;span class=&quot;constant numeric integer decimal haskell&quot;&gt;2&lt;&#x2F;span&gt;
       &lt;span class=&quot;keyword control haskell&quot;&gt;then&lt;&#x2F;span&gt; &lt;span class=&quot;sourceMarker&quot;&gt;return n&lt;&#x2F;span&gt;
       &lt;span class=&quot;keyword control haskell&quot;&gt;else&lt;&#x2F;span&gt; &lt;span class=&quot;keyword control haskell&quot;&gt;do&lt;&#x2F;span&gt; x &lt;span class=&quot;keyword operator haskell&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt; newSTRef &lt;span class=&quot;constant numeric integer decimal haskell&quot;&gt;0&lt;&#x2F;span&gt;
               y &lt;span class=&quot;keyword operator haskell&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt; newSTRef &lt;span class=&quot;constant numeric integer decimal haskell&quot;&gt;1&lt;&#x2F;span&gt;
               fibMod&amp;#39; n x y

    &lt;span class=&quot;keyword other haskell&quot;&gt;where&lt;&#x2F;span&gt;
        fibMod&amp;#39; &lt;span class=&quot;constant numeric integer decimal haskell&quot;&gt;0&lt;&#x2F;span&gt; x _ &lt;span class=&quot;keyword operator haskell&quot;&gt;=&lt;&#x2F;span&gt; readSTRef x
        fibMod&amp;#39; n&amp;#39; x y &lt;span class=&quot;keyword operator haskell&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;keyword control haskell&quot;&gt;do&lt;&#x2F;span&gt;
            x&amp;#39; &lt;span class=&quot;keyword operator haskell&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt; readSTRef x
            y&amp;#39; &lt;span class=&quot;keyword operator haskell&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt; readSTRef y
            &lt;span class=&quot;sourceMarker&quot;&gt;when (n&amp;#39; &lt;span class=&quot;keyword operator haskell&quot;&gt;==&lt;&#x2F;span&gt; &lt;span class=&quot;constant numeric integer decimal haskell&quot;&gt;1000&lt;&#x2F;span&gt;) &lt;span class=&quot;keyword operator haskell&quot;&gt;$&lt;&#x2F;span&gt; &lt;span class=&quot;keyword control haskell&quot;&gt;do&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
                &lt;span class=&quot;sourceMarker&quot;&gt;throw &lt;span class=&quot;keyword operator haskell&quot;&gt;$&lt;&#x2F;span&gt; &lt;span class=&quot;constant other haskell&quot;&gt;MyException&lt;&#x2F;span&gt; x&amp;#39; &lt;span class=&quot;comment line double-dash haskell&quot;&gt;&lt;span class=&quot;punctuation definition comment haskell&quot;&gt;--&lt;&#x2F;span&gt; not a pure exception (yet!)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;            writeSTRef x y&amp;#39;
            writeSTRef y &lt;span class=&quot;keyword operator haskell&quot;&gt;$!&lt;&#x2F;span&gt; x&amp;#39;&lt;span class=&quot;keyword operator haskell&quot;&gt;+&lt;&#x2F;span&gt;y&amp;#39;
            fibMod&amp;#39; (n&amp;#39;&lt;span class=&quot;keyword operator haskell&quot;&gt;-&lt;&#x2F;span&gt;&lt;span class=&quot;constant numeric integer decimal haskell&quot;&gt;1&lt;&#x2F;span&gt;) x y
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;p&gt;We have yet to add a &lt;code&gt;catch&lt;&#x2F;code&gt; anywhere. The problem is that we cannot have a pure function in &lt;code&gt;ST&lt;&#x2F;code&gt; doing &lt;code&gt;catch&lt;&#x2F;code&gt;, because &lt;code&gt;catch :: (Exception e, MonadCatch m) =&amp;gt; m a -&amp;gt; (e -&amp;gt; m a) -&amp;gt; m a&lt;&#x2F;code&gt;. If we try to use &lt;code&gt;catch&lt;&#x2F;code&gt;, we will get the error &lt;code&gt;No instance for (MonadCatch (ST s))&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;To solve, we shall use the &lt;code&gt;ST&lt;&#x2F;code&gt; monad with &lt;code&gt;CatchT&lt;&#x2F;code&gt;. First, we define &lt;code&gt;STCatch&lt;&#x2F;code&gt; type synonym for a short hand:&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;source haskell&quot;&gt;&lt;span class=&quot;keyword other haskell&quot;&gt;type&lt;&#x2F;span&gt; &lt;span class=&quot;constant other haskell&quot;&gt;STCatch&lt;&#x2F;span&gt; s a &lt;span class=&quot;keyword operator haskell&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;constant other haskell&quot;&gt;CatchT&lt;&#x2F;span&gt; (&lt;span class=&quot;constant other haskell&quot;&gt;ST&lt;&#x2F;span&gt; s) a
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;p&gt;Now, let us create our &lt;code&gt;fibMod_E&lt;&#x2F;code&gt; variant, which is under &lt;code&gt;STCatch&lt;&#x2F;code&gt;, and modify it to use pure exceptions, thrown using &lt;code&gt;throwM&lt;&#x2F;code&gt;. We will also add a &lt;code&gt;catch&lt;&#x2F;code&gt; wrap, which will fix &lt;code&gt;fibMod_E&lt;&#x2F;code&gt; to return &lt;code&gt;-1&lt;&#x2F;code&gt; on the thrown exception. The &lt;code&gt;catch&lt;&#x2F;code&gt; is conditional, so we can see its effect depending on the use.&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;source haskell&quot;&gt;&lt;span class=&quot;meta function type-declaration haskell&quot;&gt;&lt;span class=&quot;entity name function haskell&quot;&gt;fibMod_E&lt;&#x2F;span&gt; &lt;span class=&quot;keyword other double-colon haskell&quot;&gt;::&lt;&#x2F;span&gt; &lt;span class=&quot;storage type haskell&quot;&gt;Int&lt;&#x2F;span&gt; &lt;span class=&quot;keyword other arrow haskell&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;sourceMarker&quot;&gt;&lt;span class=&quot;storage type haskell&quot;&gt;STCatch&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;variable other generic-type haskell&quot;&gt;s&lt;&#x2F;span&gt; &lt;span class=&quot;storage type haskell&quot;&gt;Int&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;fibMod_E n &lt;span class=&quot;keyword operator haskell&quot;&gt;=&lt;&#x2F;span&gt;
    &lt;span class=&quot;keyword control haskell&quot;&gt;if&lt;&#x2F;span&gt; n &lt;span class=&quot;keyword operator haskell&quot;&gt;&amp;lt;&lt;&#x2F;span&gt; &lt;span class=&quot;constant numeric integer decimal haskell&quot;&gt;2&lt;&#x2F;span&gt;
       &lt;span class=&quot;keyword control haskell&quot;&gt;then&lt;&#x2F;span&gt; return n
       &lt;span class=&quot;keyword control haskell&quot;&gt;else&lt;&#x2F;span&gt; &lt;span class=&quot;keyword control haskell&quot;&gt;do&lt;&#x2F;span&gt; x &lt;span class=&quot;keyword operator haskell&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt; &lt;span class=&quot;sourceMarker&quot;&gt;lift &lt;span class=&quot;keyword operator haskell&quot;&gt;$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; newSTRef &lt;span class=&quot;constant numeric integer decimal haskell&quot;&gt;0&lt;&#x2F;span&gt;
               y &lt;span class=&quot;keyword operator haskell&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt; &lt;span class=&quot;sourceMarker&quot;&gt;lift &lt;span class=&quot;keyword operator haskell&quot;&gt;$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; newSTRef &lt;span class=&quot;constant numeric integer decimal haskell&quot;&gt;1&lt;&#x2F;span&gt;
               fibMod&amp;#39; n x y

    &lt;span class=&quot;keyword other haskell&quot;&gt;where&lt;&#x2F;span&gt;
        fibMod&amp;#39; &lt;span class=&quot;constant numeric integer decimal haskell&quot;&gt;0&lt;&#x2F;span&gt; x _ &lt;span class=&quot;keyword operator haskell&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;sourceMarker&quot;&gt;lift &lt;span class=&quot;keyword operator haskell&quot;&gt;$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; readSTRef x
        fibMod&amp;#39; n&amp;#39; x y &lt;span class=&quot;keyword operator haskell&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;keyword control haskell&quot;&gt;do&lt;&#x2F;span&gt;
            x&amp;#39; &lt;span class=&quot;keyword operator haskell&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt; &lt;span class=&quot;sourceMarker&quot;&gt;lift &lt;span class=&quot;keyword operator haskell&quot;&gt;$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; readSTRef x
            y&amp;#39; &lt;span class=&quot;keyword operator haskell&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt; &lt;span class=&quot;sourceMarker&quot;&gt;lift &lt;span class=&quot;keyword operator haskell&quot;&gt;$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; readSTRef y
            &lt;span class=&quot;sourceMarker&quot;&gt;lift &lt;span class=&quot;keyword operator haskell&quot;&gt;$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; writeSTRef x y&amp;#39;
            &lt;span class=&quot;sourceMarker&quot;&gt;lift &lt;span class=&quot;keyword operator haskell&quot;&gt;$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; writeSTRef y &lt;span class=&quot;keyword operator haskell&quot;&gt;$!&lt;&#x2F;span&gt; x&amp;#39;&lt;span class=&quot;keyword operator haskell&quot;&gt;+&lt;&#x2F;span&gt;y&amp;#39;
            when (abs n&amp;#39; &lt;span class=&quot;keyword operator haskell&quot;&gt;==&lt;&#x2F;span&gt; &lt;span class=&quot;constant numeric integer decimal haskell&quot;&gt;1000&lt;&#x2F;span&gt;) &lt;span class=&quot;keyword operator haskell&quot;&gt;$&lt;&#x2F;span&gt; &lt;span class=&quot;keyword control haskell&quot;&gt;do&lt;&#x2F;span&gt;
                &lt;span class=&quot;sourceMarker&quot;&gt;throwM&lt;&#x2F;span&gt; &lt;span class=&quot;keyword operator haskell&quot;&gt;$&lt;&#x2F;span&gt; &lt;span class=&quot;constant other haskell&quot;&gt;MyException&lt;&#x2F;span&gt; x&amp;#39;

            &lt;span class=&quot;sourceMarker&quot;&gt;&lt;span class=&quot;keyword other haskell&quot;&gt;let&lt;&#x2F;span&gt; recurse &lt;span class=&quot;keyword operator haskell&quot;&gt;=&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; fibMod&amp;#39; (n&amp;#39;&lt;span class=&quot;keyword operator haskell&quot;&gt;-&lt;&#x2F;span&gt;&lt;span class=&quot;constant numeric integer decimal haskell&quot;&gt;1&lt;&#x2F;span&gt;) x y
            &lt;span class=&quot;sourceMarker&quot;&gt;&lt;span class=&quot;keyword control haskell&quot;&gt;if&lt;&#x2F;span&gt; n &lt;span class=&quot;keyword operator haskell&quot;&gt;&amp;lt;=&lt;&#x2F;span&gt; &lt;span class=&quot;constant numeric integer decimal haskell&quot;&gt;25000000&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
               &lt;span class=&quot;sourceMarker&quot;&gt;&lt;span class=&quot;keyword control haskell&quot;&gt;then&lt;&#x2F;span&gt; recurse&lt;&#x2F;span&gt;
               &lt;span class=&quot;sourceMarker&quot;&gt;&lt;span class=&quot;keyword control haskell&quot;&gt;else&lt;&#x2F;span&gt; catch recurse (&lt;span class=&quot;keyword operator haskell&quot;&gt;\&lt;&#x2F;span&gt;(&lt;span class=&quot;constant other haskell&quot;&gt;MyException&lt;&#x2F;span&gt; _) &lt;span class=&quot;keyword operator haskell&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; return (&lt;span class=&quot;keyword operator haskell&quot;&gt;-&lt;&#x2F;span&gt;&lt;span class=&quot;constant numeric integer decimal haskell&quot;&gt;1&lt;&#x2F;span&gt;))&lt;&#x2F;span&gt;

&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;p&gt;Can we degrade an &lt;code&gt;ST&lt;&#x2F;code&gt; exception back to an &lt;code&gt;IO&lt;&#x2F;code&gt; exception? Yes! Using the following function, that requires the &lt;code&gt;RankNTypes&lt;&#x2F;code&gt; extension for its type signature:&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;source haskell&quot;&gt;&lt;span class=&quot;comment line double-dash haskell&quot;&gt;&lt;span class=&quot;punctuation definition comment haskell&quot;&gt;--&lt;&#x2F;span&gt; | A variant of `runST` for STCatch that turns all _uncaught_
&lt;&#x2F;span&gt;&lt;span class=&quot;comment line double-dash haskell&quot;&gt;&lt;span class=&quot;punctuation definition comment haskell&quot;&gt;--&lt;&#x2F;span&gt; &amp;#39;throwM&amp;#39; exceptions back to exceptions thrown in `IO`.
&lt;&#x2F;span&gt;&lt;span class=&quot;meta function type-declaration haskell&quot;&gt;&lt;span class=&quot;entity name function haskell&quot;&gt;runSTthrowIO&lt;&#x2F;span&gt; &lt;span class=&quot;keyword other double-colon haskell&quot;&gt;::&lt;&#x2F;span&gt; (&lt;span class=&quot;variable other generic-type haskell&quot;&gt;forall&lt;&#x2F;span&gt; &lt;span class=&quot;variable other generic-type haskell&quot;&gt;s&lt;&#x2F;span&gt;. &lt;span class=&quot;storage type haskell&quot;&gt;STCatch&lt;&#x2F;span&gt; &lt;span class=&quot;variable other generic-type haskell&quot;&gt;s&lt;&#x2F;span&gt; &lt;span class=&quot;variable other generic-type haskell&quot;&gt;a&lt;&#x2F;span&gt;) &lt;span class=&quot;keyword other arrow haskell&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;variable other generic-type haskell&quot;&gt;a&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;runSTthrowIO action &lt;span class=&quot;keyword operator haskell&quot;&gt;=&lt;&#x2F;span&gt;
    &lt;span class=&quot;keyword other haskell&quot;&gt;case&lt;&#x2F;span&gt; runST &lt;span class=&quot;keyword operator haskell&quot;&gt;$&lt;&#x2F;span&gt; runCatchT action &lt;span class=&quot;keyword other haskell&quot;&gt;of&lt;&#x2F;span&gt;
        &lt;span class=&quot;constant other haskell&quot;&gt;Left&lt;&#x2F;span&gt; e &lt;span class=&quot;keyword operator haskell&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; throw e
        &lt;span class=&quot;constant other haskell&quot;&gt;Right&lt;&#x2F;span&gt; r &lt;span class=&quot;keyword operator haskell&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; r
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;&lt;h2 id=&quot;testing&quot;&gt;Testing&lt;&#x2F;h2&gt;
&lt;p&gt;Now we are ready for testing. We will use the following utility, depending on &lt;span class=&#x27;external-link-outer&#x27;&gt;&lt;a class=&quot;external-link&quot;rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;hackage.haskell.org&#x2F;package&#x2F;criterion&quot;&gt;criterion&lt;span class=&#x27;external-link-no-underline&#x27;&gt;&lt;&#x2F;span&gt;&lt;svg width=&#x27;13.5&#x27; height=&#x27;13.5&#x27; aria-hidden=&#x27;true&#x27; viewBox=&#x27;0 0 24 24&#x27; class=&#x27;iconExternalLink_wgqa&#x27;&gt;&lt;path fill=&#x27;currentColor&#x27; d=&#x27;M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z&#x27;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;span&gt;:&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;source haskell&quot;&gt;&lt;span class=&quot;meta function type-declaration haskell&quot;&gt;&lt;span class=&quot;entity name function haskell&quot;&gt;timeIt&lt;&#x2F;span&gt; &lt;span class=&quot;keyword other double-colon haskell&quot;&gt;::&lt;&#x2F;span&gt; &lt;span class=&quot;storage type haskell&quot;&gt;IO&lt;&#x2F;span&gt; &lt;span class=&quot;support constant unit haskell&quot;&gt;()&lt;&#x2F;span&gt; &lt;span class=&quot;keyword other arrow haskell&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;storage type haskell&quot;&gt;IO&lt;&#x2F;span&gt; &lt;span class=&quot;support constant unit haskell&quot;&gt;()&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;timeIt act &lt;span class=&quot;keyword operator haskell&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;keyword control haskell&quot;&gt;do&lt;&#x2F;span&gt;
    &lt;span class=&quot;keyword other haskell&quot;&gt;let&lt;&#x2F;span&gt; w&amp;#39;act &lt;span class=&quot;keyword operator haskell&quot;&gt;=&lt;&#x2F;span&gt; whnfIO &lt;span class=&quot;keyword operator haskell&quot;&gt;$&lt;&#x2F;span&gt; catch act err
        err &lt;span class=&quot;keyword operator haskell&quot;&gt;=&lt;&#x2F;span&gt; (&lt;span class=&quot;keyword operator haskell&quot;&gt;\&lt;&#x2F;span&gt;e@(&lt;span class=&quot;constant other haskell&quot;&gt;MyException&lt;&#x2F;span&gt; _) &lt;span class=&quot;keyword operator haskell&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; putStrLn &lt;span class=&quot;keyword operator haskell&quot;&gt;$&lt;&#x2F;span&gt; &lt;span class=&quot;string quoted double haskell&quot;&gt;&lt;span class=&quot;punctuation definition string begin haskell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;caught: &lt;span class=&quot;punctuation definition string end haskell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;keyword operator haskell&quot;&gt;++&lt;&#x2F;span&gt; show e)
    t &lt;span class=&quot;keyword operator haskell&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt; measure w&amp;#39;act &lt;span class=&quot;constant numeric integer decimal haskell&quot;&gt;1&lt;&#x2F;span&gt;
    putStrLn &lt;span class=&quot;keyword operator haskell&quot;&gt;$&lt;&#x2F;span&gt; &lt;span class=&quot;string quoted double haskell&quot;&gt;&lt;span class=&quot;punctuation definition string begin haskell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Total time: &lt;span class=&quot;punctuation definition string end haskell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;keyword operator haskell&quot;&gt;++&lt;&#x2F;span&gt; show (measTime &lt;span class=&quot;keyword operator haskell&quot;&gt;$&lt;&#x2F;span&gt; fst t)
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;p&gt;We shall test with various recursion depths, on the two fuctions under discussion:&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;source haskell&quot;&gt;&lt;span class=&quot;meta function type-declaration haskell&quot;&gt;&lt;span class=&quot;entity name function haskell&quot;&gt;main&lt;&#x2F;span&gt; &lt;span class=&quot;keyword other double-colon haskell&quot;&gt;::&lt;&#x2F;span&gt; &lt;span class=&quot;storage type haskell&quot;&gt;IO&lt;&#x2F;span&gt; &lt;span class=&quot;support constant unit haskell&quot;&gt;()&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;main &lt;span class=&quot;keyword operator haskell&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;keyword control haskell&quot;&gt;do&lt;&#x2F;span&gt;
    putStrLn &lt;span class=&quot;string quoted double haskell&quot;&gt;&lt;span class=&quot;punctuation definition string begin haskell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;------ With lots of catches&lt;span class=&quot;punctuation definition string end haskell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
    timeIt &lt;span class=&quot;keyword operator haskell&quot;&gt;$&lt;&#x2F;span&gt; print &lt;span class=&quot;keyword operator haskell&quot;&gt;$&lt;&#x2F;span&gt; runST        &lt;span class=&quot;keyword operator haskell&quot;&gt;$&lt;&#x2F;span&gt; fibMod   &lt;span class=&quot;constant numeric integer decimal haskell&quot;&gt;50000000&lt;&#x2F;span&gt;
    timeIt &lt;span class=&quot;keyword operator haskell&quot;&gt;$&lt;&#x2F;span&gt; print &lt;span class=&quot;keyword operator haskell&quot;&gt;$&lt;&#x2F;span&gt; runSTthrowIO &lt;span class=&quot;keyword operator haskell&quot;&gt;$&lt;&#x2F;span&gt; fibMod_E &lt;span class=&quot;constant numeric integer decimal haskell&quot;&gt;50000000&lt;&#x2F;span&gt;
    putStrLn &lt;span class=&quot;string quoted double haskell&quot;&gt;&lt;span class=&quot;punctuation definition string begin haskell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span class=&quot;constant character escape haskell&quot;&gt;\n&lt;&#x2F;span&gt;------ With just one catch&lt;span class=&quot;punctuation definition string end haskell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
    timeIt &lt;span class=&quot;keyword operator haskell&quot;&gt;$&lt;&#x2F;span&gt; print &lt;span class=&quot;keyword operator haskell&quot;&gt;$&lt;&#x2F;span&gt; runST        &lt;span class=&quot;keyword operator haskell&quot;&gt;$&lt;&#x2F;span&gt; fibMod   &lt;span class=&quot;constant numeric integer decimal haskell&quot;&gt;25000001&lt;&#x2F;span&gt;
    timeIt &lt;span class=&quot;keyword operator haskell&quot;&gt;$&lt;&#x2F;span&gt; print &lt;span class=&quot;keyword operator haskell&quot;&gt;$&lt;&#x2F;span&gt; runSTthrowIO &lt;span class=&quot;keyword operator haskell&quot;&gt;$&lt;&#x2F;span&gt; fibMod_E &lt;span class=&quot;constant numeric integer decimal haskell&quot;&gt;25000001&lt;&#x2F;span&gt;
    putStrLn &lt;span class=&quot;string quoted double haskell&quot;&gt;&lt;span class=&quot;punctuation definition string begin haskell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span class=&quot;constant character escape haskell&quot;&gt;\n&lt;&#x2F;span&gt;------ With no catch&lt;span class=&quot;punctuation definition string end haskell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
    timeIt &lt;span class=&quot;keyword operator haskell&quot;&gt;$&lt;&#x2F;span&gt; print &lt;span class=&quot;keyword operator haskell&quot;&gt;$&lt;&#x2F;span&gt; runST        &lt;span class=&quot;keyword operator haskell&quot;&gt;$&lt;&#x2F;span&gt; fibMod   &lt;span class=&quot;constant numeric integer decimal haskell&quot;&gt;25000000&lt;&#x2F;span&gt;
    timeIt &lt;span class=&quot;keyword operator haskell&quot;&gt;$&lt;&#x2F;span&gt; print &lt;span class=&quot;keyword operator haskell&quot;&gt;$&lt;&#x2F;span&gt; runSTthrowIO &lt;span class=&quot;keyword operator haskell&quot;&gt;$&lt;&#x2F;span&gt; fibMod_E &lt;span class=&quot;constant numeric integer decimal haskell&quot;&gt;25000000&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;p&gt;And the result is:&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;text plain&quot;&gt;------ With lots of catches
caught: MyException (-5541175486947481557)
Total time: 0.6768422469031066
-1
Total time: 1.5523557260166854

------ With just one catch
caught: MyException 5934185968946882193
Total time: 0.32111207104753703
-1
Total time: 0.7558517289580777

------ With no catch
caught: MyException 4809429493926266912
Total time: 0.32045713800471276
caught: MyException 4809429493926266912
&lt;span class=&quot;sourceMarker&quot;&gt;Total time: 0.26791215199045837&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;p&gt;The first two results are of no surprise. Both the &lt;code&gt;if&lt;&#x2F;code&gt; and &lt;code&gt;catch&lt;&#x2F;code&gt; incur their overheads. The last result is more peculiar, because it suggests that the code for &lt;code&gt;fibMod_E&lt;&#x2F;code&gt; emanated from the compiler is &lt;em&gt;even faster&lt;&#x2F;em&gt;, despite of the &lt;code&gt;if&lt;&#x2F;code&gt;, as long as there are no wrapping &lt;code&gt;catch&lt;&#x2F;code&gt;&#x27;s in the evaluation. The difference probably boils down to the generated machine code, but I&#x27;d leave that to a topic of a different post.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;a-few-extra-tests&quot;&gt;A few extra tests&lt;&#x2F;h2&gt;
&lt;p&gt;(edit: added March 2, 2016)&lt;&#x2F;p&gt;
&lt;p&gt;Edward Kmett &lt;span class=&#x27;external-link-outer&#x27;&gt;&lt;a class=&quot;external-link&quot;rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;haskell&#x2F;comments&#x2F;47evoh&#x2F;performance_of_the_st_monad_with_pure_exceptions&#x2F;d0cj9z1&quot;&gt;pointed out&lt;span class=&#x27;external-link-no-underline&#x27;&gt;&lt;&#x2F;span&gt;&lt;svg width=&#x27;13.5&#x27; height=&#x27;13.5&#x27; aria-hidden=&#x27;true&#x27; viewBox=&#x27;0 0 24 24&#x27; class=&#x27;iconExternalLink_wgqa&#x27;&gt;&lt;path fill=&#x27;currentColor&#x27; d=&#x27;M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z&#x27;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;span&gt; on Reddit that perhaps it would be interesting to test with &lt;code&gt;unsafeSTToIO&lt;&#x2F;code&gt;. So I&#x27;ve added the following cases (and also regenerated the results above, because every little change can affect the optimizer, and they varied slightly).&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;source haskell&quot;&gt;    putStrLn &lt;span class=&quot;string quoted double haskell&quot;&gt;&lt;span class=&quot;punctuation definition string begin haskell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;------ With lots of catches&lt;span class=&quot;punctuation definition string end haskell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
    timeIt &lt;span class=&quot;keyword operator haskell&quot;&gt;$&lt;&#x2F;span&gt; (unsafeSTToIO &lt;span class=&quot;keyword operator haskell&quot;&gt;$&lt;&#x2F;span&gt; fibMod   &lt;span class=&quot;constant numeric integer decimal haskell&quot;&gt;50000000&lt;&#x2F;span&gt;) &lt;span class=&quot;keyword operator haskell&quot;&gt;&amp;gt;&amp;gt;=&lt;&#x2F;span&gt; print
    putStrLn &lt;span class=&quot;string quoted double haskell&quot;&gt;&lt;span class=&quot;punctuation definition string begin haskell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span class=&quot;constant character escape haskell&quot;&gt;\n&lt;&#x2F;span&gt;------ With just one catch&lt;span class=&quot;punctuation definition string end haskell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
    timeIt &lt;span class=&quot;keyword operator haskell&quot;&gt;$&lt;&#x2F;span&gt; (unsafeSTToIO &lt;span class=&quot;keyword operator haskell&quot;&gt;$&lt;&#x2F;span&gt; fibMod   &lt;span class=&quot;constant numeric integer decimal haskell&quot;&gt;25000001&lt;&#x2F;span&gt;) &lt;span class=&quot;keyword operator haskell&quot;&gt;&amp;gt;&amp;gt;=&lt;&#x2F;span&gt; print
    putStrLn &lt;span class=&quot;string quoted double haskell&quot;&gt;&lt;span class=&quot;punctuation definition string begin haskell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span class=&quot;constant character escape haskell&quot;&gt;\n&lt;&#x2F;span&gt;------ With no catch&lt;span class=&quot;punctuation definition string end haskell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
    timeIt &lt;span class=&quot;keyword operator haskell&quot;&gt;$&lt;&#x2F;span&gt; (unsafeSTToIO &lt;span class=&quot;keyword operator haskell&quot;&gt;$&lt;&#x2F;span&gt; fibMod   &lt;span class=&quot;constant numeric integer decimal haskell&quot;&gt;25000000&lt;&#x2F;span&gt;) &lt;span class=&quot;keyword operator haskell&quot;&gt;&amp;gt;&amp;gt;=&lt;&#x2F;span&gt; print
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;p&gt;The additional output is:&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;text plain&quot;&gt;------ With lots of catches
caught: MyException (-5541175486947481557)
Total time: 0.5766234899638221

------ With just one catch
caught: MyException 5934185968946882193
Total time: 0.2883113300194964

------ With no catch
caught: MyException 4809429493926266912
&lt;span class=&quot;sourceMarker&quot;&gt;Total time: 0.29055844293907285&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;p&gt;For the first two cases the result are around 11% better than the pure &lt;code&gt;runST&lt;&#x2F;code&gt;. Interestingly, for the third one &lt;code&gt;runSTthrowIO&lt;&#x2F;code&gt; still wins.&lt;&#x2F;p&gt;
&lt;p&gt;An even more drastic approach is to use &lt;code&gt;unsafeIOToST&lt;&#x2F;code&gt; and &lt;code&gt;unsafeSTToIO&lt;&#x2F;code&gt; in conjunction, modifying the original &lt;code&gt;fibMod&lt;&#x2F;code&gt;, allowing to freely insert the less pure &lt;code&gt;IO&lt;&#x2F;code&gt;-based &lt;code&gt;catch&lt;&#x2F;code&gt; while keeping it in &lt;code&gt;ST&lt;&#x2F;code&gt; only from an API&#x27;s perspective. It&#x27;s not entirely sound in terms of exception handling, but it is worth presenting.&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;source haskell&quot;&gt;&lt;span class=&quot;meta function type-declaration haskell&quot;&gt;&lt;span class=&quot;entity name function haskell&quot;&gt;fibMod_H&lt;&#x2F;span&gt; &lt;span class=&quot;keyword other double-colon haskell&quot;&gt;::&lt;&#x2F;span&gt; &lt;span class=&quot;storage type haskell&quot;&gt;Int&lt;&#x2F;span&gt; &lt;span class=&quot;keyword other arrow haskell&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;storage type haskell&quot;&gt;ST&lt;&#x2F;span&gt; &lt;span class=&quot;variable other generic-type haskell&quot;&gt;s&lt;&#x2F;span&gt; &lt;span class=&quot;storage type haskell&quot;&gt;Int&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;fibMod_H n &lt;span class=&quot;keyword operator haskell&quot;&gt;=&lt;&#x2F;span&gt;
    &lt;span class=&quot;keyword control haskell&quot;&gt;if&lt;&#x2F;span&gt; n &lt;span class=&quot;keyword operator haskell&quot;&gt;&amp;lt;&lt;&#x2F;span&gt; &lt;span class=&quot;constant numeric integer decimal haskell&quot;&gt;2&lt;&#x2F;span&gt;
       &lt;span class=&quot;keyword control haskell&quot;&gt;then&lt;&#x2F;span&gt; return n
       &lt;span class=&quot;keyword control haskell&quot;&gt;else&lt;&#x2F;span&gt; &lt;span class=&quot;keyword control haskell&quot;&gt;do&lt;&#x2F;span&gt; x &lt;span class=&quot;keyword operator haskell&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt; newSTRef &lt;span class=&quot;constant numeric integer decimal haskell&quot;&gt;0&lt;&#x2F;span&gt;
               y &lt;span class=&quot;keyword operator haskell&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt; newSTRef &lt;span class=&quot;constant numeric integer decimal haskell&quot;&gt;1&lt;&#x2F;span&gt;
               fibMod&amp;#39; n x y

    &lt;span class=&quot;keyword other haskell&quot;&gt;where&lt;&#x2F;span&gt;
        fibMod&amp;#39; &lt;span class=&quot;constant numeric integer decimal haskell&quot;&gt;0&lt;&#x2F;span&gt; x _ &lt;span class=&quot;keyword operator haskell&quot;&gt;=&lt;&#x2F;span&gt; readSTRef x
        fibMod&amp;#39; n&amp;#39; x y &lt;span class=&quot;keyword operator haskell&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;keyword control haskell&quot;&gt;do&lt;&#x2F;span&gt;
            x&amp;#39; &lt;span class=&quot;keyword operator haskell&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt; readSTRef x
            y&amp;#39; &lt;span class=&quot;keyword operator haskell&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt; readSTRef y
            writeSTRef x y&amp;#39;
            writeSTRef y &lt;span class=&quot;keyword operator haskell&quot;&gt;$!&lt;&#x2F;span&gt; x&amp;#39;&lt;span class=&quot;keyword operator haskell&quot;&gt;+&lt;&#x2F;span&gt;y&amp;#39;
            when (n&amp;#39; &lt;span class=&quot;keyword operator haskell&quot;&gt;==&lt;&#x2F;span&gt; &lt;span class=&quot;constant numeric integer decimal haskell&quot;&gt;1000&lt;&#x2F;span&gt;) &lt;span class=&quot;keyword operator haskell&quot;&gt;$&lt;&#x2F;span&gt; &lt;span class=&quot;keyword control haskell&quot;&gt;do&lt;&#x2F;span&gt;
                throw &lt;span class=&quot;keyword operator haskell&quot;&gt;$&lt;&#x2F;span&gt; &lt;span class=&quot;constant other haskell&quot;&gt;MyException&lt;&#x2F;span&gt; x&amp;#39;

            &lt;span class=&quot;keyword other haskell&quot;&gt;let&lt;&#x2F;span&gt; recurse &lt;span class=&quot;keyword operator haskell&quot;&gt;=&lt;&#x2F;span&gt; fibMod&amp;#39; (n&amp;#39;&lt;span class=&quot;keyword operator haskell&quot;&gt;-&lt;&#x2F;span&gt;&lt;span class=&quot;constant numeric integer decimal haskell&quot;&gt;1&lt;&#x2F;span&gt;) x y
            &lt;span class=&quot;keyword control haskell&quot;&gt;if&lt;&#x2F;span&gt; n &lt;span class=&quot;keyword operator haskell&quot;&gt;&amp;lt;=&lt;&#x2F;span&gt; &lt;span class=&quot;constant numeric integer decimal haskell&quot;&gt;25000000&lt;&#x2F;span&gt;
               &lt;span class=&quot;keyword control haskell&quot;&gt;then&lt;&#x2F;span&gt; recurse
               &lt;span class=&quot;keyword control haskell&quot;&gt;else&lt;&#x2F;span&gt; &lt;span class=&quot;sourceMarker&quot;&gt;unsafeIOToST &lt;span class=&quot;keyword operator haskell&quot;&gt;$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
                       catch (&lt;span class=&quot;sourceMarker&quot;&gt;unsafeSTToIO&lt;&#x2F;span&gt; recurse)
				       (&lt;span class=&quot;keyword operator haskell&quot;&gt;\&lt;&#x2F;span&gt;(&lt;span class=&quot;constant other haskell&quot;&gt;MyException&lt;&#x2F;span&gt; _) &lt;span class=&quot;keyword operator haskell&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; return (&lt;span class=&quot;keyword operator haskell&quot;&gt;-&lt;&#x2F;span&gt;&lt;span class=&quot;constant numeric integer decimal haskell&quot;&gt;1&lt;&#x2F;span&gt;))
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;p&gt;With the prints:&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;source haskell&quot;&gt;    putStrLn &lt;span class=&quot;string quoted double haskell&quot;&gt;&lt;span class=&quot;punctuation definition string begin haskell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;------ With lots of catches&lt;span class=&quot;punctuation definition string end haskell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
    timeIt &lt;span class=&quot;keyword operator haskell&quot;&gt;$&lt;&#x2F;span&gt; print &lt;span class=&quot;keyword operator haskell&quot;&gt;$&lt;&#x2F;span&gt; runST        &lt;span class=&quot;keyword operator haskell&quot;&gt;$&lt;&#x2F;span&gt; fibMod_H &lt;span class=&quot;constant numeric integer decimal haskell&quot;&gt;50000000&lt;&#x2F;span&gt;
    putStrLn &lt;span class=&quot;string quoted double haskell&quot;&gt;&lt;span class=&quot;punctuation definition string begin haskell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span class=&quot;constant character escape haskell&quot;&gt;\n&lt;&#x2F;span&gt;------ With just one catch&lt;span class=&quot;punctuation definition string end haskell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
    timeIt &lt;span class=&quot;keyword operator haskell&quot;&gt;$&lt;&#x2F;span&gt; print &lt;span class=&quot;keyword operator haskell&quot;&gt;$&lt;&#x2F;span&gt; runST        &lt;span class=&quot;keyword operator haskell&quot;&gt;$&lt;&#x2F;span&gt; fibMod_H &lt;span class=&quot;constant numeric integer decimal haskell&quot;&gt;25000001&lt;&#x2F;span&gt;
    putStrLn &lt;span class=&quot;string quoted double haskell&quot;&gt;&lt;span class=&quot;punctuation definition string begin haskell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span class=&quot;constant character escape haskell&quot;&gt;\n&lt;&#x2F;span&gt;------ With no catch&lt;span class=&quot;punctuation definition string end haskell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
    timeIt &lt;span class=&quot;keyword operator haskell&quot;&gt;$&lt;&#x2F;span&gt; print &lt;span class=&quot;keyword operator haskell&quot;&gt;$&lt;&#x2F;span&gt; runST        &lt;span class=&quot;keyword operator haskell&quot;&gt;$&lt;&#x2F;span&gt; fibMod_H &lt;span class=&quot;constant numeric integer decimal haskell&quot;&gt;25000000&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;p&gt;However, it does not improve on our cases:&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;text plain&quot;&gt;------ With lots of catches
-1
Total time: 3.401594614959322

------ With just one catch
-1
Total time: 1.2730798620032147

------ With no catch
caught: MyException 4809429493926266912
Total time: 0.30070900300052017
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;p&gt;The first two cases are considerably worse, and the third is still a bit better than using &lt;code&gt;STCatch&lt;&#x2F;code&gt;, but it&#x27;s not a representative of the common case where &lt;code&gt;catch&lt;&#x2F;code&gt; is probably going to appear in the evaluation at least once. Final conclusion is that pure exceptions are still a win, if we wish to remain sound.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Toward Better GHC Syntax Errors</title>
		<published>2015-04-06T00:00:00+00:00</published>
		<updated>2015-04-06T00:00:00+00:00</updated>
		<link href="https://blog.aloni.org/posts/toward-better-ghc-syntax-errors/" type="text/html"/>
		<id>https://blog.aloni.org/posts/toward-better-ghc-syntax-errors/</id>
		<content type="html">&lt;p&gt;As a neophyte to functional programming and &lt;span class=&#x27;external-link-outer&#x27;&gt;&lt;a class=&quot;external-link&quot;rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.haskell.org&quot;&gt;Haskell&lt;span class=&#x27;external-link-no-underline&#x27;&gt;&lt;&#x2F;span&gt;&lt;svg width=&#x27;13.5&#x27; height=&#x27;13.5&#x27; aria-hidden=&#x27;true&#x27; viewBox=&#x27;0 0 24 24&#x27; class=&#x27;iconExternalLink_wgqa&#x27;&gt;&lt;path fill=&#x27;currentColor&#x27; d=&#x27;M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z&#x27;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;span&gt;, with full appreciation over the succinctly outputted type errors, for a long time I felt something was remiss with the output of syntax errors. In this post I present a preliminary fix to GHC that improves in the aforementioned arena.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;Like many other compilers who have not yet forsaken the annotated BNF approach of describing a syntax and parser, Haskell&#x27;s prominent compiler &lt;span class=&#x27;external-link-outer&#x27;&gt;&lt;a class=&quot;external-link&quot;rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.haskell.org&#x2F;ghc&#x2F;&quot;&gt;GHC&lt;span class=&#x27;external-link-no-underline&#x27;&gt;&lt;&#x2F;span&gt;&lt;svg width=&#x27;13.5&#x27; height=&#x27;13.5&#x27; aria-hidden=&#x27;true&#x27; viewBox=&#x27;0 0 24 24&#x27; class=&#x27;iconExternalLink_wgqa&#x27;&gt;&lt;path fill=&#x27;currentColor&#x27; d=&#x27;M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z&#x27;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;span&gt; uses &lt;span class=&#x27;external-link-outer&#x27;&gt;&lt;a class=&quot;external-link&quot;rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.haskell.org&#x2F;happy&#x2F;&quot;&gt;Happy&lt;span class=&#x27;external-link-no-underline&#x27;&gt;&lt;&#x2F;span&gt;&lt;svg width=&#x27;13.5&#x27; height=&#x27;13.5&#x27; aria-hidden=&#x27;true&#x27; viewBox=&#x27;0 0 24 24&#x27; class=&#x27;iconExternalLink_wgqa&#x27;&gt;&lt;path fill=&#x27;currentColor&#x27; d=&#x27;M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z&#x27;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;span&gt; in order to generate efficient parsing tables for the syntax.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-problem&quot;&gt;The problem&lt;&#x2F;h2&gt;
&lt;p&gt;While there are some hand-coded hints about errors being detected while compiling a module with GHC, other errors sometimes don&#x27;t provide any extra information.&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;codeTitle&quot; colspan=&quot;2&quot;&gt;example 1 - source&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td class=&quot;lineNumbers&quot;&gt;&lt;div class=&quot;lineNumbersDiv&quot;&gt;&lt;pre&gt;1
2
&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;rd&gt;&lt;td class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;source haskell&quot;&gt;test i &lt;span class=&quot;keyword operator haskell&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;keyword other haskell&quot;&gt;case&lt;&#x2F;span&gt; i &lt;span class=&quot;keyword other haskell&quot;&gt;of&lt;&#x2F;span&gt; &lt;span class=&quot;constant numeric integer decimal haskell&quot;&gt;2&lt;&#x2F;span&gt;
main &lt;span class=&quot;keyword operator haskell&quot;&gt;=&lt;&#x2F;span&gt; return &lt;span class=&quot;constant language unit haskell&quot;&gt;()&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;codeTitle&quot; colspan=&quot;2&quot;&gt;example 1 - output&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;text plain&quot;&gt;example1.hs:2:1:
    parse error (possibly incorrect indentation or mismatched brackets)
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;p&gt;And another example:&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;codeTitle&quot; colspan=&quot;2&quot;&gt;example 2 - source&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td class=&quot;lineNumbers&quot;&gt;&lt;div class=&quot;lineNumbersDiv&quot;&gt;&lt;pre&gt;1
2
3
4
&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;rd&gt;&lt;td class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;source haskell&quot;&gt;test i &lt;span class=&quot;keyword operator haskell&quot;&gt;=&lt;&#x2F;span&gt; i
  &lt;span class=&quot;keyword other haskell&quot;&gt;where&lt;&#x2F;span&gt; e

main &lt;span class=&quot;keyword operator haskell&quot;&gt;=&lt;&#x2F;span&gt; return &lt;span class=&quot;constant language unit haskell&quot;&gt;()&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;codeTitle&quot; colspan=&quot;2&quot;&gt;example 2 - output&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;text plain&quot;&gt;example2.hs:4:1:
    parse error (possibly incorrect indentation or mismatched brackets)
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;p&gt;As you can see, we have the same error on both occasions. Is it possible to generate an error message that differentiates between the two, automatically? Apparently yes.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;making-it-happier&quot;&gt;Making it happier&lt;&#x2F;h2&gt;
&lt;p&gt;Thanks to the parsing tables, the parser does know which tokens can follow at the place of the error. So, I took the time to &lt;span class=&#x27;external-link-outer&#x27;&gt;&lt;a class=&quot;external-link&quot;rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;da-x&#x2F;happy&#x2F;commits&#x2F;master&quot;&gt;modify Happy&lt;span class=&#x27;external-link-no-underline&#x27;&gt;&lt;&#x2F;span&gt;&lt;svg width=&#x27;13.5&#x27; height=&#x27;13.5&#x27; aria-hidden=&#x27;true&#x27; viewBox=&#x27;0 0 24 24&#x27; class=&#x27;iconExternalLink_wgqa&#x27;&gt;&lt;path fill=&#x27;currentColor&#x27; d=&#x27;M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z&#x27;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;span&gt; and &lt;span class=&#x27;external-link-outer&#x27;&gt;&lt;a class=&quot;external-link&quot;rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;da-x&#x2F;ghc&#x2F;commits&#x2F;ghc-7.10-with-fixes&quot;&gt;modify GHC&lt;span class=&#x27;external-link-no-underline&#x27;&gt;&lt;&#x2F;span&gt;&lt;svg width=&#x27;13.5&#x27; height=&#x27;13.5&#x27; aria-hidden=&#x27;true&#x27; viewBox=&#x27;0 0 24 24&#x27; class=&#x27;iconExternalLink_wgqa&#x27;&gt;&lt;path fill=&#x27;currentColor&#x27; d=&#x27;M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z&#x27;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;span&gt; to produce the following results. The gist of these changes is to allow passing the list of &lt;strong&gt;next possible tokens&lt;&#x2F;strong&gt; to the user-provided error function. The results are not perfect, but they are interesting nonetheless.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s repeat the previous examples and add some more.&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;codeTitle&quot; colspan=&quot;2&quot;&gt;example 1 - source&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td class=&quot;lineNumbers&quot;&gt;&lt;div class=&quot;lineNumbersDiv&quot;&gt;&lt;pre&gt;1
2
&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;rd&gt;&lt;td class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;source haskell&quot;&gt;test i &lt;span class=&quot;keyword operator haskell&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;keyword other haskell&quot;&gt;case&lt;&#x2F;span&gt; i &lt;span class=&quot;keyword other haskell&quot;&gt;of&lt;&#x2F;span&gt; &lt;span class=&quot;constant numeric integer decimal haskell&quot;&gt;2&lt;&#x2F;span&gt;
main &lt;span class=&quot;keyword operator haskell&quot;&gt;=&lt;&#x2F;span&gt; return &lt;span class=&quot;constant language unit haskell&quot;&gt;()&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;codeTitle&quot; colspan=&quot;2&quot;&gt;example 1 - output&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;text plain&quot;&gt;example1.hs:2:1:
    parse error (possibly incorrect indentation or mismatched brackets), possible tokens: &amp;#39;|&amp;#39; &amp;#39;-&amp;gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;p&gt;And for the second example:&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;codeTitle&quot; colspan=&quot;2&quot;&gt;example 2 - source&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td class=&quot;lineNumbers&quot;&gt;&lt;div class=&quot;lineNumbersDiv&quot;&gt;&lt;pre&gt;1
2
3
4
&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;rd&gt;&lt;td class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;source haskell&quot;&gt;test i &lt;span class=&quot;keyword operator haskell&quot;&gt;=&lt;&#x2F;span&gt; i
  &lt;span class=&quot;keyword other haskell&quot;&gt;where&lt;&#x2F;span&gt; e

main &lt;span class=&quot;keyword operator haskell&quot;&gt;=&lt;&#x2F;span&gt; return &lt;span class=&quot;constant language unit haskell&quot;&gt;()&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;codeTitle&quot; colspan=&quot;2&quot;&gt;example 2 - output&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;text plain&quot;&gt;example2.hs:4:1:
    parse error (possibly incorrect indentation or mismatched brackets), possible tokens: &amp;#39;=&amp;#39; &amp;#39;|&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;p&gt;A third example:&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;codeTitle&quot; colspan=&quot;2&quot;&gt;example 3 - source&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td class=&quot;lineNumbers&quot;&gt;&lt;div class=&quot;lineNumbersDiv&quot;&gt;&lt;pre&gt;1
2
3
4
&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;rd&gt;&lt;td class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;source haskell&quot;&gt;&lt;span class=&quot;keyword other haskell&quot;&gt;data&lt;&#x2F;span&gt; &lt;span class=&quot;constant other haskell&quot;&gt;X&lt;&#x2F;span&gt; &lt;span class=&quot;keyword operator haskell&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;constant other haskell&quot;&gt;X&lt;&#x2F;span&gt; {
&lt;span class=&quot;meta function type-declaration haskell&quot;&gt;    &lt;span class=&quot;entity name function haskell&quot;&gt;bla&lt;&#x2F;span&gt; &lt;span class=&quot;keyword other double-colon haskell&quot;&gt;::&lt;&#x2F;span&gt; &lt;span class=&quot;storage type haskell&quot;&gt;Int&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;meta function type-declaration haskell&quot;&gt;    &lt;span class=&quot;entity name function haskell&quot;&gt;test&lt;&#x2F;span&gt; &lt;span class=&quot;keyword other double-colon haskell&quot;&gt;::&lt;&#x2F;span&gt; &lt;span class=&quot;storage type haskell&quot;&gt;Int&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;  }
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;codeTitle&quot; colspan=&quot;2&quot;&gt;example 3 - output&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;text plain&quot;&gt;example3.hs:3:10:
    parse error on input, possible tokens: &amp;#39;}&amp;#39; â€˜::â€™
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;p&gt;The avid reader would wonder at this point, why &#x27;::&#x27; is mentioned and &#x27;,&#x27; is not mentioned in the possible tokens list. We observe that the error is after &#x27;Int test&#x27;, probably much deeper and in a different syntax production than the one that defines each part of a record. With more time I would examine the &lt;code&gt;Action&lt;&#x2F;code&gt; and &lt;code&gt;Goto&lt;&#x2F;code&gt; tables generated by Happy from the extensive definition of the syntax in GHC.&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;codeTitle&quot; colspan=&quot;2&quot;&gt;example 4 - source&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td class=&quot;lineNumbers&quot;&gt;&lt;div class=&quot;lineNumbersDiv&quot;&gt;&lt;pre&gt;1
2
3
4
5
6
&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;rd&gt;&lt;td class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;source haskell&quot;&gt;&lt;span class=&quot;keyword other haskell&quot;&gt;data&lt;&#x2F;span&gt; &lt;span class=&quot;constant other haskell&quot;&gt;X&lt;&#x2F;span&gt; &lt;span class=&quot;keyword operator haskell&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;constant other haskell&quot;&gt;X&lt;&#x2F;span&gt; {
&lt;span class=&quot;meta function type-declaration haskell&quot;&gt;    &lt;span class=&quot;entity name function haskell&quot;&gt;bla&lt;&#x2F;span&gt; &lt;span class=&quot;keyword other double-colon haskell&quot;&gt;::&lt;&#x2F;span&gt; &lt;span class=&quot;storage type haskell&quot;&gt;Int&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;  &lt;span class=&quot;punctuation separator comma haskell&quot;&gt;,&lt;&#x2F;span&gt; test &lt;span class=&quot;keyword operator haskell&quot;&gt;::&lt;&#x2F;span&gt; &lt;span class=&quot;constant other haskell&quot;&gt;Int&lt;&#x2F;span&gt;
  } &lt;span class=&quot;keyword other haskell&quot;&gt;deriving&lt;&#x2F;span&gt;

main &lt;span class=&quot;keyword operator haskell&quot;&gt;=&lt;&#x2F;span&gt; return &lt;span class=&quot;constant language unit haskell&quot;&gt;()&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;codeTitle&quot; colspan=&quot;2&quot;&gt;example 4 - output&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;text plain&quot;&gt;example4.hs:6:1:
    parse error (possibly incorrect indentation or mismatched brackets), possible tokens: &amp;#39;(&amp;#39; CONID QCONID PREFIXQCONSYM
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;p&gt;Here it gets more interesting, because the parser now outputs token identifiers that are not just punctuation or operators, but user-defined identifier strings. These are the same names used when defining the syntax.&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;codeTitle&quot; colspan=&quot;2&quot;&gt;example 5 - source&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td class=&quot;lineNumbers&quot;&gt;&lt;div class=&quot;lineNumbersDiv&quot;&gt;&lt;pre&gt;1
&lt;&#x2F;pre&gt;&lt;&#x2F;div&gt;&lt;&#x2F;rd&gt;&lt;td class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;source haskell&quot;&gt;main &lt;span class=&quot;keyword operator haskell&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;keyword operator haskell&quot;&gt;=&lt;&#x2F;span&gt; return &lt;span class=&quot;constant language unit haskell&quot;&gt;()&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;codeTitle&quot; colspan=&quot;2&quot;&gt;example 5 - output&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;text plain&quot;&gt;example5.hs:1:8:
    parse error on input, possible tokens: &amp;#39;_&amp;#39; &amp;#39;as&amp;#39; &amp;#39;case&amp;#39; &amp;#39;do&amp;#39; &amp;#39;hiding&amp;#39; &amp;#39;if&amp;#39; &amp;#39;let&amp;#39; &amp;#39;qualified&amp;#39; &amp;#39;forall&amp;#39; &amp;#39;export&amp;#39; &amp;#39;label&amp;#39; &amp;#39;dynamic&amp;#39; &amp;#39;safe&amp;#39; &amp;#39;interruptible&amp;#39; &amp;#39;unsafe&amp;#39; &amp;#39;mdo&amp;#39; &amp;#39;family&amp;#39; &amp;#39;role&amp;#39; &amp;#39;stdcall&amp;#39; &amp;#39;ccall&amp;#39; &amp;#39;capi&amp;#39; &amp;#39;prim&amp;#39; &amp;#39;javascript&amp;#39; &amp;#39;proc&amp;#39; &amp;#39;group&amp;#39; &amp;#39;static&amp;#39; &amp;#39;{-# CORE&amp;#39; &amp;#39;{-# SCC&amp;#39; &amp;#39;{-# GENERATED&amp;#39; &amp;#39;\\&amp;#39; &amp;#39;~&amp;#39; &amp;#39;-&amp;#39; &amp;#39;[&amp;#39; &amp;#39;[:&amp;#39; &amp;#39;(&amp;#39; &amp;#39;(#&amp;#39; &amp;#39;(|&amp;#39; SIMPLEQUOTE VARID CONID QVARID QCONID PREFIXQVARSYM PREFIXQCONSYM IPDUPVARID CHAR STRING INTEGER RATIONAL PRIMCHAR PRIMSTRING PRIMINTEGER PRIMWORD PRIMFLOAT PRIMDOUBLE &amp;#39;[|&amp;#39; &amp;#39;[p|&amp;#39; &amp;#39;[t|&amp;#39; &amp;#39;[d|&amp;#39; &amp;#39;[||&amp;#39; TH_ID_SPLICE &amp;#39;$(&amp;#39; TH_ID_TY_SPLICE &amp;#39;$$(&amp;#39; TH_TY_QUOTE TH_QUASIQUOTE TH_QQUASIQUOTE â€˜=â€™

&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;p&gt;Obviously, there are many things that could come instead of the second &lt;code&gt;=&lt;&#x2F;code&gt;. Perhaps it would require some community debate regarding how to present this behemoth list of possible tokens to the user in this case.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Build Maneuverings with External Linux Kernel Modules</title>
		<published>2014-12-12T00:00:00+00:00</published>
		<updated>2014-12-12T00:00:00+00:00</updated>
		<link href="https://blog.aloni.org/posts/build-maneuverings-with-external-linux-kernel-modules/" type="text/html"/>
		<id>https://blog.aloni.org/posts/build-maneuverings-with-external-linux-kernel-modules/</id>
		<content type="html">&lt;p&gt;Much of the material relating to writing &lt;span class=&#x27;external-link-outer&#x27;&gt;&lt;a class=&quot;external-link&quot;rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Linux_kernel&quot;&gt;Linux kernel&lt;span class=&#x27;external-link-no-underline&#x27;&gt;&lt;&#x2F;span&gt;&lt;svg width=&#x27;13.5&#x27; height=&#x27;13.5&#x27; aria-hidden=&#x27;true&#x27; viewBox=&#x27;0 0 24 24&#x27; class=&#x27;iconExternalLink_wgqa&#x27;&gt;&lt;path fill=&#x27;currentColor&#x27; d=&#x27;M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z&#x27;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;span&gt; modules does not discuss the scenario where you would like to replace existing kernel code or a driver with a wrapping interface, or a whole new implementation of the same component, or another scenario where you have one external kernel module that depends on another. Our Linux kernel is a standalone component and it doesn&#x27;t like these sort of tricks, but its build system is advanced enough to allow to implement them cleanly.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h2 id=&quot;first-just-a-plain-old-module&quot;&gt;First, just a plain-old module&lt;&#x2F;h2&gt;
&lt;p&gt;To demonstrate the topics I am about to discuss, let&#x27;s create a simple kernel module that we can work with:&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;codeTitle&quot; colspan=&quot;2&quot;&gt;foo&#x2F;Makefile&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;source makefile&quot;&gt;&lt;span class=&quot;variable other makefile&quot;&gt;foo-objs&lt;&#x2F;span&gt; &lt;span class=&quot;keyword operator assignment makefile&quot;&gt;+=&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;source makefile&quot;&gt;&lt;span class=&quot;meta string makefile&quot;&gt;&lt;span class=&quot;string unquoted makefile&quot;&gt;foo-main.o&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;variable other makefile&quot;&gt;obj-m&lt;&#x2F;span&gt; &lt;span class=&quot;keyword operator assignment makefile&quot;&gt;+=&lt;&#x2F;span&gt; &lt;span class=&quot;meta string makefile&quot;&gt;&lt;span class=&quot;string unquoted makefile&quot;&gt;foo.o&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;p&gt;The following .gitignore file can be used:&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;codeTitle&quot; colspan=&quot;2&quot;&gt;.gitignore&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;text plain&quot;&gt;*.o
*.mod.o
*.ko
.*
modules.order
Module.symvers
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;p&gt;The C file can be very minimal for now:&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;codeTitle&quot; colspan=&quot;2&quot;&gt;foo&#x2F;foo-main.c&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;source c&quot;&gt;&lt;span class=&quot;meta preprocessor include c&quot;&gt;&lt;span class=&quot;keyword control import include c&quot;&gt;#include&lt;&#x2F;span&gt; &lt;span class=&quot;string quoted other lt-gt include c&quot;&gt;&lt;span class=&quot;punctuation definition string begin c&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;linux&#x2F;kernel.h&lt;span class=&quot;punctuation definition string end c&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;
&lt;span class=&quot;storage type c&quot;&gt;void&lt;&#x2F;span&gt; &lt;span class=&quot;meta function c&quot;&gt;&lt;span class=&quot;entity name function c&quot;&gt;foo_export&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function parameters c&quot;&gt;&lt;span class=&quot;meta group c&quot;&gt;&lt;span class=&quot;punctuation section group begin c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function parameters c&quot;&gt;&lt;span class=&quot;meta group c&quot;&gt;&lt;span class=&quot;storage type c&quot;&gt;void&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section group end c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function c&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;meta function c&quot;&gt;&lt;span class=&quot;meta block c&quot;&gt;&lt;span class=&quot;punctuation section block begin c&quot;&gt;{&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function c&quot;&gt;&lt;span class=&quot;meta block c&quot;&gt;
	&lt;span class=&quot;meta function-call c&quot;&gt;&lt;span class=&quot;variable function c&quot;&gt;printk&lt;&#x2F;span&gt;&lt;span class=&quot;meta group c&quot;&gt;&lt;span class=&quot;punctuation section group begin c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call c&quot;&gt;&lt;span class=&quot;meta group c&quot;&gt;KERN_DEBUG &lt;span class=&quot;string quoted double c&quot;&gt;&lt;span class=&quot;punctuation definition string begin c&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;foo_export called&lt;span class=&quot;constant character escape c&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation definition string end c&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call c&quot;&gt;&lt;span class=&quot;meta group c&quot;&gt;&lt;span class=&quot;punctuation section group end c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation terminator c&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function c&quot;&gt;&lt;span class=&quot;meta block c&quot;&gt;&lt;span class=&quot;punctuation section block end c&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;meta function-call c&quot;&gt;&lt;span class=&quot;variable function c&quot;&gt;EXPORT_SYMBOL&lt;&#x2F;span&gt;&lt;span class=&quot;meta group c&quot;&gt;&lt;span class=&quot;punctuation section group begin c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call c&quot;&gt;&lt;span class=&quot;meta group c&quot;&gt;foo_export&lt;&#x2F;span&gt;&lt;span class=&quot;meta group c&quot;&gt;&lt;span class=&quot;punctuation section group end c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation terminator c&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;p&gt;Building it for the currently running kernel is quite simple:&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;text plain&quot;&gt;$ make -C &#x2F;lib&#x2F;modules&#x2F;`uname -r`&#x2F;source M=`pwd`&#x2F;foo
make: Entering directory `&#x2F;usr&#x2F;src&#x2F;kernels&#x2F;3.17.3-200.fc20.x86_64&amp;#39;
  CC [M]  &#x2F;home&#x2F;dan&#x2F;module&#x2F;foo&#x2F;foo-main.o
  LD [M]  &#x2F;home&#x2F;dan&#x2F;module&#x2F;foo&#x2F;foo.o
  Building modules, stage 2.
  MODPOST 1 modules
  LD [M]  &#x2F;home&#x2F;dan&#x2F;module&#x2F;foo&#x2F;foo.ko
make: Leaving directory `&#x2F;usr&#x2F;src&#x2F;kernels&#x2F;3.17.3-200.fc20.x86_64&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;p&gt;We should be able to load it via &lt;code&gt;insmod foo&#x2F;foo.ko&lt;&#x2F;code&gt;. But, since the module does not do anything, and does not register on any subsystem, it is effectively just a library. A novice reader can add call to &lt;code&gt;foo_export&lt;&#x2F;code&gt; on module init. For now we will continue to focus on the building scriptology in this post.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;prepare-for-external-access&quot;&gt;Prepare for external access&lt;&#x2F;h2&gt;
&lt;p&gt;We would like for another module to use our kernel code. But first, we need to export it via the standard C means, because &lt;code&gt;EXPORT_MODULE&lt;&#x2F;code&gt; is not enough - this just tells the kernel that it is okay to link against &lt;code&gt;foo_export&lt;&#x2F;code&gt; in module load time.&lt;&#x2F;p&gt;
&lt;p&gt;So we add this header under &lt;code&gt;foo&#x2F;include&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;codeTitle&quot; colspan=&quot;2&quot;&gt;foo&#x2F;include&#x2F;foo&#x2F;foo.h&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;source c&quot;&gt;&lt;span class=&quot;meta preprocessor c&quot;&gt;&lt;span class=&quot;keyword control import c&quot;&gt;#ifndef&lt;&#x2F;span&gt; __FOO_MAIN_H__
&lt;&#x2F;span&gt;&lt;span class=&quot;meta preprocessor macro c&quot;&gt;&lt;span class=&quot;keyword control import define c&quot;&gt;#define&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta preprocessor macro c&quot;&gt; &lt;span class=&quot;entity name constant preprocessor c&quot;&gt;__FOO_MAIN_H__&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;

&lt;span class=&quot;storage type c&quot;&gt;void&lt;&#x2F;span&gt; &lt;span class=&quot;meta function c&quot;&gt;&lt;span class=&quot;entity name function c&quot;&gt;foo_export&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function parameters c&quot;&gt;&lt;span class=&quot;meta group c&quot;&gt;&lt;span class=&quot;punctuation section group begin c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function parameters c&quot;&gt;&lt;span class=&quot;meta group c&quot;&gt;&lt;span class=&quot;storage type c&quot;&gt;void&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section group end c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation terminator c&quot;&gt;;&lt;&#x2F;span&gt;

&lt;span class=&quot;meta preprocessor c&quot;&gt;&lt;span class=&quot;keyword control import c&quot;&gt;#endif&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;p&gt;We could have added a &lt;code&gt;foo.h&lt;&#x2F;code&gt; directly under &lt;code&gt;foo&lt;&#x2F;code&gt;, but that is not good because we would like to separate the interface from implementation. We expect other users to include the location of the header file via &lt;code&gt;-I&lt;&#x2F;code&gt;. Let&#x27;s take care of our internal user &lt;code&gt;foo-main.c&lt;&#x2F;code&gt; too, by modifying the Makefile:&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;codeTitle&quot; colspan=&quot;2&quot;&gt;foo&#x2F;Makefile&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;source makefile&quot;&gt;&lt;span class=&quot;meta group makefile&quot;&gt;&lt;span class=&quot;keyword control conditional makefile&quot;&gt;ifneq&lt;&#x2F;span&gt; &lt;span class=&quot;punctuation section group begin makefile&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;variable parameter makefile&quot;&gt;&lt;span class=&quot;keyword other block begin makefile&quot;&gt;${&lt;&#x2F;span&gt;LINUXINCLUDE&lt;span class=&quot;keyword other block end makefile&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator makefile&quot;&gt;,&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section group end makefile&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;comment line number-sign makefile&quot;&gt;&lt;span class=&quot;punctuation definition comment makefile&quot;&gt;#&lt;&#x2F;span&gt; If we being invoked from kbuild, prepend the proper include paths
&lt;&#x2F;span&gt;&lt;span class=&quot;variable other makefile&quot;&gt;LINUXINCLUDE&lt;&#x2F;span&gt; &lt;span class=&quot;keyword operator assignment makefile&quot;&gt;:=&lt;&#x2F;span&gt; &lt;span class=&quot;meta string makefile&quot;&gt;&lt;span class=&quot;string unquoted makefile&quot;&gt;&lt;span class=&quot;punctuation separator continuation line makefile&quot;&gt;\&lt;&#x2F;span&gt;
        -I&lt;span class=&quot;variable parameter makefile&quot;&gt;&lt;span class=&quot;keyword other block begin makefile&quot;&gt;${&lt;&#x2F;span&gt;M&lt;span class=&quot;keyword other block end makefile&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&#x2F;include &lt;span class=&quot;punctuation separator continuation line makefile&quot;&gt;\&lt;&#x2F;span&gt;
        &lt;span class=&quot;variable parameter makefile&quot;&gt;&lt;span class=&quot;keyword other block begin makefile&quot;&gt;${&lt;&#x2F;span&gt;LINUXINCLUDE&lt;span class=&quot;keyword other block end makefile&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;keyword control conditional makefile&quot;&gt;endif&lt;&#x2F;span&gt;

&lt;span class=&quot;variable other makefile&quot;&gt;foo-objs&lt;&#x2F;span&gt; &lt;span class=&quot;keyword operator assignment makefile&quot;&gt;+=&lt;&#x2F;span&gt; &lt;span class=&quot;meta string makefile&quot;&gt;&lt;span class=&quot;string unquoted makefile&quot;&gt;foo-main.o&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;variable other makefile&quot;&gt;obj-m&lt;&#x2F;span&gt; &lt;span class=&quot;keyword operator assignment makefile&quot;&gt;+=&lt;&#x2F;span&gt; &lt;span class=&quot;meta string makefile&quot;&gt;&lt;span class=&quot;string unquoted makefile&quot;&gt;foo.o&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;p&gt;We can now proceed to also add &lt;code&gt;#include &amp;lt;foo&#x2F;foo.h&amp;gt;&lt;&#x2F;code&gt; in &lt;code&gt;foo-main.c&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;&#x2F;strong&gt; The &lt;code&gt;LINUXINCLUDE&lt;&#x2F;code&gt; directive in kbuild is very useful - it allows to insert new include paths before or after other paths or the kernel headers themselves. Here, we needed abstraction for our private module include paths. The module&#x27;s code is now agnostic to where headers are located, which is a good preparation for any future point in time where the headers might move, and perhaps these headers can move into the kernel itself if our kernel code is really dandy and useful - who knows.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;a-second-dependent-kernel-module&quot;&gt;A second, dependent kernel module&lt;&#x2F;h2&gt;
&lt;p&gt;Similarly to &lt;code&gt;foo&lt;&#x2F;code&gt;, we have created &lt;code&gt;bar&lt;&#x2F;code&gt;. However, in bar we insert a run-time dependency over foo:&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;codeTitle&quot; colspan=&quot;2&quot;&gt;bar&#x2F;bar-main.c&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;source c&quot;&gt;&lt;span class=&quot;meta preprocessor include c&quot;&gt;&lt;span class=&quot;keyword control import include c&quot;&gt;#include&lt;&#x2F;span&gt; &lt;span class=&quot;string quoted other lt-gt include c&quot;&gt;&lt;span class=&quot;punctuation definition string begin c&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;linux&#x2F;kernel.h&lt;span class=&quot;punctuation definition string end c&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;meta preprocessor include c&quot;&gt;&lt;span class=&quot;keyword control import include c&quot;&gt;#include&lt;&#x2F;span&gt; &lt;span class=&quot;string quoted other lt-gt include c&quot;&gt;&lt;span class=&quot;punctuation definition string begin c&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;bar&#x2F;bar.h&lt;span class=&quot;punctuation definition string end c&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;meta preprocessor include c&quot;&gt;&lt;span class=&quot;keyword control import include c&quot;&gt;#include&lt;&#x2F;span&gt; &lt;span class=&quot;string quoted other lt-gt include c&quot;&gt;&lt;span class=&quot;punctuation definition string begin c&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;foo&#x2F;foo.h&lt;span class=&quot;punctuation definition string end c&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;
&lt;span class=&quot;storage type c&quot;&gt;void&lt;&#x2F;span&gt; &lt;span class=&quot;meta function c&quot;&gt;&lt;span class=&quot;entity name function c&quot;&gt;bar_export&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function parameters c&quot;&gt;&lt;span class=&quot;meta group c&quot;&gt;&lt;span class=&quot;punctuation section group begin c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function parameters c&quot;&gt;&lt;span class=&quot;meta group c&quot;&gt;&lt;span class=&quot;storage type c&quot;&gt;void&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section group end c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function c&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;meta function c&quot;&gt;&lt;span class=&quot;meta block c&quot;&gt;&lt;span class=&quot;punctuation section block begin c&quot;&gt;{&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function c&quot;&gt;&lt;span class=&quot;meta block c&quot;&gt;
	&lt;span class=&quot;meta function-call c&quot;&gt;&lt;span class=&quot;variable function c&quot;&gt;foo_export&lt;&#x2F;span&gt;&lt;span class=&quot;meta group c&quot;&gt;&lt;span class=&quot;punctuation section group begin c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call c&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call c&quot;&gt;&lt;span class=&quot;meta group c&quot;&gt;&lt;span class=&quot;punctuation section group end c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation terminator c&quot;&gt;;&lt;&#x2F;span&gt;
	&lt;span class=&quot;meta function-call c&quot;&gt;&lt;span class=&quot;variable function c&quot;&gt;printk&lt;&#x2F;span&gt;&lt;span class=&quot;meta group c&quot;&gt;&lt;span class=&quot;punctuation section group begin c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call c&quot;&gt;&lt;span class=&quot;meta group c&quot;&gt;KERN_DEBUG &lt;span class=&quot;string quoted double c&quot;&gt;&lt;span class=&quot;punctuation definition string begin c&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;bar_export called&lt;span class=&quot;constant character escape c&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation definition string end c&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call c&quot;&gt;&lt;span class=&quot;meta group c&quot;&gt;&lt;span class=&quot;punctuation section group end c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation terminator c&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function c&quot;&gt;&lt;span class=&quot;meta block c&quot;&gt;&lt;span class=&quot;punctuation section block end c&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;meta function-call c&quot;&gt;&lt;span class=&quot;variable function c&quot;&gt;EXPORT_SYMBOL&lt;&#x2F;span&gt;&lt;span class=&quot;meta group c&quot;&gt;&lt;span class=&quot;punctuation section group begin c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call c&quot;&gt;&lt;span class=&quot;meta group c&quot;&gt;bar_export&lt;&#x2F;span&gt;&lt;span class=&quot;meta group c&quot;&gt;&lt;span class=&quot;punctuation section group end c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation terminator c&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;p&gt;But we would like to avoid the following error:&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;text plain&quot;&gt;&#x2F;home&#x2F;dan&#x2F;test&#x2F;bar&#x2F;bar-main.c:2:21: fatal error: foo&#x2F;foo.h: No such file or directory #include &amp;lt;foo&#x2F;foo.h&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;p&gt;Let&#x27;s take the first step. We need to depend on &lt;code&gt;foo&lt;&#x2F;code&gt; in &lt;code&gt;bar&lt;&#x2F;code&gt;. If we would like to be completely flexible, we can support the modes where &lt;code&gt;foo&lt;&#x2F;code&gt; arrives from the kernel itself or from another external kernel module.&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;codeTitle&quot; colspan=&quot;2&quot;&gt;bar&#x2F;Makefile&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;source makefile&quot;&gt;&lt;span class=&quot;meta group makefile&quot;&gt;&lt;span class=&quot;keyword control conditional makefile&quot;&gt;ifneq&lt;&#x2F;span&gt; &lt;span class=&quot;punctuation section group begin makefile&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;variable parameter makefile&quot;&gt;&lt;span class=&quot;keyword other block begin makefile&quot;&gt;${&lt;&#x2F;span&gt;FOO_PATH&lt;span class=&quot;keyword other block end makefile&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator makefile&quot;&gt;,&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section group end makefile&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;variable other makefile&quot;&gt;FOO_INCLUDE&lt;&#x2F;span&gt;&lt;span class=&quot;keyword operator assignment makefile&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;meta string makefile&quot;&gt;&lt;span class=&quot;string unquoted makefile&quot;&gt;-I&lt;span class=&quot;variable parameter makefile&quot;&gt;&lt;span class=&quot;keyword other block begin makefile&quot;&gt;${&lt;&#x2F;span&gt;FOO_PATH&lt;span class=&quot;keyword other block end makefile&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&#x2F;include&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;keyword control conditional makefile&quot;&gt;endif&lt;&#x2F;span&gt;

&lt;span class=&quot;meta group makefile&quot;&gt;&lt;span class=&quot;keyword control conditional makefile&quot;&gt;ifneq&lt;&#x2F;span&gt; &lt;span class=&quot;punctuation section group begin makefile&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;variable parameter makefile&quot;&gt;&lt;span class=&quot;keyword other block begin makefile&quot;&gt;${&lt;&#x2F;span&gt;LINUXINCLUDE&lt;span class=&quot;keyword other block end makefile&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator makefile&quot;&gt;,&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section group end makefile&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;comment line number-sign makefile&quot;&gt;&lt;span class=&quot;punctuation definition comment makefile&quot;&gt;#&lt;&#x2F;span&gt; If we being invoked from kbuild, prepend the proper include paths
&lt;&#x2F;span&gt;&lt;span class=&quot;variable other makefile&quot;&gt;LINUXINCLUDE&lt;&#x2F;span&gt; &lt;span class=&quot;keyword operator assignment makefile&quot;&gt;:=&lt;&#x2F;span&gt; &lt;span class=&quot;meta string makefile&quot;&gt;&lt;span class=&quot;string unquoted makefile&quot;&gt;&lt;span class=&quot;punctuation separator continuation line makefile&quot;&gt;\&lt;&#x2F;span&gt;
        -I&lt;span class=&quot;variable parameter makefile&quot;&gt;&lt;span class=&quot;keyword other block begin makefile&quot;&gt;${&lt;&#x2F;span&gt;M&lt;span class=&quot;keyword other block end makefile&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&#x2F;include &lt;span class=&quot;punctuation separator continuation line makefile&quot;&gt;\&lt;&#x2F;span&gt;
        &lt;span class=&quot;variable parameter makefile&quot;&gt;&lt;span class=&quot;keyword other block begin makefile&quot;&gt;${&lt;&#x2F;span&gt;FOO_INCLUDE&lt;span class=&quot;keyword other block end makefile&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;punctuation separator continuation line makefile&quot;&gt;\&lt;&#x2F;span&gt;
        &lt;span class=&quot;variable parameter makefile&quot;&gt;&lt;span class=&quot;keyword other block begin makefile&quot;&gt;${&lt;&#x2F;span&gt;LINUXINCLUDE&lt;span class=&quot;keyword other block end makefile&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;keyword control conditional makefile&quot;&gt;endif&lt;&#x2F;span&gt;

&lt;span class=&quot;variable other makefile&quot;&gt;bar-objs&lt;&#x2F;span&gt; &lt;span class=&quot;keyword operator assignment makefile&quot;&gt;+=&lt;&#x2F;span&gt; &lt;span class=&quot;meta string makefile&quot;&gt;&lt;span class=&quot;string unquoted makefile&quot;&gt;bar-main.o&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;variable other makefile&quot;&gt;obj-m&lt;&#x2F;span&gt; &lt;span class=&quot;keyword operator assignment makefile&quot;&gt;+=&lt;&#x2F;span&gt; &lt;span class=&quot;meta string makefile&quot;&gt;&lt;span class=&quot;string unquoted makefile&quot;&gt;bar.o&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;p&gt;By adding &lt;code&gt;foo&lt;&#x2F;code&gt; to &lt;code&gt;LINUXINCLUDE&lt;&#x2F;code&gt; we can now have a working build, if we point &lt;code&gt;FOO_PATH&lt;&#x2F;code&gt; to the correct place when building &lt;code&gt;bar&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;text plain&quot;&gt;make -C &#x2F;lib&#x2F;modules&#x2F;`uname -r`&#x2F;source M=`pwd`&#x2F;bar FOO_PATH=`pwd`&#x2F;foo
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;p&gt;But is it not over yet, because we get an error from &lt;code&gt;modpost&lt;&#x2F;code&gt; (although the build is successful):&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;text plain&quot;&gt;WARNING: &amp;quot;foo_export&amp;quot; [&#x2F;home&#x2F;dan&#x2F;test&#x2F;bar&#x2F;bar.ko] undefined!
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;p&gt;The kernel keeps track of which modules are exported by which binary code. By default the program &lt;code&gt;modpost&lt;&#x2F;code&gt; that runs during the build process performs a lookup on all undefined symbols via the kernel&#x27;s own &lt;code&gt;Module.symvers&lt;&#x2F;code&gt; located under &lt;code&gt;&#x2F;lib&#x2F;modules&lt;&#x2F;code&gt; in our case. &lt;code&gt;foo&lt;&#x2F;code&gt; is not there. Let&#x27;s extend our kernel module&#x27;s Makefile. Luckily we can pass &lt;code&gt;KBUILD_EXTRA_SYMBOLS&lt;&#x2F;code&gt; to kbuild, but it is ineffectual to do so from within the Makefile itself when it is invoked by kbuild.&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;codeTitle&quot; colspan=&quot;2&quot;&gt;bar&#x2F;Makefile&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;source makefile&quot;&gt;&lt;span class=&quot;meta group makefile&quot;&gt;&lt;span class=&quot;keyword control conditional makefile&quot;&gt;ifneq&lt;&#x2F;span&gt; &lt;span class=&quot;punctuation section group begin makefile&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;variable parameter makefile&quot;&gt;&lt;span class=&quot;keyword other block begin makefile&quot;&gt;${&lt;&#x2F;span&gt;LINUXINCLUDE&lt;span class=&quot;keyword other block end makefile&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator makefile&quot;&gt;,&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section group end makefile&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;comment line number-sign makefile&quot;&gt;&lt;span class=&quot;punctuation definition comment makefile&quot;&gt;#&lt;&#x2F;span&gt; If we being invoked from kbuild, prepend the proper include paths
&lt;&#x2F;span&gt;&lt;span class=&quot;meta group makefile&quot;&gt;&lt;span class=&quot;keyword control conditional makefile&quot;&gt;ifneq&lt;&#x2F;span&gt; &lt;span class=&quot;punctuation section group begin makefile&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;variable parameter makefile&quot;&gt;&lt;span class=&quot;keyword other block begin makefile&quot;&gt;${&lt;&#x2F;span&gt;FOO_PATH&lt;span class=&quot;keyword other block end makefile&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator makefile&quot;&gt;,&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation section group end makefile&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;variable other makefile&quot;&gt;FOO_INCLUDE&lt;&#x2F;span&gt;&lt;span class=&quot;keyword operator assignment makefile&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;meta string makefile&quot;&gt;&lt;span class=&quot;string unquoted makefile&quot;&gt;-I&lt;span class=&quot;variable parameter makefile&quot;&gt;&lt;span class=&quot;keyword other block begin makefile&quot;&gt;${&lt;&#x2F;span&gt;FOO_PATH&lt;span class=&quot;keyword other block end makefile&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&#x2F;include&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;keyword control conditional makefile&quot;&gt;endif&lt;&#x2F;span&gt;
&lt;span class=&quot;variable other makefile&quot;&gt;LINUXINCLUDE&lt;&#x2F;span&gt; &lt;span class=&quot;keyword operator assignment makefile&quot;&gt;:=&lt;&#x2F;span&gt; &lt;span class=&quot;meta string makefile&quot;&gt;&lt;span class=&quot;string unquoted makefile&quot;&gt;&lt;span class=&quot;punctuation separator continuation line makefile&quot;&gt;\&lt;&#x2F;span&gt;
        -I&lt;span class=&quot;variable parameter makefile&quot;&gt;&lt;span class=&quot;keyword other block begin makefile&quot;&gt;${&lt;&#x2F;span&gt;M&lt;span class=&quot;keyword other block end makefile&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&#x2F;include &lt;span class=&quot;punctuation separator continuation line makefile&quot;&gt;\&lt;&#x2F;span&gt;
        &lt;span class=&quot;variable parameter makefile&quot;&gt;&lt;span class=&quot;keyword other block begin makefile&quot;&gt;${&lt;&#x2F;span&gt;FOO_INCLUDE&lt;span class=&quot;keyword other block end makefile&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;punctuation separator continuation line makefile&quot;&gt;\&lt;&#x2F;span&gt;
        &lt;span class=&quot;variable parameter makefile&quot;&gt;&lt;span class=&quot;keyword other block begin makefile&quot;&gt;${&lt;&#x2F;span&gt;LINUXINCLUDE&lt;span class=&quot;keyword other block end makefile&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;keyword control conditional makefile&quot;&gt;else&lt;&#x2F;span&gt;
&lt;span class=&quot;keyword control makefile&quot;&gt;export&lt;&#x2F;span&gt;&lt;span class=&quot;variable other makefile&quot;&gt; FOO_PATH&lt;&#x2F;span&gt;
&lt;span class=&quot;keyword control makefile&quot;&gt;export&lt;&#x2F;span&gt;&lt;span class=&quot;variable other makefile&quot;&gt; KBUILD_EXTRA_SYMBOLS&lt;span class=&quot;keyword operator assignment makefile&quot;&gt;=&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta string makefile&quot;&gt;&lt;span class=&quot;string unquoted makefile&quot;&gt;&lt;span class=&quot;variable parameter makefile&quot;&gt;&lt;span class=&quot;keyword other block begin makefile&quot;&gt;${&lt;&#x2F;span&gt;FOO_PATH&lt;span class=&quot;keyword other block end makefile&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&#x2F;Module.symvers&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;meta function makefile&quot;&gt;&lt;span class=&quot;entity name function makefile&quot;&gt;all&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;keyword operator assignment makefile&quot;&gt;:&lt;&#x2F;span&gt;
&lt;span class=&quot;meta function arguments makefile&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function body makefile&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function body makefile&quot;&gt;	&lt;span class=&quot;source shell&quot;&gt;&lt;span class=&quot;meta function-call shell&quot;&gt;&lt;span class=&quot;variable function shell&quot;&gt;make&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;meta function-call arguments shell&quot;&gt;&lt;span class=&quot;variable parameter option shell&quot;&gt;&lt;span class=&quot;punctuation definition parameter shell&quot;&gt; -&lt;&#x2F;span&gt;C&lt;&#x2F;span&gt; &lt;span class=&quot;variable parameter makefile&quot;&gt;&lt;span class=&quot;keyword other block begin makefile&quot;&gt;${&lt;&#x2F;span&gt;KDIR&lt;span class=&quot;keyword other block end makefile&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; M=&lt;span class=&quot;keyword other block begin makefile&quot;&gt;$(&lt;&#x2F;span&gt;&lt;span class=&quot;support function builtin makefile&quot;&gt;shell&lt;&#x2F;span&gt; &lt;span class=&quot;source shell&quot;&gt;&lt;span class=&quot;meta function-call shell&quot;&gt;&lt;span class=&quot;variable function shell&quot;&gt;pwd&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;keyword other block end makefile&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;keyword control conditional makefile&quot;&gt;endif&lt;&#x2F;span&gt;

&lt;&#x2F;span&gt;&lt;span class=&quot;variable other makefile&quot;&gt;bar-objs&lt;&#x2F;span&gt; &lt;span class=&quot;keyword operator assignment makefile&quot;&gt;+=&lt;&#x2F;span&gt; &lt;span class=&quot;meta string makefile&quot;&gt;&lt;span class=&quot;string unquoted makefile&quot;&gt;bar-main.o&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;variable other makefile&quot;&gt;obj-m&lt;&#x2F;span&gt; &lt;span class=&quot;keyword operator assignment makefile&quot;&gt;+=&lt;&#x2F;span&gt; &lt;span class=&quot;meta string makefile&quot;&gt;&lt;span class=&quot;string unquoted makefile&quot;&gt;bar.o&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;p&gt;In order to not make the command line any longer, we have inserted a proxy target &#x27;all&#x27;. Also, &lt;code&gt;KBUILD_EXTRA_SYMBOLS&lt;&#x2F;code&gt; and &lt;code&gt;FOO_PATH&lt;&#x2F;code&gt; are forwarded to kbuild, and &lt;code&gt;KDIR&lt;&#x2F;code&gt; receives the path of the kernel tree from the top level invocation.&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;text plain&quot;&gt;$ make -C bar KDIR=&#x2F;lib&#x2F;modules&#x2F;`uname -r`&#x2F;source FOO_PATH=`pwd`&#x2F;foo
make: Entering directory `&#x2F;home&#x2F;dan&#x2F;test&#x2F;bar&amp;#39;
make -C &#x2F;lib&#x2F;modules&#x2F;3.17.3-200.fc20.x86_64&#x2F;source M=&#x2F;home&#x2F;dan&#x2F;test&#x2F;bar
make[1]: Entering directory `&#x2F;usr&#x2F;src&#x2F;kernels&#x2F;3.17.3-200.fc20.x86_64&amp;#39;
  LD      &#x2F;home&#x2F;dan&#x2F;test&#x2F;bar&#x2F;built-in.o
  CC [M]  &#x2F;home&#x2F;dan&#x2F;test&#x2F;bar&#x2F;bar-main.o
  LD [M]  &#x2F;home&#x2F;dan&#x2F;test&#x2F;bar&#x2F;bar.o
  Building modules, stage 2.
  MODPOST 1 modules
  CC      &#x2F;home&#x2F;dan&#x2F;test&#x2F;bar&#x2F;bar.mod.o
  LD [M]  &#x2F;home&#x2F;dan&#x2F;test&#x2F;bar&#x2F;bar.ko
make[1]: Leaving directory `&#x2F;usr&#x2F;src&#x2F;kernels&#x2F;3.17.3-200.fc20.x86_64&amp;#39;
make: Leaving directory `&#x2F;home&#x2F;dan&#x2F;test&#x2F;bar&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;p&gt;There are several things consider. &lt;code&gt;foo&lt;&#x2F;code&gt; must already be built when &lt;code&gt;bar&lt;&#x2F;code&gt; is built, otherwise &lt;code&gt;foo&lt;&#x2F;code&gt;&#x27;s &lt;code&gt;Module.symvers&lt;&#x2F;code&gt; is missing, and you would get a warning. The other thing to keep in mind is that the Makefile is evaluated twice - once in our direct execution and a second time when kbuild evaluates it. The current directory (`pwd`) in the second evaluation is the kernel tree, and it already contains a lots of useful bits such as &lt;code&gt;LINUXINCLUDE&lt;&#x2F;code&gt;. We should be careful about kbuild&#x27;s own evaluation so that we don&#x27;t accidentally override stuff that we did not intend or insert makefile targets that don&#x27;t belong under the kbuild environment.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;careful-replacement&quot;&gt;Careful replacement&lt;&#x2F;h1&gt;
&lt;p&gt;Note that the use of &lt;code&gt;LINUXINCLUDE&lt;&#x2F;code&gt; to replace existing kernel headers should be used with care. It is powerful enough to allow re-packaging of whole stacks of code that overlap with existing kernel software stack. Some kernel subsystems are spreading their headers over paths that don&#x27;t necessarily start with &lt;code&gt;linux&#x2F;&lt;&#x2F;code&gt;, for example, &lt;code&gt;uapi&#x2F;linux&lt;&#x2F;code&gt; (user space headers), and &lt;code&gt;asm&#x2F;&lt;&#x2F;code&gt; (architecture specific headers, actually located under &lt;code&gt;arch&#x2F;*&#x2F;include&lt;&#x2F;code&gt;). Ordering of paths when extending &lt;code&gt;LINUXINCLUDE&lt;&#x2F;code&gt; is key in that case.&lt;&#x2F;p&gt;
&lt;p&gt;One should mind including the proper headers so that the API are validated in compile time and match in run-time. For example, it is possible for an external package X to replace some modular existing kernel subsystem X with modified APIs, but when any other piece of code - user-space and kernel space - tries to compile against X, it should refer to the intended headers.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Six Principles of How I Write My Journal</title>
		<published>2014-03-23T00:00:00+00:00</published>
		<updated>2014-03-23T00:00:00+00:00</updated>
		<link href="https://blog.aloni.org/posts/six-principles-of-how-i-write-my-journal/" type="text/html"/>
		<id>https://blog.aloni.org/posts/six-principles-of-how-i-write-my-journal/</id>
		<content type="html">&lt;p&gt;Despite not being a frequent blogger, I am consistent with keeping a private journal that documents my life. The level of depth and introspection achievable with a private journal is different than what can be expected from a public blog or posts in a social network profile (which show mostly an external view), and over the years I have learned about how greatly it contributed to my decision making process and understanding of self.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;There can be several advantages of keeping a private journal:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Your writing pad behaves like a psychologist. Even if no one will ever read your journal, just writing about your life puts things in proper perspective. It&#x27;s like a &lt;span class=&#x27;external-link-outer&#x27;&gt;&lt;a class=&quot;external-link&quot;rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Rubber_duck_debugging&quot;&gt;Rubber duck debugging&lt;span class=&#x27;external-link-no-underline&#x27;&gt;&lt;&#x2F;span&gt;&lt;svg width=&#x27;13.5&#x27; height=&#x27;13.5&#x27; aria-hidden=&#x27;true&#x27; viewBox=&#x27;0 0 24 24&#x27; class=&#x27;iconExternalLink_wgqa&#x27;&gt;&lt;path fill=&#x27;currentColor&#x27; d=&#x27;M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z&#x27;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;span&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Reading past journal entries teaches you about how much you changed and how you changed. Also, you find out that you have worried to much. Overall it would reduce your stress levels.&lt;&#x2F;li&gt;
&lt;li&gt;There are places you have been and people you have met and some decisions you have made that you would not like to forget many years down the road, because these understanding how your personality can thus far at any point in time can be helpful for knowing how it could develop even further.&lt;&#x2F;li&gt;
&lt;li&gt;If you ever want to spend countless hours some time in 2030 telling your kids theÂ exact andÂ glorious story of &#x27;&lt;span class=&#x27;external-link-outer&#x27;&gt;&lt;a class=&quot;external-link&quot;rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;How_I_Met_Your_Mother&quot;&gt;how I met your mother&lt;span class=&#x27;external-link-no-underline&#x27;&gt;&lt;&#x2F;span&gt;&lt;svg width=&#x27;13.5&#x27; height=&#x27;13.5&#x27; aria-hidden=&#x27;true&#x27; viewBox=&#x27;0 0 24 24&#x27; class=&#x27;iconExternalLink_wgqa&#x27;&gt;&lt;path fill=&#x27;currentColor&#x27; d=&#x27;M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z&#x27;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;span&gt;&#x27; you&#x27;d be able to do so.&lt;&#x2F;li&gt;
&lt;li&gt;You might improve your writing skills if you don&#x27;t have much of them to begin with.&lt;&#x2F;li&gt;
&lt;li&gt;It&#x27;s your auto-biography material, in case you become that magnificent successful person you plan to be (don&#x27;t we all need ambitions).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;It took a few years to find the best method to sustain a good private journal. I&#x27;d share you with some interdependent principles that I have garnered from the practice:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Keep one entry per month. One month is not too short to make the journal seem too tedious and boring in retrospect, and not too long so you wouldn&#x27;t forget the key aspects of how you spend your time, and your reflections over that spent time. Also, a month is the sweet spot that it takes most things to develop in a way that actual description of progress is possible.&lt;&#x2F;li&gt;
&lt;li&gt;Start writing the entry about a week before the month is due, and keep revising it until the &#x27;deadline&#x27;. It is a drafting process which produces a nice and readable entry.&lt;&#x2F;li&gt;
&lt;li&gt;With that final week revisions you should find yourself making plans for the next month, and even writing them down, going back to see what you planned to do the previous month, etc.&lt;&#x2F;li&gt;
&lt;li&gt;Write more than 1,000 words. I usually reach 2,000. Turns out your life is less boring than you thought.&lt;&#x2F;li&gt;
&lt;li&gt;Pick a title for each entry, like a chapter from a book. And add a soundtrack. Just kidding.&lt;&#x2F;li&gt;
&lt;li&gt;Write about everything, encrypt the damn thing, and don&#x27;t let anyone read it, including the NSA (I don&#x27;t back it up to the internet anywhere conspicuously).Â Otherwise, you would not write honest entries.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;If you do that for 50 years, you would get one hell of a book. That&#x27;s the book of your life. And whether you decide to use it exclusively for reminiscing byÂ taking it to your grave, or be careless about it near death and open it up for any interested party, it would be worthwhile.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Extending Monads for Debugging in Haskell</title>
		<published>2012-07-02T00:00:00+00:00</published>
		<updated>2012-07-02T00:00:00+00:00</updated>
		<link href="https://blog.aloni.org/posts/extending-monads-for-debugging-in-haskell/" type="text/html"/>
		<id>https://blog.aloni.org/posts/extending-monads-for-debugging-in-haskell/</id>
		<content type="html">&lt;p&gt;One of the nice things about &lt;span class=&#x27;external-link-outer&#x27;&gt;&lt;a class=&quot;external-link&quot;rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.haskell.org&#x2F;haskellwiki&#x2F;Haskell&quot;&gt;Haskell&lt;span class=&#x27;external-link-no-underline&#x27;&gt;&lt;&#x2F;span&gt;&lt;svg width=&#x27;13.5&#x27; height=&#x27;13.5&#x27; aria-hidden=&#x27;true&#x27; viewBox=&#x27;0 0 24 24&#x27; class=&#x27;iconExternalLink_wgqa&#x27;&gt;&lt;path fill=&#x27;currentColor&#x27; d=&#x27;M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z&#x27;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;span&gt; is the ability to extend the class of &lt;span class=&#x27;external-link-outer&#x27;&gt;&lt;a class=&quot;external-link&quot;rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.haskell.org&#x2F;tutorial&#x2F;monads.html&quot;&gt;Monads&lt;span class=&#x27;external-link-no-underline&#x27;&gt;&lt;&#x2F;span&gt;&lt;svg width=&#x27;13.5&#x27; height=&#x27;13.5&#x27; aria-hidden=&#x27;true&#x27; viewBox=&#x27;0 0 24 24&#x27; class=&#x27;iconExternalLink_wgqa&#x27;&gt;&lt;path fill=&#x27;currentColor&#x27; d=&#x27;M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z&#x27;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;span&gt;.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;One of the original purposes of Monads was to describe flow while leaving the implementation of the flow to a later stage. This allows to define what happens as a side effect of the computational steps.&lt;&#x2F;p&gt;
&lt;p&gt;For example, let&#x27;s say we have a computation that we would like to debug. If we formulate it algebraically, it would be harder to checks the step of the computation in run-time. So naturally we break the computation into statement-like stages, introducing code to trace the intermediate results in between.&lt;&#x2F;p&gt;
&lt;p&gt;However, sometimes we would also like to &lt;strong&gt;keep the performance of the &#x27;untraced&#x27; computation as it was&lt;&#x2F;strong&gt;. In C++ we can can use templates in order to instantiate two implementations of the computation. In C we would probably use macros trickery of some sort along with static inline functions that define to nothing. In Python we would probably use a global debug variable, the &lt;code&gt;__debug__&lt;&#x2F;code&gt; builtin, or a dedicated logging library.&lt;&#x2F;p&gt;
&lt;p&gt;In Haskell, this can come naturally as an extension of the Monad class, with the advantage of multiple instantiation. To illustrate, let&#x27;s extend Monad with MonadDebug:&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;source haskell&quot;&gt;&lt;span class=&quot;meta import haskell&quot;&gt;&lt;span class=&quot;keyword other haskell&quot;&gt;import&lt;&#x2F;span&gt; &lt;span class=&quot;support other module haskell&quot;&gt;Control.Monad.Identity&lt;&#x2F;span&gt; &lt;span class=&quot;meta declaration exports haskell&quot;&gt;(&lt;span class=&quot;entity name function haskell&quot;&gt;runIdentity&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation separator comma haskell&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;storage type haskell&quot;&gt;Identity&lt;&#x2F;span&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;

&lt;span class=&quot;meta declaration class haskell&quot;&gt;&lt;span class=&quot;keyword other haskell&quot;&gt;class&lt;&#x2F;span&gt; &lt;span class=&quot;support class prelude haskell&quot;&gt;Monad&lt;&#x2F;span&gt; &lt;span class=&quot;variable other generic-type haskell&quot;&gt;m&lt;&#x2F;span&gt; =&amp;gt; &lt;span class=&quot;entity other inherited-class haskell&quot;&gt;MonadDebug&lt;&#x2F;span&gt; &lt;span class=&quot;variable other generic-type haskell&quot;&gt;m&lt;&#x2F;span&gt; &lt;span class=&quot;keyword other haskell&quot;&gt;where&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;meta function type-declaration haskell&quot;&gt;  &lt;span class=&quot;entity name function haskell&quot;&gt;logDebug&lt;&#x2F;span&gt; &lt;span class=&quot;keyword other double-colon haskell&quot;&gt;::&lt;&#x2F;span&gt; &lt;span class=&quot;storage type haskell&quot;&gt;String&lt;&#x2F;span&gt; &lt;span class=&quot;keyword other arrow haskell&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;variable other generic-type haskell&quot;&gt;m&lt;&#x2F;span&gt; &lt;span class=&quot;support constant unit haskell&quot;&gt;()&lt;&#x2F;span&gt;

&lt;&#x2F;span&gt;&lt;span class=&quot;meta declaration instance haskell&quot;&gt;&lt;span class=&quot;keyword other haskell&quot;&gt;instance&lt;&#x2F;span&gt; &lt;span class=&quot;storage type haskell&quot;&gt;MonadDebug&lt;&#x2F;span&gt; &lt;span class=&quot;storage type haskell&quot;&gt;IO&lt;&#x2F;span&gt; &lt;span class=&quot;keyword other haskell&quot;&gt;where&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
  logDebug s &lt;span class=&quot;keyword operator haskell&quot;&gt;=&lt;&#x2F;span&gt; putStrLn s

&lt;span class=&quot;meta declaration instance haskell&quot;&gt;&lt;span class=&quot;keyword other haskell&quot;&gt;instance&lt;&#x2F;span&gt; &lt;span class=&quot;storage type haskell&quot;&gt;MonadDebug&lt;&#x2F;span&gt; &lt;span class=&quot;storage type haskell&quot;&gt;Identity&lt;&#x2F;span&gt; &lt;span class=&quot;keyword other haskell&quot;&gt;where&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
  logDebug _ &lt;span class=&quot;keyword operator haskell&quot;&gt;=&lt;&#x2F;span&gt; return &lt;span class=&quot;constant language unit haskell&quot;&gt;()&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;p&gt;Those instances make it possible to use class function &lt;code&gt;logDebug&lt;&#x2F;code&gt; directly under IO or under pure computations with the Identity Monad.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s define a sample computation function:&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;source haskell&quot;&gt;&lt;span class=&quot;meta function type-declaration haskell&quot;&gt;&lt;span class=&quot;entity name function haskell&quot;&gt;computation&lt;&#x2F;span&gt; &lt;span class=&quot;keyword other double-colon haskell&quot;&gt;::&lt;&#x2F;span&gt; &lt;span class=&quot;storage type haskell&quot;&gt;MonadDebug&lt;&#x2F;span&gt; &lt;span class=&quot;variable other generic-type haskell&quot;&gt;m&lt;&#x2F;span&gt; &lt;span class=&quot;keyword other big-arrow haskell&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;storage type haskell&quot;&gt;Integer&lt;&#x2F;span&gt; &lt;span class=&quot;keyword other arrow haskell&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;storage type haskell&quot;&gt;Integer&lt;&#x2F;span&gt; &lt;span class=&quot;keyword other arrow haskell&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;variable other generic-type haskell&quot;&gt;m&lt;&#x2F;span&gt; &lt;span class=&quot;storage type haskell&quot;&gt;Integer&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;computation x y &lt;span class=&quot;keyword operator haskell&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;keyword control haskell&quot;&gt;do&lt;&#x2F;span&gt;
  &lt;span class=&quot;keyword other haskell&quot;&gt;let&lt;&#x2F;span&gt; t1 &lt;span class=&quot;keyword operator haskell&quot;&gt;=&lt;&#x2F;span&gt; x * &lt;span class=&quot;constant numeric integer decimal haskell&quot;&gt;2&lt;&#x2F;span&gt; &lt;span class=&quot;keyword operator haskell&quot;&gt;+&lt;&#x2F;span&gt; y
  logDebug &lt;span class=&quot;keyword operator haskell&quot;&gt;$&lt;&#x2F;span&gt; &lt;span class=&quot;string quoted double haskell&quot;&gt;&lt;span class=&quot;punctuation definition string begin haskell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Here, t1=&lt;span class=&quot;punctuation definition string end haskell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;keyword operator haskell&quot;&gt;++&lt;&#x2F;span&gt; (show t1)
  &lt;span class=&quot;keyword other haskell&quot;&gt;let&lt;&#x2F;span&gt; t2 &lt;span class=&quot;keyword operator haskell&quot;&gt;=&lt;&#x2F;span&gt; t1 * &lt;span class=&quot;constant numeric integer decimal haskell&quot;&gt;3&lt;&#x2F;span&gt; &lt;span class=&quot;keyword operator haskell&quot;&gt;+&lt;&#x2F;span&gt; x
  logDebug &lt;span class=&quot;keyword operator haskell&quot;&gt;$&lt;&#x2F;span&gt; &lt;span class=&quot;string quoted double haskell&quot;&gt;&lt;span class=&quot;punctuation definition string begin haskell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Here, t2=&lt;span class=&quot;punctuation definition string end haskell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;keyword operator haskell&quot;&gt;++&lt;&#x2F;span&gt; (show t2)
  &lt;span class=&quot;keyword other haskell&quot;&gt;let&lt;&#x2F;span&gt; t3 &lt;span class=&quot;keyword operator haskell&quot;&gt;=&lt;&#x2F;span&gt; t2 * &lt;span class=&quot;constant numeric integer decimal haskell&quot;&gt;7&lt;&#x2F;span&gt; &lt;span class=&quot;keyword operator haskell&quot;&gt;-&lt;&#x2F;span&gt; x * x
  logDebug &lt;span class=&quot;keyword operator haskell&quot;&gt;$&lt;&#x2F;span&gt; &lt;span class=&quot;string quoted double haskell&quot;&gt;&lt;span class=&quot;punctuation definition string begin haskell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Here, t3=&lt;span class=&quot;punctuation definition string end haskell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;keyword operator haskell&quot;&gt;++&lt;&#x2F;span&gt; (show t3)
  return t3
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;p&gt;The type signature for &lt;code&gt;computation&lt;&#x2F;code&gt; is optional, and can be inferred by the compiler, simply because we referenced logDebug under our Monad.&lt;&#x2F;p&gt;
&lt;p&gt;Now, let&#x27;s try to use it under the two environments. Here&#x27;s the code:&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;source haskell&quot;&gt;&lt;span class=&quot;meta function type-declaration haskell&quot;&gt;&lt;span class=&quot;entity name function haskell&quot;&gt;main&lt;&#x2F;span&gt; &lt;span class=&quot;keyword other double-colon haskell&quot;&gt;::&lt;&#x2F;span&gt; &lt;span class=&quot;storage type haskell&quot;&gt;IO&lt;&#x2F;span&gt; &lt;span class=&quot;support constant unit haskell&quot;&gt;()&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;main &lt;span class=&quot;keyword operator haskell&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;keyword control haskell&quot;&gt;do&lt;&#x2F;span&gt;
  putStrLn &lt;span class=&quot;string quoted double haskell&quot;&gt;&lt;span class=&quot;punctuation definition string begin haskell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Run computation as pure:&lt;span class=&quot;punctuation definition string end haskell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
  &lt;span class=&quot;keyword other haskell&quot;&gt;let&lt;&#x2F;span&gt; t &lt;span class=&quot;keyword operator haskell&quot;&gt;=&lt;&#x2F;span&gt; runIdentity &lt;span class=&quot;keyword operator haskell&quot;&gt;$&lt;&#x2F;span&gt; computation &lt;span class=&quot;constant numeric integer decimal haskell&quot;&gt;1&lt;&#x2F;span&gt; &lt;span class=&quot;constant numeric integer decimal haskell&quot;&gt;2&lt;&#x2F;span&gt;
  putStr &lt;span class=&quot;string quoted double haskell&quot;&gt;&lt;span class=&quot;punctuation definition string begin haskell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Result: &lt;span class=&quot;punctuation definition string end haskell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
  print t
  putStrLn &lt;span class=&quot;string quoted double haskell&quot;&gt;&lt;span class=&quot;punctuation definition string begin haskell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span class=&quot;punctuation definition string end haskell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;

  putStrLn &lt;span class=&quot;string quoted double haskell&quot;&gt;&lt;span class=&quot;punctuation definition string begin haskell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Run computation with impure IO logging stages: &lt;span class=&quot;punctuation definition string end haskell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
  t&amp;#39; &lt;span class=&quot;keyword operator haskell&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt; computation &lt;span class=&quot;constant numeric integer decimal haskell&quot;&gt;1&lt;&#x2F;span&gt; &lt;span class=&quot;constant numeric integer decimal haskell&quot;&gt;2&lt;&#x2F;span&gt;
  putStr &lt;span class=&quot;string quoted double haskell&quot;&gt;&lt;span class=&quot;punctuation definition string begin haskell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Result: &lt;span class=&quot;punctuation definition string end haskell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
  print t&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;p&gt;Let&#x27;s try to run it:&lt;&#x2F;p&gt;
&lt;div class=&quot;mycode-block&quot;&gt;&lt;table class=&quot;codeBox&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;sourceCode sourceCodeWrap&quot;&gt;&lt;pre class=&quot;code&quot;&gt;&lt;span class=&quot;text plain&quot;&gt;# runghc test.hs
Run computation as pure:
Result: 90

Run computation with impure IO logging stages:
Here, t1=4
Here, t2=13
Here, t3=90
Result: 90
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;div&gt;
&lt;p&gt;The advantage is that the compiler can optimize the pure Identity Monad computation much better compared to the non-pure computation, and we achieve this without using any Haskell constructs that are much sophisticated.&lt;&#x2F;p&gt;
&lt;p&gt;p.s. A novice reader might also be able to devise MonadDebug instances for the various Monad transformer classes under the cases where MonadIO is the underlying Monad.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Success of VM infrastructure explained by historically crippled OS design</title>
		<published>2010-12-22T00:00:00+00:00</published>
		<updated>2010-12-22T00:00:00+00:00</updated>
		<link href="https://blog.aloni.org/posts/success-of-vm-infrastructure-explained-by-historically-crippled-os-design/" type="text/html"/>
		<id>https://blog.aloni.org/posts/success-of-vm-infrastructure-explained-by-historically-crippled-os-design/</id>
		<content type="html">&lt;p&gt;During the last decade we have seen the rise of server and desktop virtualisation infrastructure as the official and standard means of creating services and resources isolation at both the client and server side. System virtualization provided rigid management of computing resources over standardized PC and server hardware for the first time.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;However when one thinks about it from an engineering perspective - why does a full PC system virtualization needed in order to achieve &#x27;rigid management of computing resources&#x27;? Why couldn&#x27;t &lt;span class=&#x27;external-link-outer&#x27;&gt;&lt;a class=&quot;external-link&quot;rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Operating_system&quot;&gt;OS&lt;span class=&#x27;external-link-no-underline&#x27;&gt;&lt;&#x2F;span&gt;&lt;svg width=&#x27;13.5&#x27; height=&#x27;13.5&#x27; aria-hidden=&#x27;true&#x27; viewBox=&#x27;0 0 24 24&#x27; class=&#x27;iconExternalLink_wgqa&#x27;&gt;&lt;path fill=&#x27;currentColor&#x27; d=&#x27;M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z&#x27;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;span&gt; designers create those abilities in the first place? Why do we need hyper-visors such as &lt;span class=&#x27;external-link-outer&#x27;&gt;&lt;a class=&quot;external-link&quot;rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.xen.org&#x2F;&quot;&gt;Xen&lt;span class=&#x27;external-link-no-underline&#x27;&gt;&lt;&#x2F;span&gt;&lt;svg width=&#x27;13.5&#x27; height=&#x27;13.5&#x27; aria-hidden=&#x27;true&#x27; viewBox=&#x27;0 0 24 24&#x27; class=&#x27;iconExternalLink_wgqa&#x27;&gt;&lt;path fill=&#x27;currentColor&#x27; d=&#x27;M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z&#x27;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;span&gt; and software such as one provided by &lt;span class=&#x27;external-link-outer&#x27;&gt;&lt;a class=&quot;external-link&quot;rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.vmware.com&quot;&gt;VMware&lt;span class=&#x27;external-link-no-underline&#x27;&gt;&lt;&#x2F;span&gt;&lt;svg width=&#x27;13.5&#x27; height=&#x27;13.5&#x27; aria-hidden=&#x27;true&#x27; viewBox=&#x27;0 0 24 24&#x27; class=&#x27;iconExternalLink_wgqa&#x27;&gt;&lt;path fill=&#x27;currentColor&#x27; d=&#x27;M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z&#x27;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;span&gt; in order to attain these abilities?&lt;&#x2F;p&gt;
&lt;p&gt;Short answer is that all major OS writers did not provide the proper infrastructure for running sub-instances of the OS &lt;strong&gt;efficiently&lt;&#x2F;strong&gt; and managing those instances with Quality of Service and fail-over on a network of hardware. A standard OS only provides the means of running unmigratable processes. A standard OS is there just to provide isolation between processes, scheduling, memory management, hardware abstraction, implementation of file systems and networking protocols. In the past there were attempts to extend the OS concept in order to accommodate clustering capabilities.&lt;&#x2F;p&gt;
&lt;p&gt;Linux serves as a good ground for these kind of experiments. Take for example - &lt;span class=&#x27;external-link-outer&#x27;&gt;&lt;a class=&quot;external-link&quot;rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.mosix.org&quot;&gt;MOSIX&lt;span class=&#x27;external-link-no-underline&#x27;&gt;&lt;&#x2F;span&gt;&lt;svg width=&#x27;13.5&#x27; height=&#x27;13.5&#x27; aria-hidden=&#x27;true&#x27; viewBox=&#x27;0 0 24 24&#x27; class=&#x27;iconExternalLink_wgqa&#x27;&gt;&lt;path fill=&#x27;currentColor&#x27; d=&#x27;M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z&#x27;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;span&gt;, which is a project that extends Linux in a sense that one Linux system encompasses more than one PC, allowing for process migration. However process migration on its own is inadequate since a process is just one part that composes &#x27;service&#x27;, and you would actually want to migrate whole services efficiently in a fully isolated manner. Another project is &#x27;&lt;span class=&#x27;external-link-outer&#x27;&gt;&lt;a class=&quot;external-link&quot;rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;user-mode-linux.sourceforge.net&quot;&gt;User Mode Linux&lt;span class=&#x27;external-link-no-underline&#x27;&gt;&lt;&#x2F;span&gt;&lt;svg width=&#x27;13.5&#x27; height=&#x27;13.5&#x27; aria-hidden=&#x27;true&#x27; viewBox=&#x27;0 0 24 24&#x27; class=&#x27;iconExternalLink_wgqa&#x27;&gt;&lt;path fill=&#x27;currentColor&#x27; d=&#x27;M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z&#x27;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;span&gt;&#x27; (often confused with &lt;span class=&#x27;external-link-outer&#x27;&gt;&lt;a class=&quot;external-link&quot;rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Unified_Modeling_Language&quot;&gt;UML&lt;span class=&#x27;external-link-no-underline&#x27;&gt;&lt;&#x2F;span&gt;&lt;svg width=&#x27;13.5&#x27; height=&#x27;13.5&#x27; aria-hidden=&#x27;true&#x27; viewBox=&#x27;0 0 24 24&#x27; class=&#x27;iconExternalLink_wgqa&#x27;&gt;&lt;path fill=&#x27;currentColor&#x27; d=&#x27;M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z&#x27;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;span&gt; which is something else), which allows running the Linux kernel as a Linux process. At some point in time there was a resource project that added suspend&#x2F;resume support to &#x27;User Mode Linux&#x27;, but except that ability, &#x27;User Model Linux&#x27; did not gain ground in the virtualization field.&lt;&#x2F;p&gt;
&lt;p&gt;Take another example - &lt;span class=&#x27;external-link-outer&#x27;&gt;&lt;a class=&quot;external-link&quot;rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.colinux.org&quot;&gt;Cooperative Linux&lt;span class=&#x27;external-link-no-underline&#x27;&gt;&lt;&#x2F;span&gt;&lt;svg width=&#x27;13.5&#x27; height=&#x27;13.5&#x27; aria-hidden=&#x27;true&#x27; viewBox=&#x27;0 0 24 24&#x27; class=&#x27;iconExternalLink_wgqa&#x27;&gt;&lt;path fill=&#x27;currentColor&#x27; d=&#x27;M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z&#x27;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;span&gt;, written by yours truly. Except for helping lots of Windows users fiddling with Linux on their desktop machines, it did not gain ground in the virtualization industry on servers (even though it also runs on Linux, with the best opportunity for performance). All those projects are just partial hacks in the direction of VM infrastructure and none seem to provide it in a productive sense. All major OS designs are crippled in a sense that you need to virtualized them (i.e. put them in &amp;quot;a box&amp;quot;) in order to attain VM infrastructure capabilities. Key for VM infrastructure is that you must provide the ability to manage your VMs on a cluster in an enterprise level manner and capabilities. Of course, I don&#x27;t blame OS writers for not detecting these needs in the corporate world. Actually, there were a few engineers that did detect it, and even awhile back. IBM already &lt;span class=&#x27;external-link-outer&#x27;&gt;&lt;a class=&quot;external-link&quot;rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.networkworld.com&#x2F;news&#x2F;2009&#x2F;043009-ibm-virtualization.html&quot;&gt;came up with the idea&lt;span class=&#x27;external-link-no-underline&#x27;&gt;&lt;&#x2F;span&gt;&lt;svg width=&#x27;13.5&#x27; height=&#x27;13.5&#x27; aria-hidden=&#x27;true&#x27; viewBox=&#x27;0 0 24 24&#x27; class=&#x27;iconExternalLink_wgqa&#x27;&gt;&lt;path fill=&#x27;currentColor&#x27; d=&#x27;M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z&#x27;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;span&gt; of virtualization awhile back on their mainframes. However, that was the beginning - and later on when traditional OS designs for single, desktop users emerged those features were not needed. Unfortunately those OSes also propagated to the server side, and only few saw the potential to bring the virtualization feature back under the cloth of the &#x27;full system virtualization&#x27; method, adding a VM infrastructure.&lt;&#x2F;p&gt;
&lt;p&gt;Rethinking the Operating System concept, one would come up with a &#x27;&lt;strong&gt;Super Operating System&lt;&#x2F;strong&gt;&#x27; concept (i.e. SOS, also a funny overlap with the acronym for - &amp;quot;Save Our Souls&amp;quot;), that would define a new Operating System from the ground up that would also conform to all the attributes that are currently provided by standard &#x27;VM infrastructure&#x27;. SOS should be able to run instances of itself, connecting those instances with their dependencies. For example, I would be able to run two instances and connect them with a virtual Ethernet link (of course, I&#x27;d need a separate network stack for each instance). It should also make it possible to migrate its sub-instances, and other aspects of current-day&#x27;s VM management.&lt;&#x2F;p&gt;
&lt;p&gt;I know that designing a new OS as a standalone mission is somewhat unessential, but I have other ideas to pursue in that venue that would might improve the software world a little, but that&#x27;s a topic for another post.&lt;&#x2F;p&gt;
</content>
	</entry>
</feed>
